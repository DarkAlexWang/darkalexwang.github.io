<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bay-area-photographer-recommendation</title>
      <link href="/2022/01/30/Bay-area-photographer-recommendation/"/>
      <url>/2022/01/30/Bay-area-photographer-recommendation/</url>
      
        <content type="html"><![CDATA[<p>我自己后来找的是朋友推荐的一个摄影师，我各方面还是挺满意的，如果有兴趣可以联系：<br>wechat：luck00</p><p>下面也列一些我在网上找到的摄影师，大家可以自行筛选:</p><ol><li><p>朋友推荐了一个独立摄影师，名字是Stephanie Secrest，Google就可以搜到她的网站。去年的价钱是$750 三个小时。这三个小时属于实际拍摄时间。加上换地方，找拍摄点，调整等时间，我们总共花了大概七八个小时了。摄影师人很好，让我们非常放松开心，她抓拍了很多自然的照片。婚纱是我在亚马逊60刀买的，简约型的。质量不好但是照片上看不出来。我买了正经的婚纱，但是不舍得婚礼前穿。另外我还买了一两条打算婚礼穿的其他礼服，拍照也用了。如果楼主时间充裕完全可以在淘宝上买，很多婚纱都是可调节的，所以不用太担心号码。</p></li><li><p>推荐你Micheal，在CUPPERTINO。华人摄影师，夫妻老婆店，我婚纱和三番领证都是请他拍的，提供车和服装，化妆，道具，各种全包，还有精美相册，费用应该不用4000</p></li></ol><a id="more"></a><ol start="3"><li>在半岛 Millbrae 的色色婚纱摄影照过婚纱照，摄影师小志，之前在国内还在泰国做过婚纱摄影。所以对结婚照挺有经验的。</li></ol><p>Booking 2020/2021 events. Please complete contact form below to receive further information!</p><ul><li>Email: <a href="mailto:studioagfa1@gmail.com">studioagfa1@gmail.com</a></li><li>WeChat: studioagfasales</li><li>INS: @STUDIOAGFA</li><li>Address: 550 Halekauwila Street, Suit306, Honolulu, 96813</li></ul><ol start="4"><li><a href="https://instagram.com/elvisyupho...tm_medium=copy_link" target="_blank" rel="noopener">https://instagram.com/elvisyupho...tm_medium=copy_link</a></li></ol><ol start="5"><li><p>vivi lin</p></li><li><p>vid studio</p></li><li><p>stella yang</p></li><li><p>studio opia</p></li><li><p><a href="https://www.virlphoto.com/" target="_blank" rel="noopener">https://www.virlphoto.com/</a><br>很有艺术气息的风格</p></li></ol><ol start="10"><li>This is my sister-in-law’s website, you can mention Julie Yang when contacting her.<br>jessicabartlettphoto.com</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Recommendation, Photograph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hawai Oahu Travel 夏威夷欧胡岛玩乐</title>
      <link href="/2022/01/09/Hawai-Oahu-Travel/"/>
      <url>/2022/01/09/Hawai-Oahu-Travel/</url>
      
        <content type="html"><![CDATA[<h4 id="A-summary-of-the-restaurants-and-places-to-be-with-personal-preference"><a href="#A-summary-of-the-restaurants-and-places-to-be-with-personal-preference" class="headerlink" title="A summary of the restaurants and places to be with personal preference."></a>A summary of the restaurants and places to be with personal preference.</h4><p>###【餐厅】<br>疫情期间接待人数有限，大家如果有感兴趣的餐厅最好都提前预约一下。<br>因为疫情的原因，我们都是take out，其实挺好的，第一安全，第二可以避免排队，善用online ordering。<br>打星号的是我去过的***</p><p>🍍Musubi Cafe Iyasume<br>夏威夷特色午餐肉饭团</p><p>🍍Yoshitsune **<br>日料 寿喜锅、松茸饭（时令）、寿司等等<br>Located in: Park Shore Waikiki Hotel<br>Address: 2586 Kalakaua Ave, Honolulu, HI 96815</p><p>🍍Island Vintage Coffee**<br>连锁咖啡餐厅（在Royal Hawaiian Center那家最火随时排队）<br>我们去的这家在North Shore，附近还有Matsumoto刨冰。<br>听说三明治什么的很好吃，我们去太早了没吃到😂</p><a id="more"></a><p>🍍Giovanni’s Shrimp Truck**<br>Address: 66-472 Kamehameha Hwy Haleiwa, HI 96712<br>著名的蒜蓉虾，饭点会排队。那里还有几家别的food truck，有一家卖水果的可以吃各种夏威夷当地水果。</p><p>🍍Ray’s Kaiwe Broiled Chicken<br>白老师推荐的烤鸡，用夏威夷本地的木炭烤的，很香很多汁，就是有点咸。我们去的时候看到很多本地人在买。每天出摊的地址不太一样，以下是老板给我的信息，可能会变，最好打电话过去问问。<br>Tuesday &amp; Fridays ：1011 California ave，Wahiawa 930-4<br>Wednesday &amp; Thursdays ：94-333 waipahu depot st,  waipahu  930-4<br>Phone#(808) 738-7067<br>66-190 Kamehameha hwy，Haleiwa  930-4<br>Phone#(808) 351-6258</p><p>🍍Katsu Midori Sushi<br>在Prince Waikiki酒店一楼，是ipad点餐的那种，上菜很快。</p><p>🍍Matsumoto Shaved Ice**<br>也在North Shore那边，去的话可以试试。旁边有一些小店可以逛。</p><p>🍍Miro Kaimuki<br>创意料理。预约：<a href="https://www.mirokaimuki.com/" target="_blank" rel="noopener">https://www.mirokaimuki.com/</a><br>我们这次去最喜欢的一家餐厅！每个月会根据时令食材换菜单，我们点的定食菜单$75,配红酒$35, 吃得喝得都很开心。brioche那道必须点，sourdough也挺好</p><p>🍍Leonard’s Bakery**<br>他有自己的店，我们去的这个是个餐车。葡萄牙式甜甜圈，爆炸卡路里！</p><p>🍍Tonkatsu Ginza Bairin*****<br>日式炸猪排，白菜沙拉超好吃，我点的那个盖饭也好吃，他们的米是特供的，很香很好吃！<br>这家真的不错，可以试一试。</p><p>🍍Kona Coffee Purveyors***<br>超级推荐！我最喜欢的是pineapple coconut croissant，像是菠萝包和牛角包的结合～配一杯咖啡太美妙了（我本来不是很喜欢喝酸味的咖啡，但是这次去夏威夷好像有点能get到了）安曼就是非常酥脆的一款面包，黄油味非常香！早上7点开门就排队了～好想把每一款面包、每一种咖啡都尝试一遍！<br>有点偏甜，不过可以试一试。</p><p>🍍Toodland &amp; Tamura‘s Poke<br>夏威夷超市里面的poke，毕竟是poke的发源地，很值得尝试～</p><p>🍍Jejubing**<br>在Ala Moana购物中心里面的韩式雪花冰, 位置不好找。</p><p>🍍Aburiya Ibushi<br>吃腻了日料可以试试炭火烤肉，都挺好吃的，肉很扎实，不要点多了，牛尾汤也是很绝～</p><p>🍍SurfJack Shop Coffee**<br>这家酒店好像是pet friendly，看到好多狗狗哈哈</p><p>🍍Sophie‘s Gourmet Hawaiin Pizza<br>感觉是融合亚洲口味的披萨，偏重口。</p><p>🍍Island Vintage Shave Ice**<br>这次吃到最好吃的冰沙！我点的Heavenly Lilikoi 百香果和草莓味，还有那个爆珠小波霸好好吃！就在Royal Hawaiin Center那条路上。</p><p>🍍Scratch Kitchen and Meatery ****<br>美食早午餐，loco moco好吃。</p><p>###【景点】</p><p>🌴The Byodo-In Temple(平等院)<br>寺庙其实很小，半个小时差不多，进去一路是墓地，（张学良和赵四小姐也长眠于此）但是风景真的很美。<br><a href="https://byodo-in.com/" target="_blank" rel="noopener">https://byodo-in.com/</a><br>47-200 Kahekili Hwy, Kaneohe, HI 96744</p><p>🌴Lanikai Beach  **<br>适合浮潜，我们看到了好几只海龟，就在眼前，也适合在沙滩上晒太阳待上几个小时，最好带点吃的和水。<br>提前到，不好找车位！</p><p>🌴沙滩秋千 Beach Swing Kahana Bay Beach Park<br>去的人不多，出片。</p><p>🌴Waimea Garden **<br>59-864 Kamehameha Hwy, Haleiwa, HI 96712<br>超美的野生深林花园，尽头有可以游泳的瀑布，可以直接在门口购票</p><p>🌴 Shark’s Cove *****<br>家庭可以去，还有不错的浮潜，可以看到很多鱼，提前到找车位。</p><p>🌴Three Tables **<br>很喜欢的潜水沙滩，shark’s cove附近，离waikiki40分钟左右。<br>旁边就有一个foodland，可以买了poke坐在沙滩上晒太阳。</p><p>🌴Ho’omaluhia Botanical Garden *<br>45-680 Luluku Rd, Kaneohe, HI 96744<br>很多人拍照的那条路其实就是一进门很短点的一截，而且不能停车。<br>开进去了可以找地方停车，在里面步行, 花园中间有个大的湖，背靠着山，风景绝美。准备充足的话适合在公园草地上野餐。</p><p>🌴Hanauma Bay  <strong>**</strong><br>恐龙湾算是这次在欧胡岛潜水看到比较多生物的，浅滩还是比较浑，要稍微往里面游一点会好一些。<br>(要提前48小时官网抢票，提前做好准备，包括一些邮箱电话啥的基本信息，几分钟一千张票就抢没了，可以在继续刷新，有时候会有别人不要的空位置出来，真是拼手速。也可以当天早上6点半去排队抢票）</p><p>🌴Maunawili Falls **<br>一共来回2小时左右，尽头有瀑布可以游泳，这次去最喜欢的trail！一路上都是树荫，我们去得早人也很少。<br>平时应该比较泥泞，如果近期有下雨应该会很难走，我们去的时候运气比较好路还是有干的地方，不要学我穿拖鞋去😂 要穿专业的登山鞋，最后一段水路换可以踩水的鞋子。</p><p>🌴Halona Blowhole Lookout<br>巨大的海边喷水洞，路过可以停车下去看看，风很大，注意安全。<br>可以走到blowhole旁边，风更大，更要注意安全！</p><p>🌴Diamond Head *<br>标志性爬山地点，停车要靠运气10美金停车费，门票一人10美金。<br>非常著名的景点，所以人会很多，建议早点去，很多人停在外面，步行进去的，登顶了可以鸟瞰整个waikiki。<br>很多楼梯不适合老人和很小的小孩。</p><p>🌴Makapu‘u Tidepool*<br>停车场跟着路一直步行，一直走看到鲸鱼牌子的地方岔路下去就到了，风险系数较高，注意安全，恐高和体力不好的人都不建议去，（可以选择一路走去lighhouse就行了）不适合小孩老人，到了tidepool也要注意，浪太大了不要靠近，会被卷走，或者拍打到石头上都很危险，但是水池里确实很美。<br>一路上都没什么遮挡，所以要注意防晒！！！</p><p>🌴Kāhala Beach***<br>Jennie拍照的是在Kahala Hotel的沙滩边，可以导航Kahala beach park停车走过去，那一片的海边都挺美的，就在beach park也挺好拍的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Travel, Hawaii </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给X3刷code增加蓝牙播放功能</title>
      <link href="/2021/05/23/Bluetooth/"/>
      <url>/2021/05/23/Bluetooth/</url>
      
        <content type="html"><![CDATA[<h1 id="利用Bimmercode给X3-F25刷机"><a href="#利用Bimmercode给X3-F25刷机" class="headerlink" title="利用Bimmercode给X3 F25刷机"></a>利用Bimmercode给X3 F25刷机</h1><p>苦于我的X3能蓝牙连接手机打电话，但是不能播放音乐，于是买了Bimmercode和OBD无线<br>连接器，自己刷机，过程还是很简单，而且还能省钱，具体需要改的参数如下。</p><p>只做参考，有任何问题概不负责。</p><p>In HEADUNIT Menu…go into Expert mode then 3003_Telefon_Telematik_Online</p><p>Turn these to “Aktiv” :<br>CDMM_Bluetooth_Audio<br>CDMM_BT_DATABASE<br>AUDIO_PLAYER_ON_OFF<br>BT_MODUL_ON_OFF<br>A2DP_PROFILE</p><p>In COMIBOX Menu….go into Expert mode then 3004_Bluetooth_Parameter and turn this to “Aktiv” :<br>A2DP_AVRCP_EIN_AUS</p>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event-Recommendation-Web-Service</title>
      <link href="/2020/09/04/Event-Recommendation-Web-Service/"/>
      <url>/2020/09/04/Event-Recommendation-Web-Service/</url>
      
        <content type="html"><![CDATA[<h1 id="Event-Recommendation-Systems"><a href="#Event-Recommendation-Systems" class="headerlink" title="Event Recommendation Systems"></a>Event Recommendation Systems</h1><h2 id="Business-Design"><a href="#Business-Design" class="headerlink" title="Business Design"></a>Business Design</h2><ul><li>To design a personalization based event recommendation systems for event search.</li></ul><h2 id="General-Instruction"><a href="#General-Instruction" class="headerlink" title="General Instruction"></a>General Instruction</h2><ul><li>Design a web service with <code>RESTful APIs</code> in Java to handle HTTP requests and responses</li><li>Frontend: an interactive web page with <code>AJAX</code> technology implemented with <code>HTML</code>, <code>CSS</code> and <code>JavaScript</code>. The Event Recommendation Website realizes three main functions:<ul><li><strong>Search</strong> events around users</li><li><strong>Favorite</strong> events they like and also delete events they don’t like anymore</li><li>Get <strong>recommendation of events</strong> around based on their favorite history and distance to where events will be hold</li></ul></li><li>Backend: use <code>Java</code> to process logic request, and some supports are as below:<ul><li>Built with both relational database and NoSQL database (<code>MySQL</code> and <code>MongoDB</code>) to support data storage from users and items searched in TicketMaster API</li><li>Design <strong>content-based recommendation algorithm</strong> for event recommendation</li></ul></li><li>Deploy website server on <code>Amazon EC2</code>: <a href="http://52.24.237.51/EventRecommend/" target="_blank" rel="noopener">Event Recommendation System</a></li><li>Analyze website traffic both online and offline with ELK (<code>ElasticSearch</code>, <code>Logstash</code> and <code>Kibana</code>) and <code>MapReduce</code> in MongoDB</li></ul><a id="more"></a><h2 id="Infrastructure-Design"><a href="#Infrastructure-Design" class="headerlink" title="Infrastructure Design"></a>Infrastructure Design</h2><ul><li>3-tier architecture<ul><li>Presentation tier: HTML, CSS, JavaScript</li><li>Data tier: MySQL, MongoDB</li><li>Logic tier: Java</li></ul></li><li>Local and remote development environment</li></ul><p><img data-src="https://raw.githubusercontent.com/Wangxh329/EventRecommendation/master/img_font_icon_sources/doc/local.png" alt="local environment"></p><blockquote><p>Local development environment</p></blockquote><p><img data-src="https://raw.githubusercontent.com/Wangxh329/EventRecommendation/master/img_font_icon_sources/doc/remote.png" alt="remote environment"></p><blockquote><p>Remote development environment</p></blockquote><h2 id="API-Design"><a href="#API-Design" class="headerlink" title="API Design"></a>API Design</h2><ul><li>Logic tier(Java Servlet to RPC)<ul><li>Search<ul><li>searchItems</li><li>Ticketmaster API</li><li>parse and clean data, saveItems</li><li>return response</li></ul></li><li>History<ul><li>get, set, delete favorite items</li><li>query database</li><li>return response</li></ul></li><li>Recommendation<ul><li>recommendItems</li><li>get favorite history</li><li>search similar events, sorting</li><li>return response</li></ul></li><li>Login<ul><li>GET: check if the session is logged in</li><li>POST: verify the user name and password, set session time and marked as logged in</li><li>query database to verify</li><li>return response</li></ul></li><li>Logout<ul><li>GET: invalid the session if exists and redirect to <code>index.html</code></li><li>POST: the same as GET</li><li>return response</li></ul></li><li>Register<ul><li>Set a new user into users table/collection in database</li><li>return response</li></ul></li></ul></li></ul><p><img data-src="https://raw.githubusercontent.com/Wangxh329/EventRecommendation/master/img_font_icon_sources/doc/APIs.png" alt="APIs design"></p><blockquote><p>APIs design in logic tier</p></blockquote><ul><li>TicketMasterAPI<br><a href="https://developer.ticketmaster.com/products-and-docs/apis/discovery-api/v2/" target="_blank" rel="noopener">Official Doc - Discovery API</a></li><li>Recommendation Algorithms design<ul><li><strong>Content-based Recommendation</strong>: find categories from item profile from a user’s favorite, and recommend the similar items with same categories.</li><li>Present recommended items with ranking based on distance (geolocation of users)</li></ul></li></ul><p><img data-src="https://raw.githubusercontent.com/Wangxh329/EventRecommendation/master/img_font_icon_sources/doc/recommendation.png" alt="recommendation algorithm"></p><blockquote><p>Process of recommend request</p></blockquote><h2 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a>Database Design</h2><ul><li>MySQL<ul><li><strong>users</strong> - store user information.</li><li><strong>items</strong> - store item information.</li><li><strong>category</strong> - store item-category relationship</li><li><strong>history</strong> - store user favorite history</li></ul></li></ul><p><img data-src="https://raw.githubusercontent.com/Wangxh329/EventRecommendation/master/img_font_icon_sources/doc/mysql.png" alt="mysql"></p><blockquote><p>MySQL database design</p></blockquote><ul><li>MongoDB<ul><li><strong>users</strong> - store user information and favorite history. = (users + history)</li><li><strong>items</strong> - store item information and item-category relationship. = (items + category)</li><li><strong>logs</strong> – store log information</li></ul></li></ul><h2 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h2><ul><li>Design pattern<ul><li><strong>Builder pattern</strong>: <code>Item.java</code><ul><li>When convert events from TicketMasterAPI to java Items, use builder pattern to freely add fields.</li></ul></li><li><strong>Factory pattern</strong>: <code>ExternalAPIFactory.java</code>, <code>DBConnectionFactory.java</code><ul><li><code>ExternalAPIFactory.java</code>: support multiple function like recommendation of event, restaurant, news, jobs… just link to different public API like TicketMasterAPI. Improve extension ability.</li><li><code>DBConnectionFactory.java</code>: support multiple database like MySQL and MongoDB. Improve extension ability.</li></ul></li><li><strong>Singleton pattern</strong>: <code>MySQLConnection.java</code>, <code>MongoDBConnection.java</code><ul><li>Only create specific number of instance of database, and the class can control the instance itself, and give the global access to outerclass</li></ul></li></ul></li></ul><h2 id="User-Behavior-Analysis"><a href="#User-Behavior-Analysis" class="headerlink" title="User Behavior Analysis"></a>User Behavior Analysis</h2><ul><li>Online (<strong>ElasticSearch</strong>, <strong>Logstash</strong>, <strong>Kibana</strong>)<ul><li>Use Logstash to fetch log (in NoSQL-like form), then store data in ElasticSearch, finally use Kibana to analyze the data in ElasticSearch, getting some tables and graphs like APIs use, request status, geolocation of visitors, etc</li></ul></li></ul><p><img data-src="https://raw.githubusercontent.com/Wangxh329/EventRecommendation/master/img_font_icon_sources/doc/elk.png" alt="ELK analysis"></p><blockquote><p>Remote development environment</p></blockquote><ul><li>Offline (<strong>MapReduce in MongoDB</strong>)<ul><li>Copy-paste some logs from Tomcat server</li><li>Purify log data and store in MongoDB</li><li>Do <code>mapreduce()</code> in MongoDB</li><li>Get a list of timebucket-count in descending order of count, then find the peak time of website traffic</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event-Reporter</title>
      <link href="/2020/09/04/Event-Reporter/"/>
      <url>/2020/09/04/Event-Reporter/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Event-Reporter"><a href="#Android-Event-Reporter" class="headerlink" title="Android Event Reporter"></a>Android Event Reporter</h1><h2 id="Business-Design"><a href="#Business-Design" class="headerlink" title="Business Design"></a>Business Design</h2><ul><li>To design a LBS based Android app for users to report events and search nearby events.</li></ul><h2 id="General-Function-Instruction"><a href="#General-Function-Instruction" class="headerlink" title="General Function Instruction"></a>General Function Instruction</h2><ul><li>Login and register: each user can register an account with a unique username and login in to enjoy the app.</li><li>Designed a view to list all events in database according to report time.</li><li>Integrated <strong>Google Map API</strong> to track current user’s location and display nearby hot events as well as navigating to the event.</li><li>Developed a view to show details of the clicked event and make comment or like to it.</li><li>Provided a view to report new event with title, description, image and location.</li><li>Other supported features:<ul><li>Used <strong>Google Firebase (Database and Storage)</strong> to store and manage UGC including comments, images, descriptions, title, geolocations, etc.</li><li>Integrated in-app advertising (<strong>Google AdMob</strong>) to display Google advertisers and interact with users.</li></ul></li></ul><a id="more"></a><h2 id="Infrastructure-Design"><a href="#Infrastructure-Design" class="headerlink" title="Infrastructure Design"></a>Infrastructure Design</h2><p><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/Infrastructure.png" alt="infrastructure design"></p><blockquote><p>Activity and Fragment design</p></blockquote><ul><li><code>MainActivity</code>: for login and register.</li><li><code>EventActivity</code>: show events in two ways, one for all events list, the other for nearby hot events in Google Map.</li><li><code>EventsFragment</code>: show all events in list view.</li><li><code>EventListAdapter</code>: get data of events and ads, and distribute them to corresponding positions in RecyclerView.</li><li><code>EventMapFragment</code>: show nearby hot events in Google Map with markers and navigate to the event.</li><li><code>CommentActivity</code>: show detail information of each specific event clicked by users, including title, username, time, description, comments, etc. and also make new comment on it.</li><li><code>CommentAdapter</code>: get data of event and comments, and distribute them to corresponding positions in RecyclerView.</li><li><code>EventReportActivity</code>: report new event with title, description, location, image, etc.</li><li><code>User</code>: create instance when registering with attributes of each user.</li><li><code>Event</code>: create instance when reporting a new event with attributes like title, like, comment, etc.</li><li><code>Comment</code>: create instance when making comments to a specific event with attributes like description, username, eventId, like, etc.</li><li><code>Utils</code>: some helper method like encryption of password, calculation of distance between two locations, time transformation, etc.</li><li><code>LocationTracker</code>: get permission from users to use Android system GPS or network to get current location.</li></ul><h2 id="Database-Design"><a href="#Database-Design" class="headerlink" title="Database Design"></a>Database Design</h2><p>Use Google Firebase Database to store and manage UGC:</p><h3 id="users"><a href="#users" class="headerlink" title="users"></a>users</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/users.png" width="577px" height="277px" alt="users collection design"><blockquote><p>users collection design</p></blockquote><h3 id="events"><a href="#events" class="headerlink" title="events"></a>events</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/events.png" width="577px" height="669px" alt="events collection design"><blockquote><p>events collection design</p></blockquote><h3 id="comments"><a href="#comments" class="headerlink" title="comments"></a>comments</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/comments.png" width="577px" height="750px" alt="comments collection design"><blockquote><p>comments collection design</p></blockquote><h2 id="Implementation-Details"><a href="#Implementation-Details" class="headerlink" title="Implementation Details"></a>Implementation Details</h2><ul><li>About <strong>ANR (application not responding)</strong>: Image and string information of events should be stored <strong>separately in cloud storage(Firebase Storage) and database(only store image link/url)</strong> respectively. When loading events in events list, first loading string information in database like title, username, descriptions…then use <code>AsyncTask</code> to download image from cloud storage located by image url in database (in <strong>backend thread</strong>), after finishing downloading, showing the image in <strong>UI thread</strong>.</li><li>How to design <strong>event activity</strong>?<ul><li>Show all events in list view –&gt; <code>Fragment</code></li><li>Show nearby events in map with markers –&gt; <code>Fragment</code></li><li>Comment on specific event –&gt; <code>Activity</code></li><li><strong>First and second features</strong> are two parallel functions of events showing, also they should be presented <strong>independently and also fast loading</strong>, so it’s appropriate to <strong>use two independent fragments</strong> attached on EventActivity.</li><li>Since <strong>comments are related to specific event</strong>, and they are not independent, so we should use another <strong>activity to show detail information of a specific event</strong> with title, username, description, time, comments, and in the same time, making comment to it.</li></ul></li><li>Design EventsFragment and CommentActivity with <strong>RecyclerView</strong><ul><li><code>EventsFragment</code>: to let users scroll up and down all events and ads together, we need to use RecyclerView instead of a layout (static without function scrollbar)</li><li><code>CommentActivity</code>: to let users scroll up and down event and all comments together, we need to use RecyclerView instead of a layout (static without function scrollbar, and the size is fixed which may cause users can only see a few comments one time)</li></ul></li><li>Design pattern<ul><li><strong>Singleton</strong>: Firebase database uses singleton pattern so that the whole app share one database instance and the same data</li></ul></li></ul><h2 id="Application-Screenshot"><a href="#Application-Screenshot" class="headerlink" title="Application Screenshot"></a>Application Screenshot</h2><h3 id="Login-and-register"><a href="#Login-and-register" class="headerlink" title="Login and register"></a>Login and register</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/login.png" width="480px" height="853px" alt="login and register activity"><blockquote><p>login and register activity</p></blockquote><h3 id="Show-all-events"><a href="#Show-all-events" class="headerlink" title="Show all events"></a>Show all events</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/eventlist.png" width="480px" height="853px" alt="events fragment"><blockquote><p>events fragment</p></blockquote><h3 id="Event-details-and-make-comments"><a href="#Event-details-and-make-comments" class="headerlink" title="Event details and make comments"></a>Event details and make comments</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/comment.png" width="480px" height="853px" alt="comment activity"><blockquote><p>comment activity</p></blockquote><h3 id="Report-new-event"><a href="#Report-new-event" class="headerlink" title="Report new event"></a>Report new event</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/report.png" width="480px" height="853px" alt="event report activity"><blockquote><p>event report activity</p></blockquote><h3 id="Show-nearby-events-in-Google-Map"><a href="#Show-nearby-events-in-Google-Map" class="headerlink" title="Show nearby events in Google Map"></a>Show nearby events in Google Map</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/map.png" width="480px" height="853px" alt="event map fragment"><blockquote><p>event map fragment</p></blockquote><h3 id="Show-Notification-Locally"><a href="#Show-Notification-Locally" class="headerlink" title="Show Notification Locally"></a>Show Notification Locally</h3><img data-src="https://raw.githubusercontent.com/DarkAlexWang/EventReporter/master/doc/notification.png" width="480px" height="853px" alt="FCM Messaging fragment"><blockquote><p>event map fragment</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Projects </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湾区 接待攻略</title>
      <link href="/2019/07/15/bayarea-sightseeing/"/>
      <url>/2019/07/15/bayarea-sightseeing/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>在湾区生活了也有一年有余，时不长也会接待来自东海岸，中部的同学朋友；也有来自大洋彼岸的拜访。最常见的问题便是，你们这儿有什么好玩的呀，这是我第一次来，有什么推荐么？ 经过几次的锤炼，我也算是能提供些值得参考的景点，餐厅。<br>以下便是Joshua个人推荐行程</p><h1 id="一天"><a href="#一天" class="headerlink" title="一天"></a>一天</h1><p>如果只有一天的话，那么就没什么好说的了，在三番城区就足矣。<br>九曲花街，渔人码头，金门大桥；有余力的话，可以乘坐Bart参观UC Berkeley，打车去金门公园。</p><h1 id="两天至三天"><a href="#两天至三天" class="headerlink" title="两天至三天"></a>两天至三天</h1><p>在一天的基础上，会有更多的游玩选择。也比较容易和南湾的朋友们约饭。</p><h2 id="品酒"><a href="#品酒" class="headerlink" title="品酒"></a>品酒</h2><p>这个值得单独开一栏，因为Napa/ Sonoma就在三番市区的北面一个多小时的车程，但品完红酒之后需要在那里安排一晚住宿，不要逞强想着喝那么一点没事还能开回三番。至于酒庄的选择每个人爱好不一样，可以上网搜搜，基本上各种类型的都有。</p><p>另外Napa云集了不少米其林餐厅，非常适合在各种纪念日前往（前提是需要续约）</p><h2 id="中半岛"><a href="#中半岛" class="headerlink" title="中半岛"></a>中半岛</h2><p>推荐半天时间在Half Moon Bay放空，个人推荐去The Ritz-Carlton, Half Moon Bay 它的停车场是免费对外开放的。</p><h2 id="学府"><a href="#学府" class="headerlink" title="学府"></a>学府</h2><p>Standard是必去景点哦，从Stanford Oval开始，Memorial Court，Memorial Church， Hoover Tower以及沿途的西班牙式建筑，Tips：如果找不好角度拍照打卡的话，推荐去搜小红书。</p><p>当然隔壁的Shopping Center也是必去的地方，牌子不是特别丰富，但基本款还是都有的，私人推荐K. Minamoto这家日式甜品/伴手礼店，做工比较精致。如果那天还有时间的话，可以去对面的Palo Alto主街游览下， 品尝着Salt &amp; Straw 250 University Ave STE 110, Palo Alto, CA 94301 然后去 Facebook 第一间办公室，请定位到471 Emerson St, Palo Alto, CA 94301， Google第一间办公室请定位到165 University Ave, Palo Alto, CA 94301</p><h2 id="南湾"><a href="#南湾" class="headerlink" title="南湾"></a>南湾</h2><p>既然上文提到了这两家公司，那么问题来了，能不能参观呢？Facebook的话，是个封闭园区需要有人带才能进入，Google的话，是个开放园区，但园区里面其实也没有什么值得特别留念的地方，唯一特殊的便是Google Android Lawn Statues 我们称之为安卓墓园的地方吧，不大的土地上安放着历代安卓雕塑。（～也可以顺便找我～）</p><h2 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h2><p>吃喝玩乐请参考我之前的文章：</p><p><a href="http://joshuablog.herokuapp.com/bayarea-entertainment-guide.html" target="_blank" rel="noopener">湾区吃喝玩乐推荐</a></p><h1 id="一周"><a href="#一周" class="headerlink" title="一周"></a>一周</h1><p>恭喜你获得了充分的时间进行旅行，在以上的基础上，推荐去Monterey，camel-by-the-sea看海，沙滩，17 miles。</p><p>或者湾区的行程压缩，把时间放在一号公路的驰骋上！</p><p>至于LA的话，环球影城，迪斯尼公园，圣塔莫妮卡，Hollywood，Getty Center，The Huntington Library, Art Collections, and Botanical Gardens这些我觉得是需要打卡的地方。</p><h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1><p>各位看官可以根据你们朋友的时间长短，自由选择以上景点进行推荐。饭店的选择上，要是从国内来的话，咱们就不要推荐奶茶店，中餐馆了吧，可以找些本地特色菜（in-n-out？）或者日料，韩餐（烤肉或者豆腐汤锅）；要是中部大荒村，东海岸（除纽约），咱们还是带着去品尝Boiling Beijing， 岭南小馆，海底捞，鼎泰丰吧，毕竟还是需要给他们改善一下中餐伙食吧。</p><p>Google Map</p><iframe src="https://www.google.com/maps/d/embed?mid=1oCDyJnEpfcRzlBNnYz4sLGQCZvBGjk_t&hl=en" width="640" height="480"></iframe>]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BayArea </tag>
            
            <tag> Tourism </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Travel list for America</title>
      <link href="/2018/06/10/Travel-list-for-America/"/>
      <url>/2018/06/10/Travel-list-for-America/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p><a href="https://drive.google.com/open?id=152Knr4gBuV92V9w2kVPHHHNPQZxv9jIW&usp=sharing" target="_blank" rel="noopener">Google 分享地图</a></p><h1 id="美国本土"><a href="#美国本土" class="headerlink" title="美国本土"></a>美国本土</h1><h2 id="东海岸"><a href="#东海岸" class="headerlink" title="东海岸"></a>东海岸</h2><h3 id="Haskell-Free-Library-and-Opera-House"><a href="#Haskell-Free-Library-and-Opera-House" class="headerlink" title="Haskell Free Library and Opera House"></a>Haskell Free Library and Opera House</h3><p>穿越国境的图书馆</p><h3 id="White-Mountain-National-Forest"><a href="#White-Mountain-National-Forest" class="headerlink" title="White Mountain National Forest"></a>White Mountain National Forest</h3><p>新罕布什尔的红叶秋景</p><h3 id="Ocean-Drive-Historic-District"><a href="#Ocean-Drive-Historic-District" class="headerlink" title="Ocean Drive Historic District"></a>Ocean Drive Historic District</h3><p>罗德岛州的豪宅之旅</p><h3 id="Key-West"><a href="#Key-West" class="headerlink" title="Key West"></a>Key West</h3><p>东海岸人民的海岸风情，还可以看鳄鱼，海明威的遗迹</p><h3 id="New-Orleans"><a href="#New-Orleans" class="headerlink" title="New Orleans"></a>New Orleans</h3><p>能感受法式风情的城市，建筑和美食</p><a id="more"></a><h2 id="中部"><a href="#中部" class="headerlink" title="中部"></a>中部</h2><h3 id="Yellowstone-National-Park"><a href="#Yellowstone-National-Park" class="headerlink" title="Yellowstone National Park"></a>Yellowstone National Park</h3><p>大名鼎鼎的黄石公园，值得花一周时间去</p><h3 id="Grand-Teton-National-Park"><a href="#Grand-Teton-National-Park" class="headerlink" title="Grand Teton National Park"></a>Grand Teton National Park</h3><p>大提顿国家公园，适合和黄石一起去</p><h3 id="Rocky-Mountain-National-Park"><a href="#Rocky-Mountain-National-Park" class="headerlink" title="Rocky Mountain National Park"></a>Rocky Mountain National Park</h3><p>落基山森林公园，绝美的road trip</p><ol><li>Trail Ridge Road</li><li>Peak to Peak Highway</li><li>Maroon Bells（适合照相）</li><li>Black Canyon of the Gunnison National Park</li><li>Independence Pass</li></ol><h3 id="San-Juan-National-Forest"><a href="#San-Juan-National-Forest" class="headerlink" title="San Juan National Forest"></a>San Juan National Forest</h3><p>圣胡安森林公园，滑雪胜地</p><ol><li>Red Mountain Pass</li><li>Telluride</li><li>Mountain Village</li></ol><h3 id="Zion-National-Park"><a href="#Zion-National-Park" class="headerlink" title="Zion National Park"></a>Zion National Park</h3><p>锡安国家公园</p><h3 id="Glacier-National-Park"><a href="#Glacier-National-Park" class="headerlink" title="Glacier National Park"></a>Glacier National Park</h3><p>适合看冰川</p><h2 id="西海岸"><a href="#西海岸" class="headerlink" title="西海岸"></a>西海岸</h2><h3 id="Olympic-National-Park"><a href="#Olympic-National-Park" class="headerlink" title="Olympic National Park"></a>Olympic National Park</h3><p>西雅图周边的雪山和森林</p><h3 id="Mount-Rainier-National-Park"><a href="#Mount-Rainier-National-Park" class="headerlink" title="Mount Rainier National Park"></a>Mount Rainier National Park</h3><p>另外一个值得去的地方</p><h2 id="加州"><a href="#加州" class="headerlink" title="加州"></a>加州</h2><h3 id="Mt-Shasta"><a href="#Mt-Shasta" class="headerlink" title="Mt. Shasta"></a>Mt. Shasta</h3><p>美版富士山</p><h3 id="Lassen-Volcanic-National-Park"><a href="#Lassen-Volcanic-National-Park" class="headerlink" title="Lassen Volcanic National Park"></a>Lassen Volcanic National Park</h3><p>拉森火山公园</p><h3 id="Lake-Tahoe"><a href="#Lake-Tahoe" class="headerlink" title="Lake Tahoe"></a>Lake Tahoe</h3><p>滑雪胜地，夏天划船</p><h3 id="Yosemite-National-Park"><a href="#Yosemite-National-Park" class="headerlink" title="Yosemite National Park"></a>Yosemite National Park</h3><p>百去不厌，hiking和瀑布</p><h3 id="Mammoth-Lake"><a href="#Mammoth-Lake" class="headerlink" title="Mammoth Lake"></a>Mammoth Lake</h3><p>CA395的必去景点</p><h3 id="Sierra-National-Forest"><a href="#Sierra-National-Forest" class="headerlink" title="Sierra National Forest"></a>Sierra National Forest</h3><p>适合backpacking</p><h3 id="Kings-Canyon-National-Park-amp-Sequoia-National-Park"><a href="#Kings-Canyon-National-Park-amp-Sequoia-National-Park" class="headerlink" title="Kings Canyon National Park &amp; Sequoia National Park"></a>Kings Canyon National Park &amp; Sequoia National Park</h3><p>看森林</p><h3 id="Channel-Islands-National-Park"><a href="#Channel-Islands-National-Park" class="headerlink" title="Channel Islands National Park"></a>Channel Islands National Park</h3><p>洛杉矶周边的小岛</p><h3 id="Pfeiffer-Big-Sur-State-Park"><a href="#Pfeiffer-Big-Sur-State-Park" class="headerlink" title="Pfeiffer Big Sur State Park"></a>Pfeiffer Big Sur State Park</h3><p>一号公路的极致体验</p><h3 id="Big-Basin-Redwoods-State-Park"><a href="#Big-Basin-Redwoods-State-Park" class="headerlink" title="Big Basin Redwoods State Park"></a>Big Basin Redwoods State Park</h3><p>湾区人民的好去处</p><h3 id="Point-Reyes-National-Seashore"><a href="#Point-Reyes-National-Seashore" class="headerlink" title="Point Reyes National Seashore"></a>Point Reyes National Seashore</h3><p>遗世而独立</p><h1 id="非本土"><a href="#非本土" class="headerlink" title="非本土"></a>非本土</h1><h2 id="Puerto-Rico"><a href="#Puerto-Rico" class="headerlink" title="Puerto Rico"></a>Puerto Rico</h2><p>西班牙风格的建筑</p><h2 id="Alaska"><a href="#Alaska" class="headerlink" title="Alaska"></a>Alaska</h2><h3 id="Dalton-Highway"><a href="#Dalton-Highway" class="headerlink" title="Dalton Highway"></a>Dalton Highway</h3><p>通向北冰洋的路</p><h3 id="Denali-National-Park-and-Preserve"><a href="#Denali-National-Park-and-Preserve" class="headerlink" title="Denali National Park and Preserve"></a>Denali National Park and Preserve</h3><p>阿拉斯加最美的公园</p><h2 id="Hawaii"><a href="#Hawaii" class="headerlink" title="Hawaii"></a>Hawaii</h2><h3 id="Road-To-Hana-Mile-Marker-Zero-Route-360"><a href="#Road-To-Hana-Mile-Marker-Zero-Route-360" class="headerlink" title="Road To Hana Mile Marker Zero (Route 360)"></a>Road To Hana Mile Marker Zero (Route 360)</h3><p>环岛之旅</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://mp.weixin.qq.com/s/ueLTBrf8hrYTwDsxDFbXgA" target="_blank" rel="noopener">玩遍美国56个国家公园，我们帮你挑选了最美Top 10</a></p>]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>招工季之公司评价-加密</title>
      <link href="/2018/05/25/%E6%8B%9B%E5%B7%A5%E5%AD%A3%E4%B9%8B%E5%85%AC%E5%8F%B8%E8%AF%84%E4%BB%B7-%E5%8A%A0%E5%AF%86/"/>
      <url>/2018/05/25/%E6%8B%9B%E5%B7%A5%E5%AD%A3%E4%B9%8B%E5%85%AC%E5%8F%B8%E8%AF%84%E4%BB%B7-%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="找工季-实习"><a href="#找工季-实习" class="headerlink" title="找工季-实习"></a>找工季-实习</h1><p>来美国之前看过一亩三分地，觉得码农的形势很不错，所以第一个学期就沉浸在划水中，心里想着反正第二学期找实习不在话下，结果打击就立马到来，好多公司我的简历关就过不去</p><h2 id="Data-Science-Internship"><a href="#Data-Science-Internship" class="headerlink" title="Data Science Internship"></a>Data Science Internship</h2><p>由于专业是Data Informatics 加上当时有点抵触刷题，我就大多投了DS的internship的岗位，可想而知，本来坑就不是很多，而且bar很高，也偏向PhD的学生，所以拿到的面试并不是很多，显而易见的挂掉了所有的。</p><ul><li>Paypal<ul><li>两轮ML model 和基础知识</li></ul></li><li>Salesforce<ul><li>两轮ML model 基础知识</li></ul></li><li>Evernote<ul><li>一轮SQL 一轮算法</li></ul></li></ul><h1 id="找工季-全职"><a href="#找工季-全职" class="headerlink" title="找工季-全职"></a>找工季-全职</h1><h2 id="秋招-春招"><a href="#秋招-春招" class="headerlink" title="秋招-春招"></a>秋招-春招</h2><p>经过暑假不算勤奋的刷题后，开始了正式找全职的奋斗，当时没有什么经验，加上没有暑期实习经验；即使参加了招聘会也没有什么收获，即使在地里疯狂的找内推基本上也没有什么回应。 于是只能靠网申和运气作伴，加上peer pressure很大，他们拿到了return offer的就开始了晒旅行。</p><h3 id="Phone"><a href="#Phone" class="headerlink" title="Phone"></a>Phone</h3><ul><li>Mathworks<ul><li>全程基础知识，个人不喜欢</li></ul></li><li>Akuna Captial<ul><li>算法和Python基础知识</li></ul></li><li>VMWare<ul><li>题目没做出来</li></ul></li><li>Yahoo<ul><li>不知怎么面了一个ML的职位</li></ul></li><li>Yelp<ul><li>面的是Backend岗位，不是常规的算法题，有点不适应</li></ul></li><li>Wish<ul><li>题目没见过，就立马慌了</li></ul></li></ul><h3 id="Onsite"><a href="#Onsite" class="headerlink" title="Onsite"></a>Onsite</h3><ul><li>Amazon<ul><li>当时没有充分理解Python 的OOP，导致结果输出不出来</li></ul></li><li>Google<ul><li>有两道很easy的题，由于自己基础知识没有巩固扎实，fail</li></ul></li></ul><h2 id="来年再战"><a href="#来年再战" class="headerlink" title="来年再战"></a>来年再战</h2><h3 id="秋季"><a href="#秋季" class="headerlink" title="秋季"></a>秋季</h3><p>由于身份问题，挂靠，搬到湾区后，从8月份正式开始刷题，在Santa Clara找到了小伙伴；相比之前，速度上确实快了很多，也有种顿然的感觉<br>。有可能因为挂靠的经历，所以有了一下面试</p><ul><li>Indeed<ul><li>电面的题没见过，有点紧张，时隔四个月第一次面试，确实需要感觉</li></ul></li><li>Facebook<ul><li>最用心的面试，结果onsite的时候behaviour问题没有答好，加上有一轮改bug花了很长时间</li></ul></li><li>WalmartLab<ul><li>最走心的面试，总以为是被黑，但是却给了Offer，但是又被公司拖着最后被撕了Offer 一生黑</li></ul></li><li>OfferUp<ul><li>freeze</li></ul></li><li>Wepay<ul><li>freeze</li></ul></li></ul><h3 id="春季"><a href="#春季" class="headerlink" title="春季"></a>春季</h3><p>从2月份开始新的一轮，由于挂靠经历可以算是将近一年的工作经验，这时候面试反而多了起来。</p><ul><li>VMWare<ul><li>面的是测试岗位</li></ul></li><li>Groupon<ul><li>网申，几乎没有看面经，设计题比较有意思，work-life比较好</li></ul></li><li>eBay<ul><li>内推 onsite的时候非常希望candidate用Java</li></ul></li><li>Uber<ul><li>被撩，电话面试的时候被国人坑了</li></ul></li><li>Google<ul><li>二进宫，运气好，两轮电话，五轮onsite 题目都不难，都做出来了</li></ul></li><li>Quip<ul><li>Bar很高，但是我很欣赏他家产品</li></ul></li><li>Salesforce<ul><li>拿到Google， Groupon 的Offer之后，心思就不在面试上了， 题目简单，注重聊天</li></ul></li></ul><h1 id="Useful-things"><a href="#Useful-things" class="headerlink" title="Useful things"></a>Useful things</h1><ul><li>买Linkedin会员，撩与被撩recruiter</li><li>不断面试</li><li>参加Leetcode contest</li><li>多关注地里消息</li><li>找小伙伴缓解压力</li><li>简历充分，理解为什么这么做和你的challenge</li><li>心态要好</li><li>个人的努力也要参考历史的进程，今年的Google绝对是降Bar了，可以参考之前的Amazon和再之前的Facebook，当然也没有那么水</li></ul>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Review </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Leetcode 总结</title>
      <link href="/2018/05/14/Leetcode-%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/14/Leetcode-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="搬运文章，原创作者-http-joshuablog-herokuapp-com"><a href="#搬运文章，原创作者-http-joshuablog-herokuapp-com" class="headerlink" title="搬运文章，原创作者:http://joshuablog.herokuapp.com/"></a>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a></h2><h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>在整个找工作的期间，每天刷一亩三分地和Leetcode，而且刷题的过程中，有一些比较有价值的网站值得参考，其中的解法分析重点需要掌握。目前在Google的Product Infrastructure组工作，可以提供内推。</p><h1 id="我的总结"><a href="#我的总结" class="headerlink" title="我的总结"></a>我的总结</h1><h2 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h2><p>*<em>大部分来自天纯的pdf笔记  *</em><br>如果问最短，最少，BFS<br>如果问连通性，静态就是 DFS,BFS，动态就 UF<br>如果问依赖性就 topo sort<br>DAG 的问题就 dfs+memo<br>矩阵和 Array 通常都是 DP<br>问数量的通常都是 DP<br>问是否可以，也很有可能 DP<br>求所有解的，基本 backtracking<br>排序总是可以想一想的<br>万事总可以想HashMap<br>找规律试试Stack</p><a id="more"></a><h2 id="基础数据结构"><a href="#基础数据结构" class="headerlink" title="基础数据结构"></a>基础数据结构</h2><ol><li><a href="http://joshuablog.herokuapp.com/Longest-Substring%E7%B3%BB%E5%88%97.html" target="_blank" rel="noopener">Longest Substring系列</a><br><a href="http://joshuablog.herokuapp.com/Two-Pointer%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">Two Pointer问题总结</a><br><a href="http://joshuablog.herokuapp.com/String%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">String总结</a></li><li><a href="http://joshuablog.herokuapp.com/LinkedList%E7%B3%BB%E5%88%97.html" target="_blank" rel="noopener">LinkedList系列</a></li><li><a href="http://joshuablog.herokuapp.com/Stack%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">Stack总结</a></li><li><a href="http://joshuablog.herokuapp.com/Backtracking%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">Backtracking总结</a></li><li><a href="http://joshuablog.herokuapp.com/Heap%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">Heap总结</a></li><li><a href="http://joshuablog.herokuapp.com/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">BFS-Board类型总结</a></li><li><a href="http://joshuablog.herokuapp.com/DFS-BFS-%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">DFS and Dijkstra</a></li><li><a href="http://joshuablog.herokuapp.com/Tree%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">Tree总结</a></li><li><a href="http://joshuablog.herokuapp.com/DP%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">DP总结</a></li></ol><h2 id="稍难数据结构"><a href="#稍难数据结构" class="headerlink" title="稍难数据结构"></a>稍难数据结构</h2><p><a href="http://joshuablog.herokuapp.com/TopLogicalSort-%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">TopLogicalSort 总结</a><br><a href="http://joshuablog.herokuapp.com/Trie-%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">Trie 类型总结</a><br><a href="http://joshuablog.herokuapp.com/Union-Find%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">Union-Find总结</a><br><a href="http://joshuablog.herokuapp.com/Design-%E9%97%AE%E9%A2%98.html" target="_blank" rel="noopener">Design 问题</a><br><a href="http://joshuablog.herokuapp.com/System-Desgin.html" target="_blank" rel="noopener">System Desgin</a></p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h2><ol><li><a href="https://leetcode.com/" target="_blank" rel="noopener">Leetcode</a></li><li><a href="http://www.1point3acres.com/bbs/" target="_blank" rel="noopener">1point3acre.com</a></li><li><a href="https://www.linkedin.com/" target="_blank" rel="noopener">Linkedin (encourage to purchase premium member)</a></li><li><a href="https://www.indeed.com/" target="_blank" rel="noopener">Indeed</a></li><li><a href="https://angel.co/" target="_blank" rel="noopener">AngelList</a></li><li><a href="https://www.glassdoor.com/index.htm" target="_blank" rel="noopener">Glassdoor</a></li><li><a href="https://lingoffer.com/resource" target="_blank" rel="noopener">LingOffer (Refer)</a></li><li><a href="https://www.hackerrank.com/" target="_blank" rel="noopener">Hackerrank</a></li><li><a href="https://bittigerfiles.s3.amazonaws.com/Company%20Slides%20for%20Career%20Meetup.pdf?nsukey=ITLZW1c%2BEgWMA0N%2BJBaXv%2FTqZfXkpCvREiPlHgVeBcN7soSoXYRWytE327M0R6ViNZGxVxz4LfMcE2hmJ6AvzeEtV9DgVfjU7qsgBq04n9qO0o032Ohq0bV%2BdG91IBWmq2w2vNgSuFQOtYWka9zmt5vN5L4WSfgI8EjHhSQQfLBBiv0KDTDXhWsX40T1gx3a" target="_blank" rel="noopener">某一次Bittiger分享的公司和HR邮箱PPT</a></li></ol><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="Python-党"><a href="#Python-党" class="headerlink" title="Python 党"></a>Python 党</h3><ol><li><a href="https://github.com/kamyu104/LeetCode" target="_blank" rel="noopener">kamyu104 带有时间复杂度的总结</a></li><li><a href="https://www.hrwhisper.me/" target="_blank" rel="noopener">细语呢喃 (思路清晰)</a></li></ol><h3 id="Java-党"><a href="#Java-党" class="headerlink" title="Java 党"></a>Java 党</h3><ol><li><a href="https://www.zybuluo.com/Yano/note/253217" target="_blank" rel="noopener">一个按类总结的博客</a></li><li><a href="https://segmentfault.com/a/1190000003922961" target="_blank" rel="noopener">Ethan Li 的技术专栏 思路清晰</a></li><li><a href="https://www.kancloud.cn/kancloud/data-structure-and-algorithm-notes/72897" target="_blank" rel="noopener">一个适合刷基础数据结构的博客</a></li><li><a href="https://liut2.gitbooks.io/crazystuff/content/trie.html" target="_blank" rel="noopener">分类总结2（值得看）</a></li><li><a href="https://mnmunknown.gitbooks.io/algorithm-notes/content/" target="_blank" rel="noopener">分类总结3</a></li><li><a href="https://soulmachine.gitbooks.io/algorithm-essentials/content/java/" target="_blank" rel="noopener">算法珠玑——一个最精简的题库</a></li></ol><h2 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h2><h3 id="Software-Engineer"><a href="#Software-Engineer" class="headerlink" title="Software Engineer"></a>Software Engineer</h3><ol><li><a href="https://taizilongxu.gitbooks.io/stackoverflow-about-python/content/80/README.html" target="_blank" rel="noopener">Python小技巧大全</a></li><li><a href="http://wdxtub.com/2016/01/22/programmer-startline-1/" target="_blank" rel="noopener">小土刀总结</a></li><li><a href="http://www.cs.cmu.edu/~msakr/15619-s16/index.html" target="_blank" rel="noopener">CMU-15619 Cloud Computing</a></li><li><a href="http://wiki.jikexueyuan.com/project/java/object-classes.html" target="_blank" rel="noopener">Java API 小总结</a></li><li><a href="http://www.runoob.com/" target="_blank" rel="noopener">菜鸟教程！</a></li><li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰教程</a></li><li><a href="http://dataunion.org/tag/python" target="_blank" rel="noopener">数盟</a></li><li><a href="http://blog.csdn.net/v_july_v?viewmode=contents" target="_blank" rel="noopener">结构之法 算法之道</a></li></ol><h3 id="Data-Science"><a href="#Data-Science" class="headerlink" title="Data Science"></a>Data Science</h3><ol><li><a href="https://fullstackml.com/" target="_blank" rel="noopener">fullstackml</a></li><li>[Apache Pig Intro] (<a href="http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm" target="_blank" rel="noopener">http://www.tutorialspoint.com/apache_pig/apache_pig_distinct_operator.htm</a>)</li><li><a href="http://www.tutorialspoint.com/cassandra/index.htm" target="_blank" rel="noopener">Cassandra Tutorial</a></li><li><a href="https://qwiklabs.com/" target="_blank" rel="noopener">qwiklabs</a></li><li><a href="https://github.com/hangtwenty/dive-into-machine-learning" target="_blank" rel="noopener">dive-into-machine-learning</a></li></ol><h2 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h2><ol><li><a href="http://systemdesigns.blogspot.com/?view=classic" target="_blank" rel="noopener">不太全的总结</a></li><li><a href="http://novoland.github.io/%E8%AE%BE%E8%AE%A1/2015/04/02/%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%BB%E7%BB%93.html" target="_blank" rel="noopener">设计模式</a></li><li><a href="http://blog.csdn.net/v_july_v/article/details/7382693" target="_blank" rel="noopener">教你如何迅速秒杀掉：99%的海量数据处理面试题</a></li><li><a href="https://hellohell.gitbooks.io/java-/content/url_shorten_design.html" target="_blank" rel="noopener">基础知识包括系统设计–面试题</a></li><li><a href="https://www.hiredintech.com/classrooms/system-design/lesson/104" target="_blank" rel="noopener">hiredintech</a></li></ol><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><ol><li><a href="http://python.jobbole.com/83563/" target="_blank" rel="noopener">利用 Python 练习数据挖掘</a></li><li><a href="http://datasciencemasters.org/" target="_blank" rel="noopener">The Open Source Data Science Masters</a></li><li><a href="https://slack-files.com/T0GUEMKEZ-F0J4G9QTT-274d3bc97e" target="_blank" rel="noopener">Bittiger项目</a></li><li><a href="http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio/" target="_blank" rel="noopener">voting-app</a></li><li><a href="http://chimera.labs.oreilly.com/books/1230000000345/index.html" target="_blank" rel="noopener">Interactive Data Visualization for the Web</a></li></ol><h2 id="杂"><a href="#杂" class="headerlink" title="杂"></a>杂</h2><ol><li><a href="http://www.1point3acres.com/bbs/thread-104824-1-1.html" target="_blank" rel="noopener">北美（湾区）CS工作进阶攻略－求职篇</a></li><li><a href="https://medium.com/@KenjiChao/2016-17-%E7%BE%8E%E5%9C%8B%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%B1%82%E8%81%B7%E5%BF%83%E5%BE%97-a5c00427fa73" target="_blank" rel="noopener">一个台湾人写的小总结</a></li><li><a href="http://bigocheatsheet.com/" target="_blank" rel="noopener">复杂度表</a></li><li><a href="http://yansu.org/" target="_blank" rel="noopener">USC学长的Blog</a></li><li><a href="https://zhuanlan.zhihu.com/p/30218471" target="_blank" rel="noopener">面试总结</a></li><li><a href="https://docs.google.com/spreadsheets/d/17ZXOm9P7hK7cTmSy_FslOB7nbctbGBFRPR5jQg4aJ7s/edit#gid=1222314994" target="_blank" rel="noopener">Leetcode 分类顺序表</a></li><li><a href="https://github.com/wdxtub/WDXpeak/blob/master/3.0/Interview/Code%20Complete/resume-and-introduction.md" target="_blank" rel="noopener">小土刀简历总结</a></li><li><a href="https://aaronk9.gitbooks.io/programmer/content/ru-he-dong-shou-zhun-bei-project.html" target="_blank" rel="noopener">简历的自我推销</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2018/04/24/RabbitMQ/"/>
      <url>/2018/04/24/RabbitMQ/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><ul><li>信息的发送者和接收者如何维持这个连接，如果一方的连接中断，这期间的数据如何方式丢失？</li><li>如何降低发送者和接收者的耦合度？</li><li>如何让Priority高的接收者先接到数据？</li><li>如何做到load balance？有效均衡接收者的负载？</li><li>如何有效的将数据发送到相关的接收者？也就是说将接收者subscribe 不同的数据，如何做有效的filter。</li><li>如何做到可扩展，甚至将这个通信模块发到cluster上？</li><li>如何保证接收者接收到了完整，正确的数据？</li></ul><a id="more"></a><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><img data-src="https://upload-images.jianshu.io/upload_images/5401760-16c4239d5197c238.png" alt=""><br>RabbitMQ Server： 也叫broker server，它不是运送食物的卡车，而是一种传输服务。原话是RabbitMQisn’t a food truck, it’s a delivery service. 他的角色就是维护一条从Producer到Consumer的路线，保证数据能够按照指定的方式进行传输。但是这个保证也不是100%的保证，但是对于普通的应用来说这已经足够了。当然对于商业系统来说，可以再做一层数据一致性的guard，就可以彻底保证系统的一致性了。</p><p>Client P： 也叫Producer，数据的发送方。createmessages and publish (send) them to a broker server (RabbitMQ).一个Message有两个部分：payload（有效载荷）和label（标签）。payload顾名思义就是传输的数据。label是exchange的名字或者说是一个tag，它描述了payload，而且RabbitMQ也是通过这个label来决定把这个Message发给哪个Consumer。AMQP仅仅描述了label，而RabbitMQ决定了如何使用这个label的规则。</p><p>Client C: 也叫Consumer，数据的接收方。Consumersattach to a broker server (RabbitMQ) and subscribe to a queue。把queue比作是一个有名字的邮箱。当有Message到达某个邮箱后，RabbitMQ把它发送给它的某个订阅者即Consumer。当然可能会把同一个Message发送给很多的Consumer。在这个Message中，只有payload，label已经被删掉了。对于Consumer来说，它是不知道谁发送的这个信息的。就是协议本身不支持。但是当然了如果Producer发送的payload包含了Producer的信息就另当别论了。</p><p><strong>Exchanges</strong> are where producers publish their messages.</p><p><strong>Queues</strong> are where the messages end up and are received by consumers</p><p><strong>Bindings</strong> are how the messages get routed from the exchange to particular queues.<br><strong>Routing Key</strong>： 路由关键字，exchange根据这个关键字进行消息投递。</p><h2 id="Message-acknowledgment"><a href="#Message-acknowledgment" class="headerlink" title="Message acknowledgment"></a>Message acknowledgment</h2><p>在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。</p><h2 id="Message-durability"><a href="#Message-durability" class="headerlink" title="Message durability"></a>Message durability</h2><p>如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable）</p><h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><p>生产者将消息发送到Exchange（交换器，下图中的X），由Exchange将消息路由到一个或多个Queue中（或者丢弃）</p><h3 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h3><p><img data-src="https://upload-images.jianshu.io/upload_images/5401760-48523262e0628ef1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/329" alt=""></p><h3 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h3><p>完全匹配<br><img data-src="https://upload-images.jianshu.io/upload_images/5401760-98077aa4aff11976.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/423" alt=""></p><h3 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h3><p>前面讲到direct类型的Exchange路由规则是完全匹配binding key与routing key，但这种严格的匹配方式在很多情况下不能满足实际业务需求。topic类型的Exchange在匹配规则上进行了扩展，它与direct类型的Exchage相似，也是将消息路由到binding key与routing key相匹配的Queue中</p><p><img data-src="https://upload-images.jianshu.io/upload_images/5401760-8aa34283824172fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/424" alt=""><br>以上图中的配置为例，routingKey=”quick.orange.rabbit”的消息会同时路由到Q1与Q2，routingKey=”lazy.orange.fox”的消息会路由到Q1，routingKey=”lazy.brown.fox”的消息会路由到Q2，routingKey=”lazy.pink.rabbit”的消息会路由到Q2（只会投递给Q2一次，虽然这个routingKey与Q2的两个bindingKey都匹配）；routingKey=”quick.brown.fox”、routingKey=”orange”、routingKey=”quick.orange.male.rabbit”的消息将会被丢弃，因为它们没有匹配任何bindingKey。</p><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>作者：高广超<br>链接：<a href="https://www.jianshu.com/p/24f464f9161c" target="_blank" rel="noopener">https://www.jianshu.com/p/24f464f9161c</a><br>來源：简书</p>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>System Desgin</title>
      <link href="/2018/04/24/System-Desgin/"/>
      <url>/2018/04/24/System-Desgin/</url>
      
        <content type="html"><![CDATA[<h1 id="系统设计"><a href="#系统设计" class="headerlink" title="系统设计"></a>系统设计</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>来源  </p><blockquote><p><a href="https://www.jianshu.com/p/f7cfd9dbcd5d" target="_blank" rel="noopener">https://www.jianshu.com/p/f7cfd9dbcd5d</a></p></blockquote><p>Scenario - Necessary - Application - Kilobit - Evolve </p><p>先说哪里用得到，再说我们需要解决问题多大规模。然后说基本解里头Application里面都有啥，然后说说相对应的数据放哪里怎么放。最后这些都说完了（20-25分钟左右）来具体谈怎么让我的基本解在哪些方面做的更好。</p><h3 id="Scenario-场景"><a href="#Scenario-场景" class="headerlink" title="Scenario 场景"></a>Scenario 场景</h3><ol><li><p>问清楚自己要做哪些功能（也就是说，45分钟内不聊哪些功能）</p></li><li><p>问清楚或者说清楚自己要handle多大用户量，面试官起码得给你确认这么几个信息，否则聊不下去。</p></li></ol><ul><li><p>一个是你平均每天handle多少用户</p></li><li><p>一个是你峰值（最多？不太精确但是形容一下）每天handle多少用户</p></li></ul><ol start="3"><li>自己把自己要算的东西都算出来， QPS啊，存储size啊，不非得一口气全部算完，但是记住最基本的用户量，然后再说然后的。</li></ol><a id="more"></a><h3 id="Implementation-实现"><a href="#Implementation-实现" class="headerlink" title="Implementation 实现"></a>Implementation 实现</h3><ol start="4"><li><p>搭架子，我的系统要干嘛，为了做这件事情，我们需要什么组件，怎么安排。这里一切最简单，保证这个东西可以work，不要有明显的优化还不做。</p></li><li><p>按照架子一个一个实现具体功能，如果发现有问题了，改改架子。记住。改架子的时候一定要想想别的东西动没动，动了，赶紧拿个纸记下来。数据放哪可以这里说可以分开说，这都不要紧。</p></li><li><p>架子流程实现完了想想数据放哪里怎么放，那么些个数据库呢，好好挑挑。</p></li></ol><h3 id="Enhancement-提高"><a href="#Enhancement-提高" class="headerlink" title="Enhancement  提高"></a>Enhancement  提高</h3><p>7.根据确认的问题或者优化点慢慢优化。这里的话，不懂就说不懂。为啥？基本分已经有了，大好局面来之不易，千万不要不懂装懂暴露问题。比如你之前说的都挺好，然后到优化了把load balancer放到dispatch service还要靠前端的地方，这不扯么？</p><h2 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h2><p>不同要求，A vs C，聊天系统通常是C</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="想不到怎么办"><a href="#想不到怎么办" class="headerlink" title="想不到怎么办"></a>想不到怎么办</h2><p><img data-src="https://pic4.zhimg.com/80/cc2a92e324587867c8cfba3022ea9cca_hd.jpg" alt=""></p><ul><li>Cache：缓存，万金油，哪里不行优先考虑 - <strong>Latency</strong></li><li>Queue：消息队列，常见使用Linkedin的kafkaAsynchronized：批处理＋异步，减少系统IO瓶颈</li><li>Load Balance: 负载均衡，可以使用一致性hash技术做到尽量少的数据迁移</li><li>Parallelization：并行计算，比如MapReduce</li><li>Replication：提高可靠性，如HDFS，基于位置感知的多块拷贝 </li><li>Partition：数据库 sharding，通过hash取摸</li></ul><p>作者：董飞<br>链接：<a href="https://www.zhihu.com/question/26312148/answer/32627282" target="_blank" rel="noopener">https://www.zhihu.com/question/26312148/answer/32627282</a><br>来源：知乎</p><h1 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h1><p><a href="http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=210147&extra=page%3D1%26filter%3Dtypeid%26typeid%3D200%26typeid%3D200" target="_blank" rel="noopener">系統設計救星! 一天內手把手教你面試</a></p>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> System Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trie 类型总结</title>
      <link href="/2018/04/22/Trie-%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2018/04/22/Trie-%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduce-to-Trie"><a href="#Introduce-to-Trie" class="headerlink" title="Introduce to Trie"></a>Introduce to Trie</h1><h2 id="What-is-Trie"><a href="#What-is-Trie" class="headerlink" title="What is Trie"></a>What is Trie</h2><p>A Trie is a special form of a Nary tree. Typically, a trie is used to store strings. Each Trie node represents a string (a prefix). Each node might have several children nodes while the paths to different children nodes represent different characters. And the strings the child nodes represent will be the origin string represented by the node itself plus the character on the path.</p><h2 id="How-to-represent"><a href="#How-to-represent" class="headerlink" title="How to represent"></a>How to represent</h2><h3 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h3><p>In Python we can use Dictionary to represent it, key is the char and value is the dict. It can save some space but slower because we need to calculate the hashcode every time.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = dict()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a word into the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> curr:</span><br><span class="line">                curr[char] = dict()</span><br><span class="line">            curr = curr[char]</span><br><span class="line">        curr[<span class="string">'#'</span>] = <span class="string">'#'</span></span><br></pre></td></tr></table></figure><p>用defalutdict会更加方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.nodes = defaultdict(TrieNode)  <span class="comment"># Easy to insert new node.</span></span><br><span class="line">        self.isword = <span class="literal">False</span>  <span class="comment"># True for the end of the trie.</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a word into the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            curr = curr.nodes[char]</span><br><span class="line">        curr.isword = <span class="literal">True</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p>We use array can save time but need to create length at least 26 to 256. Key is everytime we need to calculate index <code>ord(char)-97</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.nodes = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">26</span>)]   <span class="comment"># Easy to insert new node.</span></span><br><span class="line">        self.isword = <span class="literal">False</span>  <span class="comment"># True for the end of the trie.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a word into the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            index = ord(char) - <span class="number">97</span></span><br><span class="line">            <span class="keyword">if</span> curr.nodes[index] == <span class="number">0</span>:</span><br><span class="line">                temp = TrieNode()</span><br><span class="line">                curr.nodes[index] = temp</span><br><span class="line">                curr = temp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.nodes[index]</span><br><span class="line">        curr.isword = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h1 id="Basic-operation"><a href="#Basic-operation" class="headerlink" title="Basic operation"></a>Basic operation</h1><h2 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h2><p>pseudo-code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Initialize: cur &#x3D; root</span><br><span class="line">2. for each char c in target string S:</span><br><span class="line">3.      if cur does not have a child c:</span><br><span class="line">4.          cur.children[c] &#x3D; new Trie node</span><br><span class="line">5.      cur &#x3D; cur.children[c]</span><br><span class="line">6. cur is the node which represents the string S</span><br></pre></td></tr></table></figure><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><p>pseudo-code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. Initialize: cur &#x3D; root</span><br><span class="line">2. for each char c in target string S:</span><br><span class="line">3.      if cur does not have a child c:</span><br><span class="line">4.          search fails</span><br><span class="line">5.      cur &#x3D; cur.children[c]</span><br><span class="line">6. search successes</span><br></pre></td></tr></table></figure><h2 id="208-Implement-a-Trie"><a href="#208-Implement-a-Trie" class="headerlink" title="208 Implement a Trie"></a>208 Implement a Trie</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.nodes = defaultdict(TrieNode)  <span class="comment"># Easy to insert new node.</span></span><br><span class="line">        self.isword = <span class="literal">False</span>  <span class="comment"># True for the end of the trie.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a word into the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            curr = curr.nodes[char]</span><br><span class="line">        curr.isword = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if the word is in the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> curr.nodes:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.nodes[char]</span><br><span class="line">        <span class="keyword">return</span> curr.isword</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="string">        :type prefix: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> curr.nodes:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.nodes[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Trie()</span></span><br><span class="line"><span class="comment"># obj.insert(word)</span></span><br><span class="line"><span class="comment"># param_2 = obj.search(word)</span></span><br><span class="line"><span class="comment"># param_3 = obj.startsWith(prefix)</span></span><br></pre></td></tr></table></figure><h1 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h1><h2 id="677-Map-Sum-Pairs"><a href="#677-Map-Sum-Pairs" class="headerlink" title="677. Map Sum Pairs"></a>677. Map Sum Pairs</h2><p>Using Trie to Srote each char and the count of that</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, count = <span class="number">0</span>)</span>:</span></span><br><span class="line">        self.count = count</span><br><span class="line">        self.children = &#123;&#125;</span><br><span class="line">                </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSum</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        self.keys = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, key, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type key: str</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Time: O(k)</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        delta = val - self.keys.get(key, <span class="number">0</span>)</span><br><span class="line">        self.keys[key] = val</span><br><span class="line">        </span><br><span class="line">        curr = self.root</span><br><span class="line">        curr.count += delta</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> key:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> curr.children:</span><br><span class="line">                curr.children[char] = TrieNode()</span><br><span class="line">            curr = curr.children[char]</span><br><span class="line">            curr.count += delta</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prefix: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># Time: O(k)</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> curr.children:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            curr = curr.children[char]</span><br><span class="line">        <span class="keyword">return</span> curr.count</span><br></pre></td></tr></table></figure><h2 id="648-Replace-Words"><a href="#648-Replace-Words" class="headerlink" title="648. Replace Words"></a>648. Replace Words</h2><p>本质思想是构建一个Trie，然后查询的时候如果对应char没有发现，直接返回word，如果查到了prefix 直接返回prefix，都不满足返回word本身</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.root = dict()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> root:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                node[char] = dict()</span><br><span class="line">            node = node[char]</span><br><span class="line">        node[<span class="string">'#'</span>] = root</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replace</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        node = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> node:</span><br><span class="line">                <span class="keyword">return</span> word</span><br><span class="line">            node = node[char]</span><br><span class="line">            <span class="keyword">if</span> node.get(<span class="string">'#'</span>):</span><br><span class="line">                <span class="keyword">return</span> node[<span class="string">'#'</span>]</span><br><span class="line">        <span class="keyword">return</span> word</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceWords</span><span class="params">(self, dict, sentence)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type dict: List[str]</span></span><br><span class="line"><span class="string">        :type sentence: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        trie = TrieNode()</span><br><span class="line">        <span class="keyword">for</span> root <span class="keyword">in</span> dict:</span><br><span class="line">            trie.insert(root)</span><br><span class="line">            </span><br><span class="line">        strs = sentence.split()</span><br><span class="line">        <span class="keyword">for</span> i,v <span class="keyword">in</span> enumerate(strs):</span><br><span class="line">            strs[i] = trie.replace(v)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">" "</span>.join(strs)</span><br></pre></td></tr></table></figure><h2 id="211-Add-and-Search-Word-Data-structure-design"><a href="#211-Add-and-Search-Word-Data-structure-design" class="headerlink" title="211. Add and Search Word - Data structure design"></a>211. Add and Search Word - Data structure design</h2><p>在基础的Trie上，查询的时候利用DFS，如果当前的char == ‘.’ 那么继续dfs查询之后的一个char，只要有一个满足即可；else则是判断当前char是否在prefix树中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.node = defaultdict(TrieNode)</span><br><span class="line">        self.isWord = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self.node)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWord</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Adds a word into the data structure.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            curr = curr.node[char]</span><br><span class="line">        curr.isWord = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.find(self.root, word)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, trie, word)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span> trie.isWord</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> trie.node:</span><br><span class="line">                <span class="keyword">if</span> self.find(trie.node[i], word[<span class="number">1</span>:]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child = trie.node.get(word[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> child:</span><br><span class="line">                <span class="keyword">return</span> self.find(child, word[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="212-Word-Search-II"><a href="#212-Word-Search-II" class="headerlink" title="212. Word Search II"></a>212. Word Search II</h2><p>对于words中的每一个词建立Trie，然后DFS查询在board中能否找到<br>访问前存储该字母，之后再还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tmp = board[i][j]</span><br><span class="line">board[i][j] =<span class="string">"@"</span></span><br><span class="line">board[i][j] = tmp</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findWords</span><span class="params">(self, board, words)</span>:</span></span><br><span class="line">        trie = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">            t = trie</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> w:</span><br><span class="line">                <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> t:</span><br><span class="line">                    t[c] = &#123;&#125;</span><br><span class="line">                t = t[c]</span><br><span class="line">            t[<span class="string">'#'</span>] = <span class="string">'#'</span></span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(board)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(board[<span class="number">0</span>])):</span><br><span class="line">                self.find(board, i, j, trie, <span class="string">''</span>, res)</span><br><span class="line">        <span class="keyword">return</span> list(set(res))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, board, i, j, trie, path, res)</span>:</span></span><br><span class="line">        <span class="comment"># we find</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">'#'</span> <span class="keyword">in</span> trie:</span><br><span class="line">            res.append(path)</span><br><span class="line">        <span class="comment"># not legal</span></span><br><span class="line">        <span class="keyword">if</span> i&lt;<span class="number">0</span> <span class="keyword">or</span> i&gt;=len(board) <span class="keyword">or</span> j&lt;<span class="number">0</span> <span class="keyword">or</span> j&gt;=len(board[<span class="number">0</span>]) <span class="keyword">or</span> board[i][j] <span class="keyword">not</span> <span class="keyword">in</span> trie:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        tmp = board[i][j]</span><br><span class="line">        board[i][j] =<span class="string">"@"</span></span><br><span class="line">        self.find(board, i+<span class="number">1</span>, j, trie[tmp], path+tmp, res)</span><br><span class="line">        self.find(board, i, j+<span class="number">1</span>, trie[tmp], path+tmp, res)</span><br><span class="line">        self.find(board, i<span class="number">-1</span>, j, trie[tmp], path+tmp, res)</span><br><span class="line">        self.find(board, i, j<span class="number">-1</span>, trie[tmp], path+tmp, res)</span><br><span class="line">        board[i][j] = tmp</span><br></pre></td></tr></table></figure><h2 id="425-Word-Squares"><a href="#425-Word-Squares" class="headerlink" title="425. Word Squares"></a>425. Word Squares</h2><p>Hard题目，抄了答案，但本质上还是Trie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Input:</span></span><br><span class="line"><span class="string">["area","lead","wall","lady","ball"]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Output:</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">  [ "wall",</span></span><br><span class="line"><span class="string">    "area",</span></span><br><span class="line"><span class="string">    "lead",</span></span><br><span class="line"><span class="string">    "lady"</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  [ "ball",</span></span><br><span class="line"><span class="string">    "area",</span></span><br><span class="line"><span class="string">    "lead",</span></span><br><span class="line"><span class="string">    "lady"</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Explanation:</span></span><br><span class="line"><span class="string">The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).</span></span><br><span class="line"><span class="string">O(n), O(n) Trie</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="comment"># index</span></span><br><span class="line">self.indices = []</span><br><span class="line">self.children = defaultdict(TrieNode)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, words, i)</span>:</span></span><br><span class="line">cur = self</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> words[i]:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cur.children[c]:</span><br><span class="line">cur.children[c] = TrieNode()</span><br><span class="line">cur = cur.children[c]</span><br><span class="line">cur.indices.append(i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordSquares</span><span class="params">(self, words)</span>:</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">:type words: List[str]</span></span><br><span class="line"><span class="string">:rtype: List[List[str]]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">result = []</span><br><span class="line"></span><br><span class="line">trie = TrieNode()</span><br><span class="line"><span class="comment">#init</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, word <span class="keyword">in</span> enumerate(words):</span><br><span class="line">trie.insert(words,index)</span><br><span class="line"></span><br><span class="line">curr = []</span><br><span class="line"><span class="comment">#dfs</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> words:</span><br><span class="line">curr.append(s)</span><br><span class="line">self.wordSquaresHelper(words, trie, curr, result)</span><br><span class="line">curr.pop()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wordSquaresHelper</span><span class="params">(self, words, trie, curr, result)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(curr) &gt;= len(words[<span class="number">0</span>]):</span><br><span class="line"><span class="comment">#print (curr)</span></span><br><span class="line"><span class="keyword">return</span> result.append(list(curr))</span><br><span class="line"></span><br><span class="line">node = trie</span><br><span class="line"><span class="comment"># check</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> curr:</span><br><span class="line">node = node.children[s[len(curr)]]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> node.indices:</span><br><span class="line">curr.append(words[i])</span><br><span class="line">self.wordSquaresHelper(words, trie, curr, result)</span><br><span class="line">curr.pop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design 问题</title>
      <link href="/2018/03/22/Design-%E9%97%AE%E9%A2%98/"/>
      <url>/2018/03/22/Design-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Design系列问题"><a href="#Design系列问题" class="headerlink" title="Design系列问题"></a>Design系列问题</h1><h2 id="高频题"><a href="#高频题" class="headerlink" title="高频题"></a>高频题</h2><p>这类题基本上都是高频题</p><h3 id="146-LRU-Cache"><a href="#146-LRU-Cache" class="headerlink" title="146. LRU Cache"></a>146. LRU Cache</h3><p>这道题是很高频的题目，主要hint就是用双向链表来实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k, v)</span>:</span></span><br><span class="line">self.key = k</span><br><span class="line">self.val = v</span><br><span class="line">self.prev = <span class="literal">None</span></span><br><span class="line">self.next = <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, capacity)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type capacity: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.capacity = capacity</span><br><span class="line">        self.dic = &#123;&#125;</span><br><span class="line">        self.head = Node(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        self.tail = Node(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        self.head.next = self.tail</span><br><span class="line">        self.tail.prev = self.head</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type key: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.dic:</span><br><span class="line">            n = self.dic[key]</span><br><span class="line">            self._remove(n)</span><br><span class="line">            self._add(n)</span><br><span class="line">            <span class="keyword">return</span> n.val</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type key: int</span></span><br><span class="line"><span class="string">        :type value: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> self.dic:</span><br><span class="line">            self._remove(self.dic[key])</span><br><span class="line">        n = Node(key, value)</span><br><span class="line">        self._add(n)</span><br><span class="line">        <span class="comment"># imp value - node</span></span><br><span class="line">        self.dic[key] = n</span><br><span class="line">        <span class="keyword">if</span> len(self.dic) &gt; self.capacity:</span><br><span class="line">            n = self.head.next</span><br><span class="line">            self._remove(n)</span><br><span class="line">            <span class="keyword">del</span>(self.dic[n.key])</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_add</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        p = self.tail.prev</span><br><span class="line">        p.next = node</span><br><span class="line">        self.tail.prev = node</span><br><span class="line">        node.prev = p</span><br><span class="line">        node.next = self.tail</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_remove</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        p = node.prev</span><br><span class="line">        n = node.next</span><br><span class="line">        p.next = n</span><br><span class="line">        n.prev = p</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your LRUCache object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = LRUCache(capacity)</span></span><br><span class="line"><span class="comment"># param_1 = obj.get(key)</span></span><br><span class="line"><span class="comment"># obj.put(key,value)</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="155-Min-Stack"><a href="#155-Min-Stack" class="headerlink" title="155. Min Stack"></a>155. Min Stack</h3><p>这道题就是用stack来存sofar的最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(self.stack) == <span class="number">0</span>:</span><br><span class="line">            self.stack.append((x,x))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            min_sofar = min(x, self.stack[<span class="number">-1</span>][<span class="number">1</span>])</span><br><span class="line">            self.stack.append((x, min_sofar))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack.pop()  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MinStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.getMin()</span></span><br></pre></td></tr></table></figure><h3 id="716-Max-Stack"><a href="#716-Max-Stack" class="headerlink" title="716. Max Stack"></a>716. Max Stack</h3><p>与上一道题相类似，区别就是在popMax的时候用临时stack来记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaxStack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        maxNumber = max(x, self.stack[<span class="number">-1</span>][<span class="number">1</span>]) <span class="keyword">if</span> self.stack <span class="keyword">else</span> x</span><br><span class="line">        self.stack.append((x,maxNumber))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.stack.pop()[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>][<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peekMax</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">popMax</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        temp = self.stack[<span class="number">-1</span>][<span class="number">1</span>]</span><br><span class="line">        tempStack = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> self.stack[<span class="number">-1</span>][<span class="number">0</span>] != temp:</span><br><span class="line">            tempStack.append(self.stack.pop())</span><br><span class="line">        self.stack.pop()</span><br><span class="line">        <span class="keyword">while</span> tempStack:</span><br><span class="line">            self.push(tempStack.pop()[<span class="number">0</span>])</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> temp</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MaxStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MaxStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.peekMax()</span></span><br><span class="line"><span class="comment"># param_5 = obj.popMax()</span></span><br></pre></td></tr></table></figure><h3 id="225-Implement-Stack-using-Queues"><a href="#225-Implement-Stack-using-Queues" class="headerlink" title="225. Implement Stack using Queues"></a>225. Implement Stack using Queues</h3><p>在init的时候，每当新元素进来的时候，不断让queue的元素pop出来在加到queue尾，从而index为0 的元素就是最后加进来的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.queue = []</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Push element x onto stack.</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.queue.append(x)</span><br><span class="line">        size = len(self.queue)</span><br><span class="line">        <span class="keyword">while</span> size &gt; <span class="number">1</span>:</span><br><span class="line">            self.queue.append(self.queue.pop(<span class="number">0</span>))</span><br><span class="line">            size -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.queue.pop(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get the top element.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.queue[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns whether the stack is empty.</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue) == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure><h3 id="232-Implement-Queue-using-Stacks"><a href="#232-Implement-Queue-using-Stacks" class="headerlink" title="232. Implement Queue using Stacks"></a>232. Implement Queue using Stacks</h3><p>用两个stack，在pop的时候，也是同样的像上一题的操作，加到另外一个stack中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input = []</span><br><span class="line">        self.output = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.input.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.peek()</span><br><span class="line">        <span class="keyword">return</span> self.output.pop()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>(self.output == []):</span><br><span class="line">            <span class="keyword">while</span>(self.input != []):</span><br><span class="line">                self.output.append(self.input.pop())</span><br><span class="line">        <span class="keyword">return</span> self.output[<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.input == [] <span class="keyword">and</span> self.output == []</span><br></pre></td></tr></table></figure><h3 id="297-Serialize-and-Deserialize-Binary-Tree"><a href="#297-Serialize-and-Deserialize-Binary-Tree" class="headerlink" title="297. Serialize and Deserialize Binary Tree"></a>297. Serialize and Deserialize Binary Tree</h3><p>这道题就是BFS遍历树，然后BFS解析树，注意index的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Codec</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""Encodes a tree to a single string.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        queue = [root]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                queue.append(node.left)</span><br><span class="line">                queue.append(node.right)</span><br><span class="line">            res.append(str(node.val) <span class="keyword">if</span> node <span class="keyword">else</span> <span class="string">"#"</span>)</span><br><span class="line">        <span class="comment"># strip left ','</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">","</span>.join(res).strip(<span class="string">','</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        <span class="string">"""Decodes your encoded data to tree.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :type data: str</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        nodes = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data.split(<span class="string">","</span>):</span><br><span class="line">            <span class="keyword">if</span> i != <span class="string">'#'</span>:</span><br><span class="line">                nodes.append(TreeNode(i))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nodes.append(<span class="literal">None</span>)</span><br><span class="line">        </span><br><span class="line">        queue = [nodes[<span class="number">0</span>]]</span><br><span class="line">        index = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> index &lt; len(nodes) <span class="keyword">and</span> nodes[index]:</span><br><span class="line">                node.left = nodes[index]</span><br><span class="line">                queue.append(nodes[index])</span><br><span class="line">            <span class="keyword">if</span> index + <span class="number">1</span> &lt; len(nodes) <span class="keyword">and</span> nodes[index+<span class="number">1</span>]:</span><br><span class="line">                node.right = nodes[index+<span class="number">1</span>]</span><br><span class="line">                queue.append(nodes[index+<span class="number">1</span>])</span><br><span class="line">            index += <span class="number">2</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> nodes[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Codec object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># codec = Codec()</span></span><br><span class="line"><span class="comment"># codec.deserialize(codec.serialize(root))</span></span><br></pre></td></tr></table></figure><h3 id="173-Binary-Search-Tree-Iterator"><a href="#173-Binary-Search-Tree-Iterator" class="headerlink" title="173. Binary Search Tree Iterator"></a>173. Binary Search Tree Iterator</h3><p>这道题也是高频题，FB面过.注意pushAll的时候是判断root！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a  binary tree node</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        self.pushAll(root)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pushAll</span><span class="params">(self,root)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            self.stack.append(root)</span><br><span class="line">            root = root.left</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.stack</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        node = self.stack.pop()</span><br><span class="line">        </span><br><span class="line">        self.pushAll(node.right)</span><br><span class="line">        <span class="keyword">return</span> node.val</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your BSTIterator will be called like this:</span></span><br><span class="line"><span class="comment"># i, v = BSTIterator(root), []</span></span><br><span class="line"><span class="comment"># while i.hasNext(): v.append(i.next())</span></span><br></pre></td></tr></table></figure><h3 id="380-Insert-Delete-GetRandom-O-1"><a href="#380-Insert-Delete-GetRandom-O-1" class="headerlink" title="380. Insert Delete GetRandom O(1)"></a>380. Insert Delete GetRandom O(1)</h3><p>用dic来记录value和对应的index，从而能保证O（1）时间内删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedSet</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.array = []</span><br><span class="line">        self.dic = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a value to the set. Returns true if the set did not already contain the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">in</span> self.dic:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        self.dic[val] = len(self.array)</span><br><span class="line">        self.array.append(val)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.dic:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># val.index in self.array</span></span><br><span class="line">        index = self.dic[val]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># check not the last</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; len(self.array) - <span class="number">1</span>:</span><br><span class="line">            last = self.array[<span class="number">-1</span>]</span><br><span class="line">            self.dic[last] = index</span><br><span class="line">            self.array[index] = last</span><br><span class="line">            </span><br><span class="line">        self.array.pop()</span><br><span class="line">        <span class="keyword">del</span>(self.dic[val])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRandom</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get a random element from the set.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.array[random.randint(<span class="number">0</span>, len(self.array)<span class="number">-1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your RandomizedSet object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = RandomizedSet()</span></span><br><span class="line"><span class="comment"># param_1 = obj.insert(val)</span></span><br><span class="line"><span class="comment"># param_2 = obj.remove(val)</span></span><br><span class="line"><span class="comment"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure><h3 id="381-Insert-Delete-GetRandom-O-1-Duplicates-allowed"><a href="#381-Insert-Delete-GetRandom-O-1-Duplicates-allowed" class="headerlink" title="381. Insert Delete GetRandom O(1) - Duplicates allowed"></a>381. Insert Delete GetRandom O(1) - Duplicates allowed</h3><p>dic里面的值用set来记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomizedCollection</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.array = []</span><br><span class="line">        self.dic = dict()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a value to the collection. Returns true if the collection did not already contain the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.dic:</span><br><span class="line">            self.dic[val] = set()</span><br><span class="line">            self.dic[val].add(len(self.array))</span><br><span class="line">            self.array.append(val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.dic[val].add(len(self.array))</span><br><span class="line">            self.array.append(val)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes a value from the set. Returns true if the set contained the specified element.</span></span><br><span class="line"><span class="string">        :type val: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> val <span class="keyword">not</span> <span class="keyword">in</span> self.dic:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># val.index in self.array</span></span><br><span class="line">        index = self.dic[val].pop()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> index &lt; len(self.array) - <span class="number">1</span>:</span><br><span class="line">            </span><br><span class="line">            last = self.array[<span class="number">-1</span>]</span><br><span class="line">            self.array[index] = last</span><br><span class="line">            <span class="comment"># last item delete</span></span><br><span class="line">            <span class="comment"># remove old insert new</span></span><br><span class="line">            </span><br><span class="line">            self.dic[last].remove(len(self.array)<span class="number">-1</span>)</span><br><span class="line">            self.dic[last].add(index)</span><br><span class="line">            </span><br><span class="line">        self.array.pop()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.dic[val]:</span><br><span class="line">            <span class="keyword">del</span>(self.dic[val])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getRandom</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get a random element from the set.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.array[random.randint(<span class="number">0</span>, len(self.array)<span class="number">-1</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your RandomizedCollection object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = RandomizedCollection()</span></span><br><span class="line"><span class="comment"># param_1 = obj.insert(val)</span></span><br><span class="line"><span class="comment"># param_2 = obj.remove(val)</span></span><br><span class="line"><span class="comment"># param_3 = obj.getRandom()</span></span><br></pre></td></tr></table></figure><h2 id="Trie类型"><a href="#Trie类型" class="headerlink" title="Trie类型"></a>Trie类型</h2><h3 id="简单构建"><a href="#简单构建" class="headerlink" title="简单构建"></a>简单构建</h3><p>在程序中需要简单构建一个Trie</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">trie = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">    t = trie</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> w:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">not</span> <span class="keyword">in</span> t:</span><br><span class="line">            t[c] = &#123;&#125;</span><br><span class="line">        t = t[c]</span><br><span class="line">    t[<span class="string">'#'</span>] = <span class="string">'#'</span></span><br></pre></td></tr></table></figure><h3 id="208-Implement-Trie-Prefix-Tree"><a href="#208-Implement-Trie-Prefix-Tree" class="headerlink" title="208. Implement Trie (Prefix Tree)"></a>208. Implement Trie (Prefix Tree)</h3><p>基础类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.nodes = defaultdict(TrieNode)  <span class="comment"># Easy to insert new node.</span></span><br><span class="line">        self.isword = <span class="literal">False</span>  <span class="comment"># True for the end of the trie.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trie</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Inserts a word into the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            curr = curr.nodes[char]</span><br><span class="line">        curr.isword = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if the word is in the trie.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> curr.nodes:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.nodes[char]</span><br><span class="line">        <span class="keyword">return</span> curr.isword</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startsWith</span><span class="params">(self, prefix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if there is any word in the trie that starts with the given prefix.</span></span><br><span class="line"><span class="string">        :type prefix: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> prefix:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> curr.nodes:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.nodes[char]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># Your Trie object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Trie()</span></span><br><span class="line"><span class="comment"># obj.insert(word)</span></span><br><span class="line"><span class="comment"># param_2 = obj.search(word)</span></span><br><span class="line"><span class="comment"># param_3 = obj.startsWith(prefix)</span></span><br></pre></td></tr></table></figure><h3 id="211-Add-and-Search-Word-Data-structure-design"><a href="#211-Add-and-Search-Word-Data-structure-design" class="headerlink" title="211. Add and Search Word - Data structure design"></a>211. Add and Search Word - Data structure design</h3><p>如何处理. 的问题，用string的slice来搞，find的递归操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.node = defaultdict(TrieNode)</span><br><span class="line">        self.isWord = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self.node)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDictionary</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addWord</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Adds a word into the data structure.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        curr = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            curr = curr.node[char]</span><br><span class="line">        curr.isWord = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.</span></span><br><span class="line"><span class="string">        :type word: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.find(self.root, word)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, trie, word)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> word == <span class="string">''</span>:</span><br><span class="line">            <span class="keyword">return</span> trie.isWord</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> word[<span class="number">0</span>] == <span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> trie.node:</span><br><span class="line">                <span class="keyword">if</span> self.find(trie.node[i], word[<span class="number">1</span>:]):</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child = trie.node.get(word[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">if</span> child:</span><br><span class="line">                <span class="keyword">return</span> self.find(child, word[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="642-Design-Search-Autocomplete-System"><a href="#642-Design-Search-Autocomplete-System" class="headerlink" title="642. Design Search Autocomplete System"></a>642. Design Search Autocomplete System</h3><p>进阶版本 取前三个。很复杂的题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.children = dict()</span><br><span class="line">        self.isEnd = <span class="literal">False</span></span><br><span class="line">        self.rank = <span class="number">0</span></span><br><span class="line">        self.data  = <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutocompleteSystem</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sentences, times)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type sentences: List[str]</span></span><br><span class="line"><span class="string">        :type times: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.root = TrieNode()</span><br><span class="line">        self.keyword = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i, sentence <span class="keyword">in</span> enumerate(sentences):</span><br><span class="line">            self.addRecord(sentence, times[i])</span><br><span class="line">            </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addRecord</span><span class="params">(self, word, rank)</span>:</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> p.children:</span><br><span class="line">                p.children[char] = TrieNode()</span><br><span class="line">            p = p.children[char]</span><br><span class="line">        p.isEnd = <span class="literal">True</span>   </span><br><span class="line">        p.data = word</span><br><span class="line">        <span class="comment"># compare</span></span><br><span class="line">        p.rank -= rank</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, word)</span>:</span></span><br><span class="line">        p = self.root</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">not</span> <span class="keyword">in</span> p.children:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            p = p.children[char]</span><br><span class="line">        <span class="keyword">return</span> self.dfs(p)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            <span class="comment"># find the end</span></span><br><span class="line">            <span class="keyword">if</span> root.isEnd:</span><br><span class="line">                res.append((root.rank, root.data))</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> root.children:</span><br><span class="line">                res.extend(self.dfs(root.children[child]))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">input</span><span class="params">(self, c)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type c: str</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> c != <span class="string">"#"</span>:</span><br><span class="line">            self.keyword += c</span><br><span class="line">            res = self.search(self.keyword)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.addWord(self.keyword,<span class="number">1</span>)</span><br><span class="line">            self.keyword = <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> [item[<span class="number">1</span>] <span class="keyword">for</span> item <span class="keyword">in</span> sorted(res)[:<span class="number">3</span>]]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your AutocompleteSystem object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = AutocompleteSystem(sentences, times)</span></span><br><span class="line"><span class="comment"># param_1 = obj.input(c)</span></span><br></pre></td></tr></table></figure><h2 id="一般的题"><a href="#一般的题" class="headerlink" title="一般的题"></a>一般的题</h2><h3 id="281-Zigzag-Iterator"><a href="#281-Zigzag-Iterator" class="headerlink" title="281. Zigzag Iterator"></a>281. Zigzag Iterator</h3><p>就是正常的来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZigzagIterator</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, v1, v2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        :type v1: List[int]</span></span><br><span class="line"><span class="string">        :type v2: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.res = []</span><br><span class="line">        pos = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> pos &lt; max(len(v1), len(v2)):</span><br><span class="line">            <span class="keyword">if</span> pos &lt; len(v1):</span><br><span class="line">                self.res.append(v1[pos])</span><br><span class="line">            <span class="keyword">if</span> pos &lt; len(v2):</span><br><span class="line">                self.res.append(v2[pos])</span><br><span class="line">            pos += <span class="number">1</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = self.res[self.index]</span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.index &lt; len(self.res)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your ZigzagIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># i, v = ZigzagIterator(v1, v2), []</span></span><br><span class="line"><span class="comment"># while i.hasNext(): v.append(i.next())</span></span><br></pre></td></tr></table></figure><h3 id="284-Peeking-Iterator"><a href="#284-Peeking-Iterator" class="headerlink" title="284. Peeking Iterator"></a>284. Peeking Iterator</h3><p>先预存next的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Below is the interface for Iterator, which is already defined for you.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># class Iterator(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, nums):</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"><span class="comment">#         Initializes an iterator object to the beginning of a list.</span></span><br><span class="line"><span class="comment">#         :type nums: List[int]</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def hasNext(self):</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"><span class="comment">#         Returns true if the iteration has more elements.</span></span><br><span class="line"><span class="comment">#         :rtype: bool</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def next(self):</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"><span class="comment">#         Returns the next element in the iteration.</span></span><br><span class="line"><span class="comment">#         :rtype: int</span></span><br><span class="line"><span class="comment">#         """</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekingIterator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, iterator)</span>:</span></span><br><span class="line">        self.iter = iterator</span><br><span class="line">        self.temp = self.iter.next() <span class="keyword">if</span> self.iter.hasNext() <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.temp</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        ret = self.temp</span><br><span class="line">        self.temp = self.iter.next() <span class="keyword">if</span> self.iter.hasNext() <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.temp <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="comment"># Your PeekingIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># iter = PeekingIterator(Iterator(nums))</span></span><br><span class="line"><span class="comment"># while iter.hasNext():</span></span><br><span class="line"><span class="comment">#     val = iter.peek()   # Get the next element but not advance the iterator.</span></span><br><span class="line"><span class="comment">#     iter.next()         # Should return the same value as [val].</span></span><br></pre></td></tr></table></figure><h3 id="359-Logger-Rate-Limiter"><a href="#359-Logger-Rate-Limiter" class="headerlink" title="359. Logger Rate Limiter"></a>359. Logger Rate Limiter</h3><p>window的size为10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.dic = dict()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shouldPrintMessage</span><span class="params">(self, timestamp, message)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns true if the message should be printed in the given timestamp, otherwise returns false.</span></span><br><span class="line"><span class="string">        If this method returns false, the message will not be printed.</span></span><br><span class="line"><span class="string">        The timestamp is in seconds granularity.</span></span><br><span class="line"><span class="string">        :type timestamp: int</span></span><br><span class="line"><span class="string">        :type message: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># condition one </span></span><br><span class="line">        <span class="keyword">if</span> message <span class="keyword">in</span> self.dic <span class="keyword">and</span> timestamp - self.dic[message] &lt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.dic[message] = timestamp</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your Logger object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = Logger()</span></span><br><span class="line"><span class="comment"># param_1 = obj.shouldPrintMessage(timestamp,message)</span></span><br></pre></td></tr></table></figure><h3 id="362-Design-Hit-Counter"><a href="#362-Design-Hit-Counter" class="headerlink" title="362. Design Hit Counter"></a>362. Design Hit Counter</h3><p>因为是统计当时的hit值，所以可以维护一个全局变量hit</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HitCounter</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line">        self.queue = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hit</span><span class="params">(self, timestamp)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Record a hit.</span></span><br><span class="line"><span class="string">        @param timestamp - The current timestamp (in seconds granularity).</span></span><br><span class="line"><span class="string">        :type timestamp: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.queue <span class="keyword">or</span> self.queue[<span class="number">-1</span>][<span class="number">0</span>] != timestamp:</span><br><span class="line">            self.queue.append([timestamp,<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.queue[<span class="number">-1</span>][<span class="number">1</span>] += <span class="number">1</span></span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getHits</span><span class="params">(self, timestamp)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Return the number of hits in the past 5 minutes.</span></span><br><span class="line"><span class="string">        @param timestamp - The current timestamp (in seconds granularity).</span></span><br><span class="line"><span class="string">        :type timestamp: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># move forward</span></span><br><span class="line">        <span class="keyword">while</span> self.queue <span class="keyword">and</span> timestamp - self.queue[<span class="number">0</span>][<span class="number">0</span>] &gt;= <span class="number">300</span>:</span><br><span class="line">            self.count -= self.queue.pop(<span class="number">0</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> self.count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your HitCounter object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = HitCounter()</span></span><br><span class="line"><span class="comment"># obj.hit(timestamp)</span></span><br><span class="line"><span class="comment"># param_2 = obj.getHits(timestamp)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TopLogicalSort 总结</title>
      <link href="/2018/03/11/TopLogicalSort-%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/11/TopLogicalSort-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><p>拓扑排序适合于求解相关联的依赖状态，比如0依赖于1，2; 2 依赖于3<br>这样就类似于BFS的模版，用一个queue来维持；然后把各个链接用图的形式连接起来，从入度为0的点开始，遍历每一个字节点也就是每一个出度；同时对应的入度-1， 如果对应的节点入度为0，证明该节点的依赖关系已经被计算过，从而加入Queue进行下一步操作</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>模版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">outdegree = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line">indegree = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line"></span><br><span class="line">queue = []</span><br><span class="line"><span class="comment"># find zero indegree</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> indegree:</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> i:</span><br><span class="line">queue.append(i)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">node = queue.pop(<span class="number">0</span>)</span><br><span class="line">count += <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> succ <span class="keyword">in</span> outdegree[course]:</span><br><span class="line">indegree[succ] -= <span class="number">1</span></span><br><span class="line"><span class="comment"># no indegree</span></span><br><span class="line"><span class="keyword">if</span> indegree[succ] == <span class="number">0</span>:</span><br><span class="line">queue.append(succ)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="207-Course-Schedule"><a href="#207-Course-Schedule" class="headerlink" title="207. Course Schedule"></a>207. Course Schedule</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canFinish</span><span class="params">(self, numCourses, prerequisites)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type numCourses: int</span></span><br><span class="line"><span class="string">        :type prerequisites: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        outdegree = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line">        indegree = [<span class="number">0</span>] * numCourses</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> succ, pre <span class="keyword">in</span> prerequisites:</span><br><span class="line">            outdegree[pre].append(succ)</span><br><span class="line">            indegree[succ] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        queue = []</span><br><span class="line">        <span class="comment"># find start from all course - indegree == 0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numCourses):</span><br><span class="line">            <span class="keyword">if</span> indegree[i] == <span class="number">0</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line"></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            course = queue.pop(<span class="number">0</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> succ <span class="keyword">in</span> outdegree[course]:</span><br><span class="line">                indegree[succ] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> indegree[succ] == <span class="number">0</span>:</span><br><span class="line">                    queue.append(succ)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># if we find all course that are equal to the given course</span></span><br><span class="line">        <span class="keyword">return</span> count == numCourses</span><br></pre></td></tr></table></figure><h3 id="210-Course-Schedule-II"><a href="#210-Course-Schedule-II" class="headerlink" title="210. Course Schedule II"></a>210. Course Schedule II</h3><p>区别就是输出list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findOrder</span><span class="params">(self, numCourses, prerequisites)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type numCourses: int</span></span><br><span class="line"><span class="string">        :type prerequisites: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        outdegree = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(numCourses)]</span><br><span class="line">        indegree = [<span class="number">0</span>] * numCourses</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> succ, pre <span class="keyword">in</span> prerequisites:</span><br><span class="line">            outdegree[pre].append(succ)</span><br><span class="line">            indegree[succ] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        queue = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(numCourses):</span><br><span class="line">            <span class="keyword">if</span> indegree[i] == <span class="number">0</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            pre = queue.pop(<span class="number">0</span>)</span><br><span class="line">            res.append(pre)</span><br><span class="line">            <span class="keyword">for</span> succ <span class="keyword">in</span> outdegree[pre]:</span><br><span class="line">                indegree[succ] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> indegree[succ] == <span class="number">0</span>:</span><br><span class="line">                    queue.append(succ)</span><br><span class="line">        <span class="keyword">return</span> res <span class="keyword">if</span> len(res) == numCourses <span class="keyword">else</span> []</span><br></pre></td></tr></table></figure><h3 id="802-Find-Eventual-Safe-States"><a href="#802-Find-Eventual-Safe-States" class="headerlink" title="802. Find Eventual Safe States"></a>802. Find Eventual Safe States</h3><p>也是一道可以用这种方法做的题，就是经过拓扑排序后出度为0的点输出出来就好。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eventualSafeNodes</span><span class="params">(self, graph)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type graph: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        outdegree = [<span class="number">0</span>] * len(graph)</span><br><span class="line">        indegree = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(graph))]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(graph)):</span><br><span class="line">            outdegree[i] = len(graph[i])</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(graph[i])):</span><br><span class="line">                indegree[graph[i][j]].append(i)</span><br><span class="line"></span><br><span class="line">        queue = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(outdegree)):</span><br><span class="line">            <span class="keyword">if</span> outdegree[i] == <span class="number">0</span>:</span><br><span class="line">                queue.append(i)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            res.append(node)</span><br><span class="line">            <span class="keyword">if</span> indegree[node]:</span><br><span class="line">                <span class="keyword">for</span> rest <span class="keyword">in</span> indegree[node]:</span><br><span class="line">                    outdegree[rest] -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> outdegree[rest] == <span class="number">0</span>:</span><br><span class="line">                        queue.append(rest)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sorted(res)</span><br></pre></td></tr></table></figure><h3 id="444-Sequence-Reconstruction"><a href="#444-Sequence-Reconstruction" class="headerlink" title="444. Sequence Reconstruction"></a>444. Sequence Reconstruction</h3><p>这道题有两个点，一个是入度为0的只能有一个；二是如何控制只有一个数字的list-虽说对结果没啥影响，不过还要处理这么一个case[1],[[1],[1],[1]] 挺无聊的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sequenceReconstruction</span><span class="params">(self, org, seqs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type org: List[int]</span></span><br><span class="line"><span class="string">        :type seqs: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        indegree = collections.defaultdict(int)</span><br><span class="line">        outdegree = collections.defaultdict(list)</span><br><span class="line"></span><br><span class="line">        st = set()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> seq <span class="keyword">in</span> seqs:</span><br><span class="line">            <span class="comment"># union set</span></span><br><span class="line">            st |= set(seq)</span><br><span class="line">            <span class="keyword">if</span> len(seq) == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> seq[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> indegree:</span><br><span class="line">                    indegree[seq[<span class="number">0</span>]] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(seq)<span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> seq[i] <span class="keyword">not</span> <span class="keyword">in</span> indegree:</span><br><span class="line">                    indegree[seq[i]] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">if</span> seq[i+<span class="number">1</span>] <span class="keyword">not</span> <span class="keyword">in</span> outdegree[seq[i]]:</span><br><span class="line">                    outdegree[seq[i]].append(seq[i+<span class="number">1</span>])</span><br><span class="line">                    indegree[seq[i+<span class="number">1</span>]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        zero_degree = <span class="number">0</span></span><br><span class="line">        queue = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> indegree:</span><br><span class="line">            <span class="keyword">if</span> indegree[each] == <span class="number">0</span>:</span><br><span class="line">                queue.append(each)</span><br><span class="line">                zero_degree += <span class="number">1</span></span><br><span class="line">                <span class="comment"># unique</span></span><br><span class="line">                <span class="keyword">if</span> zero_degree &gt; <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            prev = queue.pop(<span class="number">0</span>)</span><br><span class="line">            res.append(prev)</span><br><span class="line">            count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> succ <span class="keyword">in</span> outdegree[prev]:</span><br><span class="line">                indegree[succ] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> indegree[succ] == <span class="number">0</span>:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    queue.append(succ)</span><br><span class="line">                    <span class="comment"># not unique</span></span><br><span class="line">                    <span class="keyword">if</span> count &gt; <span class="number">1</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># if left</span></span><br><span class="line">            <span class="keyword">if</span> outdegree[prev] <span class="keyword">and</span> <span class="keyword">not</span> count:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> res == org <span class="keyword">and</span> set(org) == set(st)</span><br></pre></td></tr></table></figure><h3 id="269-Alien-Dictionary"><a href="#269-Alien-Dictionary" class="headerlink" title="269. Alien Dictionary"></a>269. Alien Dictionary</h3><p>Hard 难度，一方面是构建dictionary的时候很繁琐.<br>每次判断完后要del掉outdegree所对应pop出来的元素，直到没有出度，也就是全部遍历完了才成功。因为order的长度没有给出，所以不能用len(order) == len(origin) 来判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">alienOrder</span><span class="params">(self, words)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        indegree, outdegree = collections.defaultdict(int), collections.defaultdict(list)</span><br><span class="line"></span><br><span class="line">        queue = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(words)):</span><br><span class="line">            <span class="comment"># consider play and playing</span></span><br><span class="line">            <span class="keyword">if</span> len(words[i<span class="number">-1</span>]) &gt; len(words[i]) <span class="keyword">and</span> words[i<span class="number">-1</span>][:len(words[i])] == words[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.buildToplogicalSort(words[i<span class="number">-1</span>], words[i], indegree, outdegree)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Take care some corner cases (newly added)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> outdegree <span class="keyword">and</span> len(words) == <span class="number">2</span> <span class="keyword">and</span> len(words[<span class="number">0</span>]) &gt; len(words[<span class="number">1</span>]):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># build number of char</span></span><br><span class="line">        nodes = set()</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> word:</span><br><span class="line">                nodes.add(char)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> nodes:</span><br><span class="line">            <span class="keyword">if</span> indegree[char] == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#if char not in indegree:</span></span><br><span class="line">                queue.append(char)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            prev = queue.pop(<span class="number">0</span>)</span><br><span class="line">            res.append(prev)</span><br><span class="line">            <span class="comment"># we need to check outdegree because we del outdegree if we find</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> succ <span class="keyword">in</span> outdegree[prev]:</span><br><span class="line">                indegree[succ] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> indegree[succ] == <span class="number">0</span>:</span><br><span class="line">                    queue.append(succ)</span><br><span class="line">            <span class="comment"># del outdegree for this char</span></span><br><span class="line">            <span class="keyword">del</span>(outdegree[prev])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> outdegree:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(res)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildToplogicalSort</span><span class="params">(self, word1, word2, indegree, outdegree)</span>:</span></span><br><span class="line">        length = min(len(word1), len(word2))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">            <span class="keyword">if</span> word1[i] != word2[i]:</span><br><span class="line">                <span class="comment"># init pre char</span></span><br><span class="line">                <span class="comment"># if word1[i] not in outdegree:</span></span><br><span class="line">                <span class="comment">#     outdegree[word1[i]] = set()</span></span><br><span class="line">                <span class="keyword">if</span> word2[i] <span class="keyword">not</span> <span class="keyword">in</span> outdegree[word1[i]]:</span><br><span class="line">                    indegree[word2[i]] += <span class="number">1</span></span><br><span class="line">                    outdegree[word1[i]].append(word2[i])</span><br><span class="line">                <span class="comment"># only contain two char is not the same its order after that is irrelevent</span></span><br><span class="line">                <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TopLogicalSort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFS-BFS 总结</title>
      <link href="/2018/03/10/DFS-BFS-%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/10/DFS-BFS-%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h1><h2 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>对于不是Tree下面的DFS题来说，一直是我的一个弱点（不知道为什么），所以现在特意开贴来总结常见的题型</p><p>大致的模版就是明确dfs函数中不合法的状态要直接return和继续dfs的情况；同时也要做好visited的标记，从而避免无限循环的错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i,j,matrix)</span>:</span></span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= len(matrix) <span class="keyword">or</span> j &gt;= len(matrix) <span class="keyword">or</span> matrix[i][j] == X:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set visited</span></span><br><span class="line">matrix[i][j] = X</span><br><span class="line">dfs(i+<span class="number">1</span>, j, matrix)</span><br><span class="line">dfs(i<span class="number">-1</span>, j, matrix)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="733-Flood-Fill"><a href="#733-Flood-Fill" class="headerlink" title="733. Flood Fill"></a>733. Flood Fill</h3><p>最简单的DFS版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">floodFill</span><span class="params">(self, image, sr, sc, newColor)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type image: List[List[int]]</span></span><br><span class="line"><span class="string">        :type sr: int</span></span><br><span class="line"><span class="string">        :type sc: int</span></span><br><span class="line"><span class="string">        :type newColor: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = len(image)</span><br><span class="line">        n = len(image[<span class="number">0</span>])</span><br><span class="line">        color = image[sr][sc]</span><br><span class="line">        <span class="keyword">if</span> color != newColor:</span><br><span class="line">            self.dfs(sr, sc,image,color,newColor)</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, i, j,image,color,newColor)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= len(image) <span class="keyword">or</span> j &gt;= len(image[<span class="number">0</span>]) <span class="keyword">or</span> image[i][j] != color:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        image[i][j] = newColor</span><br><span class="line">        self.dfs(i+<span class="number">1</span>, j, image, color, newColor)</span><br><span class="line">        self.dfs(i<span class="number">-1</span>, j, image, color, newColor)</span><br><span class="line">        self.dfs(i, j+<span class="number">1</span>, image, color, newColor)</span><br><span class="line">        self.dfs(i, j<span class="number">-1</span>, image, color, newColor)</span><br></pre></td></tr></table></figure><h3 id="130-Surrounded-Regions"><a href="#130-Surrounded-Regions" class="headerlink" title="130. Surrounded Regions"></a>130. Surrounded Regions</h3><p>如果1的周围有边界的话，设置为M作为标准，之后再改回来。之后的same as Island</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solve</span><span class="params">(self, board)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type board: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify board in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> board <span class="keyword">or</span> <span class="keyword">not</span> board[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        m = len(board)</span><br><span class="line">        n = len(board[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># border case</span></span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> <span class="keyword">or</span> j == <span class="number">0</span> <span class="keyword">or</span> i == m<span class="number">-1</span> <span class="keyword">or</span> j == n <span class="number">-1</span>) <span class="keyword">and</span> board[i][j] == <span class="string">'O'</span>:</span><br><span class="line">                    board[i][j] == <span class="string">'M'</span></span><br><span class="line">                    self.dfs(i,j,board)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">'O'</span>:</span><br><span class="line">                    board[i][j] = <span class="string">'X'</span></span><br><span class="line">                <span class="keyword">elif</span> board[i][j] == <span class="string">'M'</span>:</span><br><span class="line">                    board[i][j] = <span class="string">'O'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, r, c, board)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> r &lt; <span class="number">0</span> <span class="keyword">or</span> c &lt; <span class="number">0</span> <span class="keyword">or</span> r &gt;= len(board) <span class="keyword">or</span> c &gt;= len(board[<span class="number">0</span>]) <span class="keyword">or</span> board[r][c] == <span class="string">'X'</span> <span class="keyword">or</span> board[r][c] == <span class="string">'M'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        board[r][c] = <span class="string">'M'</span></span><br><span class="line">        self.dfs(r+<span class="number">1</span>, c, board)</span><br><span class="line">        self.dfs(r<span class="number">-1</span>, c, board)</span><br><span class="line">        self.dfs(r, c+<span class="number">1</span>, board)</span><br><span class="line">        self.dfs(r, c<span class="number">-1</span>, board)</span><br></pre></td></tr></table></figure><h3 id="200-Number-of-Islands"><a href="#200-Number-of-Islands" class="headerlink" title="200. Number of Islands"></a>200. Number of Islands</h3><p>如果岛屿周围为1，置为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type grid: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m = len(grid)</span><br><span class="line">        n = len(grid[<span class="number">0</span>])</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line">                    self.dfs(i,j,grid)</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, r, c, grid)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> r &lt; <span class="number">0</span> <span class="keyword">or</span> c &lt; <span class="number">0</span> <span class="keyword">or</span> r &gt;= len(grid) <span class="keyword">or</span> c &gt;= len(grid[<span class="number">0</span>]) <span class="keyword">or</span> grid[r][c] == <span class="string">'0'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        grid[r][c] = <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line">        self.dfs(r+<span class="number">1</span>,c,  grid)</span><br><span class="line">        self.dfs(r<span class="number">-1</span>, c, grid)</span><br><span class="line">        self.dfs(r, c<span class="number">-1</span>, grid)</span><br><span class="line">        self.dfs(r, c+<span class="number">1</span>, grid)</span><br></pre></td></tr></table></figure><h3 id="542-01-Matrix"><a href="#542-01-Matrix" class="headerlink" title="542    01 Matrix"></a>542    01 Matrix</h3><p>Same as Wall and Gate</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateMatrix</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        m = len(matrix)</span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j] == <span class="number">1</span>:</span><br><span class="line">                    matrix[i][j] = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> matrix[i][j] == <span class="number">0</span>:</span><br><span class="line">                    self.dfs(i,j,matrix,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, i, j, matrix, d)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> i &gt;= len(matrix) <span class="keyword">or</span> j &gt;= len(matrix[<span class="number">0</span>]) <span class="keyword">or</span> matrix[i][j] &lt; d:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        matrix[i][j] = d</span><br><span class="line">        self.dfs(i+<span class="number">1</span>, j, matrix, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(i<span class="number">-1</span>, j, matrix, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(i, j<span class="number">-1</span>, matrix, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(i, j+<span class="number">1</span>, matrix, d+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="286-Walls-and-Gates"><a href="#286-Walls-and-Gates" class="headerlink" title="286    Walls and Gates"></a>286    Walls and Gates</h3><p>找出0的位置，然后-1为墙</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wallsAndGates</span><span class="params">(self, rooms)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type rooms: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: void Do not return anything, modify rooms in-place instead.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> rooms <span class="keyword">or</span> <span class="keyword">not</span> rooms[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        m = len(rooms)</span><br><span class="line">        n = len(rooms[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># start</span></span><br><span class="line">                <span class="keyword">if</span> rooms[i][j] == <span class="number">0</span>:</span><br><span class="line">                    self.dfs(i, j, rooms, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, r, c, rooms, d)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> r &lt; <span class="number">0</span> <span class="keyword">or</span> c &lt; <span class="number">0</span> <span class="keyword">or</span> r &gt;= len(rooms) <span class="keyword">or</span> c &gt;= len(rooms[<span class="number">0</span>]) <span class="keyword">or</span> rooms[r][c] &lt; d:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># mark as 0 and then other path + 1</span></span><br><span class="line">        rooms[r][c] = d</span><br><span class="line">        self.dfs(r+<span class="number">1</span>, c, rooms, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(r<span class="number">-1</span>, c, rooms, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(r, c+<span class="number">1</span>, rooms, d+<span class="number">1</span>)</span><br><span class="line">        self.dfs(r, c<span class="number">-1</span>, rooms, d+<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="Matrix-2"><a href="#Matrix-2" class="headerlink" title="Matrix 2"></a>Matrix 2</h2><p>有时候在Matrix的时候需要判断每一次DFS的情况，这时候也可以通过比较每一次更新的值来抉择</p><h3 id="329-Longest-Increasing-Path-in-a-Matrix"><a href="#329-Longest-Increasing-Path-in-a-Matrix" class="headerlink" title="329. Longest Increasing Path in a Matrix"></a>329. Longest Increasing Path in a Matrix</h3><p>每一次找到递增的时候，继续DFS，然后用cache来记录每一个（i，j）最大可能的递增长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestIncreasingPath</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        m = len(matrix)</span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        cache = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line"></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                ans = max(ans, self.dfs(i,j,cache, matrix))</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, i, j, cache, matrix)</span>:</span></span><br><span class="line">        <span class="comment"># find cache</span></span><br><span class="line">        <span class="keyword">if</span> cache[i][j] != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> cache[i][j]</span><br><span class="line">        direction = [(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">-1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">-1</span>,<span class="number">0</span>)]</span><br><span class="line">        <span class="keyword">for</span> dire <span class="keyword">in</span> direction:</span><br><span class="line">            x, y = i + dire[<span class="number">0</span>], j + dire[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= len(matrix) <span class="keyword">or</span> y &gt;= len(matrix[<span class="number">0</span>]) <span class="keyword">or</span> matrix[i][j] &gt;= matrix[x][y]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            cache[i][j] = max(cache[i][j], self.dfs(x,y,cache, matrix))</span><br><span class="line">        <span class="comment"># self (i,j) + 1</span></span><br><span class="line">        cache[i][j] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cache[i][j]</span><br></pre></td></tr></table></figure><h3 id="695-Max-Area-of-Island"><a href="#695-Max-Area-of-Island" class="headerlink" title="695. Max Area of Island"></a>695. Max Area of Island</h3><p>另外一种思路</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxAreaOfIsland</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type grid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        seen = set()  <span class="comment"># function scope var</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> range(len(grid)):</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(len(grid[<span class="number">0</span>])):</span><br><span class="line">                   <span class="keyword">if</span> grid[row][col] == <span class="number">1</span>:</span><br><span class="line">                    res = max(res,self.dfs(row, col, grid,seen))        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, row, col,grid, seen)</span>:</span></span><br><span class="line">            <span class="string">"""if a point is valid, it should meet all requirements using "and" """</span></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= row &lt; len(grid) <span class="keyword">and</span> <span class="number">0</span> &lt;= col &lt; len(grid[<span class="number">0</span>]) <span class="keyword">and</span> (grid[row][col] == <span class="number">1</span>) <span class="keyword">and</span> (row, col) <span class="keyword">not</span> <span class="keyword">in</span> seen:</span><br><span class="line">                seen.add((row, col))             <span class="comment"># list this point to seen set so we won't count it again</span></span><br><span class="line">                <span class="keyword">return</span> (self.dfs(row - <span class="number">1</span>, col,grid,seen) + self.dfs(row + <span class="number">1</span>, col,grid,seen)</span><br><span class="line">                        + self.dfs(row, col - <span class="number">1</span>,grid,seen) + self.dfs(row, col + <span class="number">1</span>,grid, seen)</span><br><span class="line">                        + <span class="number">1</span>)                     <span class="comment"># add 1 to the area and DFS(4-Conn Neighbors)</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>                         <span class="comment"># not valid point return 0</span></span><br></pre></td></tr></table></figure><h3 id="417-Pacific-Atlantic-Water-Flow"><a href="#417-Pacific-Atlantic-Water-Flow" class="headerlink" title="417. Pacific Atlantic Water Flow"></a>417. Pacific Atlantic Water Flow</h3><p>这道题要从两方面来判断，太平洋和大西洋</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pacificAtlantic</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(MN)</span></span><br><span class="line">        <span class="comment"># need to write more</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        m = len(matrix)</span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        p_visited = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        a_visited = [[<span class="literal">False</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line"></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="comment"># left and right</span></span><br><span class="line"></span><br><span class="line">            self.dfs(i, <span class="number">0</span>, p_visited, m, n, matrix)</span><br><span class="line">            self.dfs(i, n<span class="number">-1</span>, a_visited, m, n, matrix)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">            <span class="comment"># up and down</span></span><br><span class="line">            self.dfs(<span class="number">0</span>, j, p_visited, m, n, matrix)</span><br><span class="line">            self.dfs(m<span class="number">-1</span>, j, a_visited, m, n, matrix)</span><br><span class="line">        <span class="comment">#print p_visited, a_visited</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> p_visited[i][j] <span class="keyword">and</span> a_visited[i][j]:</span><br><span class="line">                    res.append([i,j])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, i, j, visited, m, n, matrix)</span>:</span></span><br><span class="line">        visited[i][j] = <span class="literal">True</span></span><br><span class="line">        direction = [(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">-1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">-1</span>,<span class="number">0</span>)]</span><br><span class="line">        <span class="keyword">for</span> dire <span class="keyword">in</span> direction:</span><br><span class="line">            x, y = i + dire[<span class="number">0</span>], j + dire[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> y &lt; <span class="number">0</span> <span class="keyword">or</span> x &gt;= m <span class="keyword">or</span> y &gt;= n <span class="keyword">or</span> visited[x][y] <span class="keyword">or</span> matrix[i][j] &gt; matrix[x][y]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            self.dfs(x, y, visited, m, n, matrix)</span><br></pre></td></tr></table></figure><h1 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h1><h2 id="普通的"><a href="#普通的" class="headerlink" title="普通的"></a>普通的</h2><p>参见之前写过的BFS-border总结<br><a href="http://joshuablog.herokuapp.com/2017/09/10/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">BFS-Maze总结</a></p><h3 id="490"><a href="#490" class="headerlink" title="490"></a>490</h3><h3 id="499"><a href="#499" class="headerlink" title="499"></a>499</h3><h3 id="505"><a href="#505" class="headerlink" title="505"></a>505</h3><h3 id="542"><a href="#542" class="headerlink" title="542"></a>542</h3><h3 id="286"><a href="#286" class="headerlink" title="286"></a>286</h3><h2 id="狄杰斯特拉算法"><a href="#狄杰斯特拉算法" class="headerlink" title="狄杰斯特拉算法"></a>狄杰斯特拉算法</h2><p>求有缘路径的最短距离<br>算法导论的经典例子</p><h3 id="743-Network-Delay-Time"><a href="#743-Network-Delay-Time" class="headerlink" title="743. Network Delay Time"></a>743. Network Delay Time</h3><p>使用heap操作，每次添加最短的路径cost</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">networkDelayTime</span><span class="params">(self, times, N, K)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type times: List[List[int]]</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(ElgV) E edges, V vertices</span></span><br><span class="line">        <span class="comment"># Dijkstra's</span></span><br><span class="line">        pq = [[<span class="number">0</span>,K]]</span><br><span class="line">        graph = collections.defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> u,v,w <span class="keyword">in</span> times:</span><br><span class="line">            graph[u].append([v,w])</span><br><span class="line"></span><br><span class="line">        dic = dict()</span><br><span class="line">        <span class="comment"># len(pq) ~ V</span></span><br><span class="line">        <span class="keyword">while</span> pq:</span><br><span class="line">            distance, node = heapq.heappop(pq)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#visited</span></span><br><span class="line">            <span class="keyword">if</span> node <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            dic[node] = distance</span><br><span class="line">            <span class="comment"># O(E) ~ edges</span></span><br><span class="line">            <span class="keyword">for</span> desination, path <span class="keyword">in</span> graph[node]:</span><br><span class="line">                <span class="keyword">if</span> desination <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">                    heapq.heappush(pq,(distance + path, desination))</span><br><span class="line">        <span class="keyword">return</span> max(dic.values()) <span class="keyword">if</span> len(dic) == N <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="787-Cheapest-Flights-Within-K-Stops"><a href="#787-Cheapest-Flights-Within-K-Stops" class="headerlink" title="787. Cheapest Flights Within K Stops"></a>787. Cheapest Flights Within K Stops</h3><p>几乎和上题一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCheapestPrice</span><span class="params">(self, n, flights, src, dst, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type flights: List[List[int]]</span></span><br><span class="line"><span class="string">        :type src: int</span></span><br><span class="line"><span class="string">        :type dst: int</span></span><br><span class="line"><span class="string">        :type K: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(ElgV) E flight ways ,V cities</span></span><br><span class="line">        f = collections.defaultdict(dict)</span><br><span class="line">        <span class="keyword">for</span> a, b, p <span class="keyword">in</span> flights:</span><br><span class="line">            f[a][b] = p</span><br><span class="line"></span><br><span class="line">        heap = [(<span class="number">0</span>, src, k + <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">while</span> heap:</span><br><span class="line">            p, i, k = heapq.heappop(heap)</span><br><span class="line">            <span class="keyword">if</span> i == dst:</span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">            <span class="keyword">if</span> k &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> f[i]:</span><br><span class="line">                    heapq.heappush(heap, (p + f[i][j], j, k - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transmission Web Control</title>
      <link href="/2018/01/09/transmission-web-control/"/>
      <url>/2018/01/09/transmission-web-control/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本项目原作者为<a href="https://github.com/ronggang" target="_blank" rel="noopener">ronggang</a>,<br>原托管于GitHub的<a href="https://github.com/ronggang/transmission-web-control" target="_blank" rel="noopener">transmission-web-control</a>。但不知道原作者是否已经停止跟新，为方便大家使用，现新建一个repo并托管于此，欢迎大家反馈问题或者pull<br>request。</p><p>本项目主要目的是想加强<a href="https://www.transmissionbt.com/" target="_blank" rel="noopener">Transmission</a> Web的操作能力，本项目原本在<a href="https://code.google.com/p/transmission-control/" target="_blank" rel="noopener">Google Code</a>托管，现迁移至GitHub。<br>本项目设计之初仅针对PT站，因此增加了 Tracker 服务器分组及状态，但这不并适用于普通BT种子。</p><h4 id="English-Introduction"><a href="#English-Introduction" class="headerlink" title="English Introduction"></a><a href="#introduction">English Introduction</a></h4><h3 id="支持的Transmission版本-Support-Transmission-Version"><a href="#支持的Transmission版本-Support-Transmission-Version" class="headerlink" title="支持的Transmission版本(Support Transmission Version)"></a>支持的Transmission版本(Support Transmission Version)</h3><ul><li>Transmission 2.40 及以上版本（RPC版本：14及以上）</li><li>Transmission 2.40 and above (RPC version: 14 and above)</li></ul><h3 id="已修复问题"><a href="#已修复问题" class="headerlink" title="已修复问题"></a>已修复问题</h3><p>有时间的话我会尽量修改原repo里的问题，现在已经修改的问题如下：</p><ul><li>更新了源程序的tar文件</li><li>修复英文界面的一些笔误</li><li>添加了http的安装方法</li><li>更新了install.sh的英文注释</li></ul><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><ul><li>在线查看Transmission当前工作情况；</li><li>在线添加新的种子文件或连接；</li><li>在线修改Transmission参数；</li><li>分页浏览方式加载种子；</li><li>多语言环境支持；</li><li>文件拖放添加种子；</li><li>删除指定的种子；</li><li>批量修改 Tracker；</li><li>移动指定种子的数据存放目录；</li><li>可按 Trackers 分组浏览；</li><li>其他……</li></ul><a id="more"></a><h3 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h3><ul><li>所有支持HTML5的浏览器(Chrome 15.0.874，Firefox 8.0.1，IE 9.0.8112，Opera 11.52)</li></ul><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><ul><li>可通过以下地址获取最新版的程序：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;DarkAlexWang&#x2F;transmission-web-control&#x2F;raw&#x2F;master&#x2F;release&#x2F;transmission-control-full.tar.gz</span><br></pre></td></tr></table></figure></li><li>或到下载安装脚本，此脚本只需要下载一次，以后只需要执行即可:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;DarkAlexWang&#x2F;transmission-web-control&#x2F;raw&#x2F;master&#x2F;release&#x2F;tr-control-easy-install.sh</span><br><span class="line">sudo bash tr-control-easy-install.sh</span><br></pre></td></tr></table></figure></li><li>如果需要http而不是https，请使用以下命令;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;DarkAlexWang&#x2F;transmission-web-control&#x2F;raw&#x2F;master&#x2F;release&#x2F;tr-control-easy-install-en-http.sh --no-check-certificate</span><br><span class="line">sudo bash tr-control-easy-install-en-http.sh</span><br></pre></td></tr></table></figure></li></ul><h3 id="关于多语言-Multi-language"><a href="#关于多语言-Multi-language" class="headerlink" title="关于多语言(Multi-language)"></a>关于多语言(Multi-language)</h3><p>系统使用多语言的方式构建，所以可以支持其他任何语言；但，由于本人水平有限，只会中文，所以需要懂其他语言的您的帮助，如果您已经翻译好了一个语言版本，请同时发给我一份，我会打包在一起，分享给更多的用户，谢谢。</p><h4 id="当前已支持的语言-Currently-supported-languages-："><a href="#当前已支持的语言-Currently-supported-languages-：" class="headerlink" title="当前已支持的语言(Currently supported languages)："></a>当前已支持的语言(Currently supported languages)：</h4><ul><li><code>2013-04-22</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/zh-CN.js" target="_blank" rel="noopener">简体中文(Simplified Chinese)</a> @栽培者</li><li><code>2014-02-09</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/zh-TW.js" target="_blank" rel="noopener">正體中文(Traditional Chinese)</a> @Sean</li><li><code>2013-04-22</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/en.js" target="_blank" rel="noopener">英文(English)</a> @栽培者</li><li><code>2014-02-09</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/ru.js" target="_blank" rel="noopener">俄语(Russian)</a> @Oleksandr Gureiev &amp; @irherder</li><li><code>2013-04-17</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/es.js" target="_blank" rel="noopener">西班牙语(Spanish)</a> @Adrián González</li><li><code>2013-02-05</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/pl.js" target="_blank" rel="noopener">波兰语(Polish)</a> @Daniel Kolek</li><li><code>2013-11-11</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/hu.js" target="_blank" rel="noopener">匈牙利语(Hungarian)</a> @Swartzy</li><li><code>2013-05-18</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/ro.js" target="_blank" rel="noopener">罗马尼亚(Romanian)</a> @Laurentiu Dinulescu</li><li><code>2013-05-28</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/it.js" target="_blank" rel="noopener">意大利(Italian)</a> @Daniele Buccilli</li><li><code>2014-02-12</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/pt-BR.js" target="_blank" rel="noopener">葡萄牙语（巴西）(Brazilian Portuguese)</a> @Dudu Maroja &amp; @pcgaldo</li><li><code>2013-08-20</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/nl.js" target="_blank" rel="noopener">荷兰语 (Dutch/Flemmisch)</a> @Alwin Hummels</li><li><code>2013-09-12</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/fr.js" target="_blank" rel="noopener">法语 (French)</a> @Amaury Aubry</li><li><code>2013-12-05</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/ko.js" target="_blank" rel="noopener">韩语 (Korean)</a> @kdsz330</li><li><code>2014-02-12</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/pt-PT.js" target="_blank" rel="noopener">葡萄牙语(European Portuguese)</a> @pcgaldo</li></ul><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>The origianl author is <a href="https://github.com/ronggang" target="_blank" rel="noopener">ronggang</a>, and the original repo is <a href="https://github.com/ronggang/transmission-web-control" target="_blank" rel="noopener">transmission-web-control</a>. Not sure if the original<br>author has stopped maintenance or not, but in order to better serve the PTer or<br>myself, I have opened a new repo with several issues fixed. Welcome to give me<br>any feedback or submit a Pull Request.</p><p>Transmission Web Control is a custom web UI. The project began in <a href="https://code.google.com/p/transmission-control/" target="_blank" rel="noopener">Goolge Code</a>.</p><h3 id="Support-Transmission-Version"><a href="#Support-Transmission-Version" class="headerlink" title="Support Transmission Version"></a>Support Transmission Version</h3><ul><li>Transmission 2.40 and above (RPC version: 14 and above)</li></ul><h3 id="Fixed-issues"><a href="#Fixed-issues" class="headerlink" title="Fixed issues"></a>Fixed issues</h3><p>I will do my best to fix the issues that in the origianl repo.</p><ul><li>Updated the install tar file</li><li>Fixed several typos in English interface</li><li>Added http install script</li><li>Added install.sh with English comments</li></ul><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ul><li>Add torrent files or URLs</li><li>Drag-and-drop to add torrent files</li><li>Online modify the Transmission setting (Download folder,Speed ​​limit,Port,etc.)</li><li>Pause / resume / recheck selected or all torrents</li><li>View the current torrents status (Files,Peers,Trackers,etc.)</li><li>View Statistics(Cumulative/Current)</li><li>The pagination torrents</li><li>Set files priority</li><li>Change the torrent download directory</li><li>Trackers list</li><li>…</li></ul><h3 id="Browsers-support"><a href="#Browsers-support" class="headerlink" title="Browsers support"></a>Browsers support</h3><ul><li>All browsers support HTML5. (Chrome 15.0.874，Firefox 8.0.1，IE 9.0.8112，Opera 11.52 etc.)</li></ul><h3 id="Multi-language"><a href="#Multi-language" class="headerlink" title="Multi-language"></a>Multi-language</h3><h4 id="How-to-use-the-language-pack"><a href="#How-to-use-the-language-pack" class="headerlink" title="How to use the language pack:"></a>How to use the language pack:</h4><ul><li>All language files are needed to put in the “lang” directory, format refer “lang/en.js”;</li><li>Translated language file naming, and then copied to the lang directory, note that necessary “.js” suffix, such as: en.js;</li><li>Modify the the “lang/<code>_</code>languages.js” file, the new language format to add a line;</li><li>Regain access to the TR, if your browser’s default configuration language “<code>_</code>languages.js” where it will automatically display the current language, if not, please manually select the language or the end of the page plus “?lang=language”; such as: 192.168.1.1/transmission/web/?lang=en</li></ul><h4 id="Currently-supported-languages："><a href="#Currently-supported-languages：" class="headerlink" title="Currently supported languages："></a>Currently supported languages：</h4><ul><li><code>2013-04-22</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/zh-CN.js" target="_blank" rel="noopener">Simplified Chinese</a> @ronggang</li><li><code>2014-02-09</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/zh-TW.js" target="_blank" rel="noopener">Traditional Chinese</a> @Sean</li><li><code>2013-04-22</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/en.js" target="_blank" rel="noopener">English</a> @ronggang</li><li><code>2014-02-09</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/ru.js" target="_blank" rel="noopener">Russian</a> @Oleksandr Gureiev &amp; @irherder</li><li><code>2013-04-17</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/es.js" target="_blank" rel="noopener">Spanish</a> @Adrián González</li><li><code>2013-02-05</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/pl.js" target="_blank" rel="noopener">Polish</a> @Daniel Kolek</li><li><code>2013-11-11</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/hu.js" target="_blank" rel="noopener">Hungarian</a> @Swartzy</li><li><code>2013-05-18</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/ro.js" target="_blank" rel="noopener">Romanian</a> @Laurentiu Dinulescu</li><li><code>2013-05-28</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/it.js" target="_blank" rel="noopener">Italian</a> @Daniele Buccilli</li><li><code>2014-02-12</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/pt-BR.js" target="_blank" rel="noopener">Brazilian Portuguese</a> @Dudu Maroja &amp; @pcgaldo</li><li><code>2013-08-20</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/nl.js" target="_blank" rel="noopener">Dutch/Flemmisch</a> @Alwin Hummels</li><li><code>2013-09-12</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/fr.js" target="_blank" rel="noopener">French</a> @Amaury Aubry</li><li><code>2013-12-05</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/ko.js" target="_blank" rel="noopener">Korean</a> @kdsz330</li><li><code>2014-02-12</code> <a href="https://github.com/ronggang/transmission-web-control/raw/master/src/tr-web-control/lang/pt-PT.js" target="_blank" rel="noopener">European Portuguese</a> @pcgaldo</li><li>If you have translated a language pack, please upload it here issue 9</li></ul><h4 id="How-to-install"><a href="#How-to-install" class="headerlink" title="How to install"></a><a href="https://code.google.com/p/transmission-control/wiki/Install#1._Automatic_Installation_(Linux)" target="_blank" rel="noopener">How to install</a></h4><h3 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h3><ul><li>You can get the latest version of the program for this address:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;DarkAlexWang&#x2F;transmission-web-control&#x2F;raw&#x2F;master&#x2F;release&#x2F;transmission-control-full.tar.gz</span><br></pre></td></tr></table></figure></li><li>Or download easy install script:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;DarkAlexWang&#x2F;transmission-web-control&#x2F;raw&#x2F;master&#x2F;release&#x2F;tr-control-easy-install.sh</span><br><span class="line">sudo bash tr-control-easy-install.sh</span><br></pre></td></tr></table></figure></li><li>If you need http download instead of https, please use the following<br>  commands:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;DarkAlexWang&#x2F;transmission-web-control&#x2F;raw&#x2F;master&#x2F;release&#x2F;tr-control-easy-install-en-http.sh --no-check-certificate</span><br><span class="line">sudo bash tr-control-easy-install-en-http.sh</span><br></pre></td></tr></table></figure></li><li>install.sh script with english comments:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;DarkAlexWang&#x2F;transmission-web-control&#x2F;raw&#x2F;master&#x2F;release&#x2F;tr-control-easy-install-en.sh</span><br></pre></td></tr></table></figure></li></ul><h6 id="创建于-Create-2012-12-18；更新于-Update-2014-10-13-By-栽培者-ronggang-Updated-08-23-2016-by-DarkAlexWang"><a href="#创建于-Create-2012-12-18；更新于-Update-2014-10-13-By-栽培者-ronggang-Updated-08-23-2016-by-DarkAlexWang" class="headerlink" title="创建于(Create): 2012.12.18；更新于(Update): 2014.10.13 By 栽培者(ronggang); Updated: 08-23-2016 by DarkAlexWang"></a>创建于(Create): 2012.12.18；更新于(Update): 2014.10.13 By 栽培者(ronggang); Updated: 08-23-2016 by DarkAlexWang</h6>]]></content>
      
      
      
        <tags>
            
            <tag> Technology </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2018/01/09/hello-world/"/>
      <url>/2018/01/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tips </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Two Pointer问题总结</title>
      <link href="/2017/10/24/Two-Pointer%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/24/Two-Pointer%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="209-Minimum-Size-Subarray-Sum"><a href="#209-Minimum-Size-Subarray-Sum" class="headerlink" title="209. Minimum Size Subarray Sum"></a>209. Minimum Size Subarray Sum</h3><p>这道题没有那么多复杂的计算size方法，只是和大于k后，左移一位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minSubArrayLen</span><span class="params">(self, s, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: int</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># sliding widows</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        l, r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        minLength = len(nums)+<span class="number">1</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> r &lt; len(nums):</span><br><span class="line">            res += nums[r]</span><br><span class="line">            </span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> res &gt;= s:</span><br><span class="line">                minLength = min(minLength, r - l)</span><br><span class="line">                res -= nums[l]</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> minLength == len(nums)+<span class="number">1</span> <span class="keyword">else</span> minLength</span><br></pre></td></tr></table></figure><h3 id="713-Subarray-Product-Less-Than-K"><a href="#713-Subarray-Product-Less-Than-K" class="headerlink" title="713. Subarray Product Less Than K"></a>713. Subarray Product Less Than K</h3><p>这道题甚至是上一道题的简略版本，要求出所有符合条件的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numSubarrayProductLessThanK</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> k &lt;= <span class="number">1</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        prod = <span class="number">1</span></span><br><span class="line">        ans = left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> right, val <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            prod *= val</span><br><span class="line">            <span class="keyword">while</span> prod &gt;= k:</span><br><span class="line">                prod /= nums[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            ans += right - left + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="763-Partition-Labels"><a href="#763-Partition-Labels" class="headerlink" title="763. Partition Labels"></a>763. Partition Labels</h3><p>简化版本的windows题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partitionLabels</span><span class="params">(self, S)</span>:</span></span><br><span class="line">        last = &#123;c: i <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(S)&#125;</span><br><span class="line">        j = anchor = <span class="number">0</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(S):</span><br><span class="line">            <span class="comment"># update j like a sliding window</span></span><br><span class="line">            j = max(j, last[c])</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">if</span> i == j:</span><br><span class="line">                ans.append(i - anchor + <span class="number">1</span>)</span><br><span class="line">                anchor = i + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="424-Longest-Repeating-Character-Replacement"><a href="#424-Longest-Repeating-Character-Replacement" class="headerlink" title="424. Longest Repeating Character Replacement"></a>424. Longest Repeating Character Replacement</h3><p>这道题的关键是最多可以替换k个字母，所以维护窗口的size是max出现字母的次数，剩下的都要替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#from collections import defaultdict</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">characterReplacement</span><span class="params">(self, s, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line">        count = &#123;&#125;</span><br><span class="line">        max_count = start = result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> end <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            count[s[end]] = count.get(s[end], <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            max_count = max(max_count, count[s[end]])</span><br><span class="line">            <span class="keyword">if</span> end - start + <span class="number">1</span> - max_count &gt; k:</span><br><span class="line">                count[s[start]] -= <span class="number">1</span></span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">            result = max(result, end - start + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="567-Permutation-in-String"><a href="#567-Permutation-in-String" class="headerlink" title="567. Permutation in String"></a>567. Permutation in String</h3><p>这道题是找Permutation in String，所以窗口size永远是end-start + 1,只要比较两个dict是否相同就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkInclusion</span><span class="params">(self, s1, s2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s1: str</span></span><br><span class="line"><span class="string">        :type s2: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(n)</span></span><br><span class="line">        dic1, dic2 = dict(), dict()</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> s1:</span><br><span class="line">            dic1[s] = dic1.get(s,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        start, end = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> end &lt; len(s2):</span><br><span class="line">            dic2[s2[end]] = dic2.get(s2[end],<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dic1 == dic2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment"># compare</span></span><br><span class="line">            <span class="keyword">if</span> end -start + <span class="number">1</span> &gt; len(s1):</span><br><span class="line">                dic2[s2[start]] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> dic2[s2[start]] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">del</span>(dic2[s2[start]])</span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h3 id="438-Find-All-Anagrams-in-a-String"><a href="#438-Find-All-Anagrams-in-a-String" class="headerlink" title="438. Find All Anagrams in a String"></a>438. Find All Anagrams in a String</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findAnagrams</span><span class="params">(self, s, p)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type p: str</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dic1, dic2 = dict(), dict()</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> p:</span><br><span class="line">            dic1[each] = dic1.get(each,<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        start, end = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> end &lt; len(s):</span><br><span class="line">            dic2[s[end]] = dic2.get(s[end],<span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> dic1 == dic2:</span><br><span class="line">                res.append(start)</span><br><span class="line">            </span><br><span class="line">            end += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment"># compare</span></span><br><span class="line">            <span class="keyword">if</span> end -start + <span class="number">1</span> &gt; len(p):</span><br><span class="line">                dic2[s[start]] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> dic2[s[start]] == <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">del</span>(dic2[s[start]])</span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="239-Sliding-Window-Maximum"><a href="#239-Sliding-Window-Maximum" class="headerlink" title="239. Sliding Window Maximum"></a>239. Sliding Window Maximum</h3><p>这道题是Two Pointer的升级版，我们不仅需要维护一个window size，还要判断最大值出现的位置，以便能节省空间；所以这道题我们用deque来进行解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSlidingWindow</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dq = deque()</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="comment"># limit range</span></span><br><span class="line">            <span class="keyword">if</span> dq <span class="keyword">and</span> dq[<span class="number">0</span>] == i-k:</span><br><span class="line">                dq.popleft()</span><br><span class="line">            <span class="keyword">while</span> dq <span class="keyword">and</span> nums[i] &gt;= nums[dq[<span class="number">-1</span>]]:</span><br><span class="line">                <span class="comment"># no meaning</span></span><br><span class="line">                dq.pop()</span><br><span class="line">            dq.append(i)</span><br><span class="line">            <span class="keyword">if</span> i - k + <span class="number">1</span> &gt;= <span class="number">0</span>:</span><br><span class="line">                res.append(nums[dq[<span class="number">0</span>]])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a>76. Minimum Window Substring</h3><p>这道题记录出现字母次数，然后知道windows里满足substring的时候再移动<code>duplicate-- dic value maybe &lt; 0</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span><span class="params">(self, s, t)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type t: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># sliding windows</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">or</span> <span class="keyword">not</span> t:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        res = <span class="string">""</span></span><br><span class="line">        dic = dict()</span><br><span class="line">        <span class="comment"># init</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> t:</span><br><span class="line">            dic[char] = dic.get(char, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        l,r = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        minLength = len(s)</span><br><span class="line">        <span class="comment"># windows</span></span><br><span class="line">        size = len(t)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> r &lt; len(s):</span><br><span class="line">            <span class="keyword">if</span> s[r] <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="comment"># duplicate-- dic value maybe &lt; 0</span></span><br><span class="line">                <span class="keyword">if</span> dic[s[r]] &gt; <span class="number">0</span>:</span><br><span class="line">                    size -= <span class="number">1</span></span><br><span class="line">                    </span><br><span class="line">                dic[s[r]] -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># windos</span></span><br><span class="line">            r += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">while</span> size == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> minLength &gt;= r-l:</span><br><span class="line">                    minLength = r-l</span><br><span class="line">                    res = s[l:r]</span><br><span class="line">                    <span class="comment">#t = [l :r]</span></span><br><span class="line">                    </span><br><span class="line">                <span class="comment"># left bound</span></span><br><span class="line">                <span class="keyword">if</span> s[l] <span class="keyword">in</span> dic:</span><br><span class="line">                    dic[s[l]] += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> dic[s[l]] &gt; <span class="number">0</span>:</span><br><span class="line">                        size += <span class="number">1</span></span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TwoPointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String总结</title>
      <link href="/2017/10/24/String%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/24/String%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h3><p>这道题就是用一个Dict来统计字符所出现的index，然后不断计算不重复字符串的长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        useddict = &#123;&#125;</span><br><span class="line">        maxnum,start = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> useddict <span class="keyword">and</span> start &lt;= useddict[s[i]]:</span><br><span class="line">                start = useddict[s[i]] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                maxnum = max(maxnum, i - start + <span class="number">1</span>)</span><br><span class="line">                </span><br><span class="line">            useddict[s[i]]= i</span><br><span class="line">        <span class="keyword">return</span> maxnum</span><br></pre></td></tr></table></figure><h3 id="76-Minimum-Window-Substring"><a href="#76-Minimum-Window-Substring" class="headerlink" title="76. Minimum Window Substring"></a>76. Minimum Window Substring</h3><p>这题和之前的非常像，就是需要处理的边界条件很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minWindow</span><span class="params">(self, s, t)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type t: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> t:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        useddict = defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> t:</span><br><span class="line">            useddict[char] += <span class="number">1</span></span><br><span class="line">        length = len(t)</span><br><span class="line">        minnum,start,end = len(s)+<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        head = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> useddict:</span><br><span class="line">                useddict[s[i]] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> useddict[s[i]]&gt;=<span class="number">0</span>: </span><br><span class="line">                    length -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">while</span> length==<span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> i - start+<span class="number">1</span> &lt; minnum:</span><br><span class="line">                        minnum = i-start+<span class="number">1</span></span><br><span class="line">                        head = start</span><br><span class="line">                    <span class="keyword">if</span> s[start] <span class="keyword">in</span> useddict:</span><br><span class="line">                        useddict[s[start]] += <span class="number">1</span></span><br><span class="line">                        <span class="keyword">if</span> useddict[s[start]] &gt; <span class="number">0</span>: <span class="comment">## more same char was used</span></span><br><span class="line">                            length += <span class="number">1</span></span><br><span class="line">                    start += <span class="number">1</span></span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> s[head:head+minnum] <span class="keyword">if</span> minnum &lt;= len(s) <span class="keyword">else</span> <span class="string">""</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack总结</title>
      <link href="/2017/10/24/Stack%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/24/Stack%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Stack性质"><a href="#Stack性质" class="headerlink" title="Stack性质"></a>Stack性质</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>Stack的定义便是先进后出，在python中用list实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.stack = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, i)</span>:</span></span><br><span class="line">self.stack.append(i)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">if</span> self.stack：</span><br><span class="line"><span class="keyword">return</span> self.stack.pop()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">raise</span>(<span class="string">"Error"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span> self.stack[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h2 id="Basic-题目"><a href="#Basic-题目" class="headerlink" title="Basic 题目"></a>Basic 题目</h2><h3 id="225-Implement-Stack-using-Queues"><a href="#225-Implement-Stack-using-Queues" class="headerlink" title="225. Implement Stack using Queues"></a>225. Implement Stack using Queues</h3><p>只用一个queue，每次append的时候，都要把前面的给pop出来再append进去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.queue = []</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Push element x onto stack.</span></span><br><span class="line"><span class="string">        :type x: int</span></span><br><span class="line"><span class="string">        :rtype: void</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.queue.append(x)</span><br><span class="line">        size = len(self.queue)</span><br><span class="line">        <span class="keyword">while</span> size &gt; <span class="number">1</span>:</span><br><span class="line">            self.queue.append(self.queue.pop(<span class="number">0</span>))</span><br><span class="line">            size -= <span class="number">1</span>      </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.queue.pop(<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Get the top element.</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.queue[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Returns whether the stack is empty.</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> len(self.queue) == <span class="number">0</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="232-Implement-Queue-using-Stacks"><a href="#232-Implement-Queue-using-Stacks" class="headerlink" title="232. Implement Queue using Stacks"></a>232. Implement Queue using Stacks</h3><p>用两个stack来存，输出的时候再全部放入到output的stack中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.input = []</span><br><span class="line">        self.output = []</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        self.input.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.peek()</span><br><span class="line">        <span class="keyword">return</span> self.output.pop()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span>(self.output == []):</span><br><span class="line">            <span class="keyword">while</span>(self.input != []):</span><br><span class="line">                self.output.append(self.input.pop())</span><br><span class="line">        <span class="keyword">return</span> self.output[<span class="number">-1</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.input == [] <span class="keyword">and</span> self.output == []</span><br></pre></td></tr></table></figure><h3 id="20-Valid-Parentheses"><a href="#20-Valid-Parentheses" class="headerlink" title="20. Valid Parentheses"></a>20. Valid Parentheses</h3><p>左边的Parentheses作为key进入,右面的来判断是不是跟顶部的一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char == <span class="string">'('</span>:</span><br><span class="line">                stack.append(<span class="string">')'</span>)</span><br><span class="line">            <span class="keyword">elif</span> char == <span class="string">'['</span>:</span><br><span class="line">                stack.append(<span class="string">']'</span>)</span><br><span class="line">            <span class="keyword">elif</span> char == <span class="string">'&#123;'</span>:</span><br><span class="line">                stack.append(<span class="string">'&#125;'</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> stack <span class="keyword">or</span> char != stack.pop():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure><!--more--><h3 id="42-Trapping-Rain-Water"><a href="#42-Trapping-Rain-Water" class="headerlink" title="42. Trapping Rain Water"></a>42. Trapping Rain Water</h3><p>这道题感觉不是十分好想，需要维持一个stack来进行操作，当遇到新加的元素比栈顶元素大的时候，我们就要比较之前的元素，如果栈里面是有一个，则不能形成坑，continue；不然就比较之前的元素和当前的最小值，减去高度。哎呀，还是需要画图用例子来说比较好</p><blockquote><p>我们的做法是，遍历高度，如果此时栈为空，或者当前高度小于等于栈顶高度，则把当前高度的坐标压入栈，注意我们不直接把高度压入栈，而是把坐标压入栈，这样方便我们在后来算水平距离。当我们遇到比栈顶高度大的时候，就说明有可能会有坑存在，可以装雨水。此时我们栈里至少有一个高度，如果只有一个的话，那么不能形成坑，我们直接跳过，如果多余一个的话，那么此时把栈顶元素取出来当作坑，新的栈顶元素就是左边界，当前高度是右边界，只要取二者较小的，减去坑的高度，长度就是右边界坐标减去左边界坐标再减1，二者相乘就是盛水量啦<br><a href="http://www.cnblogs.com/grandyang/p/4402392.html" target="_blank" rel="noopener">http://www.cnblogs.com/grandyang/p/4402392.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type height: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        size = len(height)</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; size:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack <span class="keyword">or</span> height[i] &lt;= height[stack[<span class="number">-1</span>]]:</span><br><span class="line">                stack.append(i)</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                top = stack.pop()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    res += (min(height[i], height[stack[<span class="number">-1</span>]]) - height[top]) * (i - stack[<span class="number">-1</span>] <span class="number">-1</span>) <span class="comment"># height * width</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="Decreasing-stack"><a href="#Decreasing-stack" class="headerlink" title="Decreasing stack"></a>Decreasing stack</h2><p>递减stack主要是记录数组中第一个比它大的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> stack <span class="keyword">and</span> nums[i] &gt; stack[<span class="number">-1</span>]:</span><br><span class="line">dic[stack.pop()] = nums[i]</span><br><span class="line">stack.append(nums[i])</span><br></pre></td></tr></table></figure><h3 id="496-Next-Greater-Element-I"><a href="#496-Next-Greater-Element-I" class="headerlink" title="496. Next Greater Element I"></a>496. Next Greater Element I</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span><span class="params">(self, findNums, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type findNums: List[int]</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="comment"># to store</span></span><br><span class="line">        dic = dict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> nums[i] &gt; stack[<span class="number">-1</span>]:</span><br><span class="line">                dic[stack.pop()] = nums[i]</span><br><span class="line">            stack.append(nums[i])</span><br><span class="line">        <span class="comment"># deal with last   </span></span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            dic[stack.pop()] = <span class="number">-1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(findNums)):</span><br><span class="line">            res.append(dic[findNums[i]])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="739-Daily-Temperatures"><a href="#739-Daily-Temperatures" class="headerlink" title="739. Daily Temperatures"></a>739. Daily Temperatures</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dailyTemperatures</span><span class="params">(self, temperatures)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type temperatures: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = [<span class="number">0</span>] * len(temperatures)</span><br><span class="line">        stack = []</span><br><span class="line">        left = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(temperatures)):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> temperatures[i] &gt; temperatures[stack[<span class="number">-1</span>]]:</span><br><span class="line">                index = stack.pop()</span><br><span class="line">                res[index] = i - index</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="503-Next-Greater-Element-II"><a href="#503-Next-Greater-Element-II" class="headerlink" title="503. Next Greater Element II"></a>503. Next Greater Element II</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># stack</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElements</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        stack, res = [], [<span class="number">-1</span>] * len(nums)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)) * <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> (nums[stack[<span class="number">-1</span>]] &lt; nums[i]):</span><br><span class="line">                res[stack.pop()] = nums[i]</span><br><span class="line">            stack.append(i)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="316-Remove-Duplicate-Letters"><a href="#316-Remove-Duplicate-Letters" class="headerlink" title="316. Remove Duplicate Letters"></a>316. Remove Duplicate Letters</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicateLetters</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        stack = []</span><br><span class="line">        dic = dict()</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            dic[char] = dic.get(char, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            dic[char] -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> char <span class="keyword">in</span> stack:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> ord(char) &lt; ord(stack[<span class="number">-1</span>]) <span class="keyword">and</span> dic[stack[<span class="number">-1</span>]] &gt; <span class="number">0</span>:</span><br><span class="line">                    stack.pop()</span><br><span class="line">            stack.append(char)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>.join(stack)</span><br></pre></td></tr></table></figure><h2 id="稍难题"><a href="#稍难题" class="headerlink" title="稍难题"></a>稍难题</h2><h3 id="84-Largest-Rectangle-in-Histogram"><a href="#84-Largest-Rectangle-in-Histogram" class="headerlink" title="84. Largest Rectangle in Histogram"></a>84. Largest Rectangle in Histogram</h3><p>维持一个递增stack，碰到一个比栈顶元素小的数，不断比较，更新最大面积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestRectangleArea</span><span class="params">(self, heights)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type heights: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(heights)+<span class="number">1</span>):</span><br><span class="line">            height = heights[i] <span class="keyword">if</span> i!= len(heights) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> height &lt;= heights[stack[<span class="number">-1</span>]]:</span><br><span class="line">                h = heights[stack.pop()]</span><br><span class="line">                w = i - stack[<span class="number">-1</span>] <span class="number">-1</span> <span class="keyword">if</span> stack <span class="keyword">else</span> i</span><br><span class="line">                res = max(res, h*w)</span><br><span class="line">            stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="85-Maximal-Rectangle"><a href="#85-Maximal-Rectangle" class="headerlink" title="85. Maximal Rectangle"></a>85. Maximal Rectangle</h3><p>同样的操作，只是这次是把上一道题的高度，变成矩阵中连续长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalRectangle</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">    <span class="comment"># O(m^2)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># init heights array </span></span><br><span class="line">        height = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="comment"># calculate each row</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="comment"># count next level '1'</span></span><br><span class="line">                height[i] = height[i] + <span class="number">1</span> <span class="keyword">if</span> row[i] == <span class="string">'1'</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">                </span><br><span class="line">            stack = []</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(n + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">while</span> stack <span class="keyword">and</span> height[i] &lt;= height[stack[<span class="number">-1</span>]]:</span><br><span class="line">                    h = height[stack.pop()]</span><br><span class="line">                    <span class="comment"># if not stack means left boundary is zero then width is i else is the stack[-1] index</span></span><br><span class="line">                    w = i - <span class="number">1</span> - stack[<span class="number">-1</span>] <span class="keyword">if</span> stack <span class="keyword">else</span> i</span><br><span class="line">                    ans = max(ans, h * w)</span><br><span class="line">                stack.append(i)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DP总结</title>
      <link href="/2017/10/19/DP%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/19/DP%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>动态规划是通过拆分问题，定义问题状态和状态之间的关系，使得问题能够以递推（或者说分治）的方式去解决。<br>DP问题是Leetcode中的经典问题，也是面试中经常考到的类别之一，没有通用的模版，有些DP题思考的过程也比较繁琐.所以这篇总结可能会不断更新，以便达到更好的效果</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ol><li>找Max， Min的问题</li><li>发现可能性的问题</li><li>输出所有解的个数问题</li></ol><p>不适用场景</p><ol><li>列出所有具体方案（起码是指数级别的复杂度，通常是递归，backtracking）</li><li>集合问题</li></ol><h2 id="考虑"><a href="#考虑" class="headerlink" title="考虑"></a>考虑</h2><ol><li>状态</li><li>转移方程</li><li>初始化条件</li><li>返回结果<a id="more"></a><h1 id="单序列问题"><a href="#单序列问题" class="headerlink" title="单序列问题"></a>单序列问题</h1>通常是数组，字符串的前N个为…</li></ol><h2 id="Warm-Up"><a href="#Warm-Up" class="headerlink" title="Warm Up"></a>Warm Up</h2><h3 id="爬梯子"><a href="#爬梯子" class="headerlink" title="爬梯子"></a>爬梯子</h3><p>作为DP的入门题来说，思考过程还是很重要的。 一次可以爬1级或者两级的台阶，问有多少种爬法。<br>符合输出所有解个数的问题。<br>因为只能爬一级或者两级所以到N级的话，你只能从n-1爬到n或者n-2爬到n；这样说来，如果<code>dp[n]</code>代表到n级台阶有多少种可能性的话，转移方程为<code>dp[n] = dp[n-1]+dp[n-2]</code><br>所以代码很容易写出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">climb</span><span class="params">(n)</span>:</span></span><br><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">dp = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)]</span><br><span class="line">dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">dp[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>,n+<span class="number">1</span>):</span><br><span class="line">dp[i] = dp[i<span class="number">-1</span>]+dp[i<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>当然这道题有优化条件，否则就没有必要花大篇幅写了。通过分析状态转移方程可以发现<code>dp[i]</code>只与<code>dp[i-1],dp[i-2]</code>有关，说明再之前的状态是不会影响到当前状态的，所以我们可以通过只保留两个状态来不断滚动从而求出最后的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> first = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> second = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> third = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = third;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进而我们能看出，如果当前状态只与前面的相关的话，我们都可以通过滚动数组，变量来简化空间复杂度–这种尤其适合不太复杂的动态规划问题，简单的二维DP</p><h3 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a>53. Maximum Subarray</h3><p>找Max问题<br>很容易得出当前局部最大+当前值，和当前值的对比，而从决定是继续加还是从新来过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        dp = [float(<span class="string">'-inf'</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(nums))]</span><br><span class="line"></span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        res = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</span><br><span class="line">            dp[each] = max(dp[each<span class="number">-1</span>]+nums[each], nums[each])</span><br><span class="line">            res = max(res, dp[each])</span><br><span class="line">            <span class="comment">#print dp</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>从上一段分析可以看出，dp状态只与上一个状态有关，从而可以简化成变量来储存dp[]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        prevMax = nums[<span class="number">0</span>]</span><br><span class="line">        res = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> range(<span class="number">1</span>,len(nums)):</span><br><span class="line">            prevMax = max(prevMax+nums[each], nums[each])</span><br><span class="line">            res = max(res, prevMax)</span><br><span class="line">            <span class="comment">#print dp</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="300-Longest-Increasing-Subsequence"><a href="#300-Longest-Increasing-Subsequence" class="headerlink" title="300. Longest Increasing Subsequence"></a>300. Longest Increasing Subsequence</h3><p>找出Max<br>这道题有点不一样的地方是最后的结果有可能是任意一个位置，所以不是简单的<code>return dp[-1]</code>而是<code>max(dp)</code><br><code>dp[i] = 1 + max(dp[j]) j &lt; i and A[i] &gt; A[j]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">1</span>] * (len(nums) + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &lt; nums[i]:</span><br><span class="line">                    dp[i] = max(dp[i], dp[j]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure><h3 id="139-Word-Break"><a href="#139-Word-Break" class="headerlink" title="139.Word Break"></a>139.Word Break</h3><p>寻求解的存在性<br>和上一题有点像，dp[i] 为当前字符满足之前的字符在字典里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordBreak</span><span class="params">(self, s, wordDict)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :type wordDict: List[str]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># dp保存dp【i】i之前的最少字符串</span></span><br><span class="line">        dp = [<span class="literal">False</span>] * (len(s) + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 本身的循环，对字符串，在内层循环中需要使用i</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s)+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                <span class="keyword">if</span> dp[j] <span class="keyword">and</span> s[j:i] <span class="keyword">in</span> wordDict:</span><br><span class="line">                    dp[i] = <span class="literal">True</span> <span class="comment"># 因为j～i是一个回文字符串</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="198-House-Robber"><a href="#198-House-Robber" class="headerlink" title="198. House Robber"></a>198. House Robber</h3><p><code>dp[i] = max(dp[i-2]+A[i], dp[i-1])</code><br>当然一共就3个状态，我们也可以通过类似爬梯子的方式，把空间复杂度降为O（1）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>] </span><br><span class="line">        dp = [<span class="number">0</span>] * len(nums)</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>]</span><br><span class="line">        dp[<span class="number">1</span>] = max(dp[<span class="number">0</span>], nums[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(nums)):</span><br><span class="line">            dp[i] = max(dp[i<span class="number">-2</span>] + nums[i], dp[i<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="303-Range-Sum-Query-Immutable"><a href="#303-Range-Sum-Query-Immutable" class="headerlink" title="303. Range Sum Query - Immutable"></a>303. Range Sum Query - Immutable</h3><p>简单的累加求和做为DP，则转移方程为<code>res(x,y) = dp[y] - dp[x-1]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        self.dp = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            total += i</span><br><span class="line">            self.dp.append(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type i: int</span></span><br><span class="line"><span class="string">        :type j: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> self.dp[j]</span><br><span class="line">        <span class="keyword">return</span> self.dp[j] - self.dp[i<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = NumArray(nums)</span></span><br><span class="line"><span class="comment"># param_1 = obj.sumRange(i,j)</span></span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><h3 id="368-Largest-Divisible-Subset"><a href="#368-Largest-Divisible-Subset" class="headerlink" title="368. Largest Divisible Subset"></a>368. Largest Divisible Subset</h3><p>这道题需要一点思考，除了创建一个DP数组来记录到i位置最长的长度之外，我们还要知道其对应能整除的数字，所以还需要一个array来记录上一个数字的位置。dp的默认值为1， pre的初始值为None就是没有对应的数字；当且仅当dp需要更新的时候，更新其上一个能整除数字的index。最后找出max（dp）所对应的数字，根据其pre的index逐个找数字，输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestDivisibleSubset</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        nums = sorted(nums)</span><br><span class="line">        size = len(nums)</span><br><span class="line">        dp = [<span class="number">1</span>] * size</span><br><span class="line">        pre = [<span class="literal">None</span>] * size</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(size):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(x):</span><br><span class="line">                <span class="keyword">if</span> nums[x] % nums[y] == <span class="number">0</span> <span class="keyword">and</span> dp[y] + <span class="number">1</span> &gt; dp[x]:</span><br><span class="line">                    dp[x] = dp[y] + <span class="number">1</span></span><br><span class="line">                    pre[x] = y</span><br><span class="line">        idx = dp.index(max(dp))</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> idx <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            ans += nums[idx],</span><br><span class="line">            idx = pre[idx]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h3 id="338-Counting-Bits"><a href="#338-Counting-Bits" class="headerlink" title="338. Counting Bits"></a>338. Counting Bits</h3><p>需要熟悉Bit运算和概念，要能发现countbit(n) = countbit(n/2) + n % 2这么一个方程，就是说一个数乘2意味着bit位左移一位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countBits</span><span class="params">(self, num)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type num: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(num+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num+<span class="number">1</span>):</span><br><span class="line">            dp[i] = dp[i&gt;&gt;<span class="number">1</span>] + i%<span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> dp</span><br></pre></td></tr></table></figure><h3 id="264-Ugly-Number-II"><a href="#264-Ugly-Number-II" class="headerlink" title="264. Ugly Number II"></a>264. Ugly Number II</h3><p>用三个dp存2，3，5出现作为乘子的个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nthUglyNumber</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = [<span class="number">1</span>]</span><br><span class="line">        i2, i3, i5 = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            u2, u3, u5 = <span class="number">2</span> *res[i2], <span class="number">3</span>*res[i3], <span class="number">5</span>*res[i5]</span><br><span class="line">            temp = min(u2,u3,u5)</span><br><span class="line">            <span class="keyword">if</span> temp == u2:</span><br><span class="line">                i2 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> temp == u3:</span><br><span class="line">                i3 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> temp == u5:</span><br><span class="line">                i5 += <span class="number">1</span></span><br><span class="line">            res.append(temp)</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">-2</span>]</span><br></pre></td></tr></table></figure><h3 id="673-Number-of-Longest-Increasing-Subsequence"><a href="#673-Number-of-Longest-Increasing-Subsequence" class="headerlink" title="673. Number of Longest Increasing Subsequence"></a>673. Number of Longest Increasing Subsequence</h3><p>相关题目，需要额外数组来记录已经出现最长的次数，也就是说如果前面有多个长度相等的连续子串的话，cnt要一直+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findNumberOfLIS</span><span class="params">(self, nums)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(nums))]</span><br><span class="line">        dc = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(nums))]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> nums[i] &gt; nums[j]:</span><br><span class="line">                    <span class="keyword">if</span> dp[i] &lt; dp[j] + <span class="number">1</span>:</span><br><span class="line">                        dp[i] = dp[j] + <span class="number">1</span></span><br><span class="line">                        dc[i] = dc[j]</span><br><span class="line">                    <span class="keyword">elif</span> dp[i] == dp[j] + <span class="number">1</span>:</span><br><span class="line">                        dc[i] += dc[j] <span class="comment"># we have multiple same length LIS, we need to add them</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(dp):</span><br><span class="line">            <span class="keyword">if</span> value == max(dp):</span><br><span class="line">                res += dc[index]</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown"><a href="#309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" class="headerlink" title="309. Best Time to Buy and Sell Stock with Cooldown"></a>309. Best Time to Buy and Sell Stock with Cooldown</h3><p>这道题一开始确实想不出来，感觉情况太多了；我承认有些DP题就是想不出来怎么做…..后来看到Discuss上有一个解法很不错，就是我们就考虑buy和sell的情况，buy的情况是最大利益只和前一个状态有关或者前两个状态的时候卖，然后这时候买。所以DP的定义就是buy[i] 在i的时候和在i之前买的最大值<br><code>buy[i] = Math.max(buy[i - 1], sell[i - 2] - prices[i]);</code><br>同理，sell的时候也和之前状态有关<br><code>sell[i] = Math.max(sell[i - 1], buy[i - 1] + prices[i]);</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type prices: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> prices <span class="keyword">or</span> len(prices) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># buy[i] = max(buy[i-1], sell[i-2] - prices[i])</span></span><br><span class="line">        <span class="comment"># sell[i] = max(sell[i-1], buy[i-1] + prices[i])</span></span><br><span class="line"></span><br><span class="line">        b0 = -prices[<span class="number">0</span>]</span><br><span class="line">        b1 = b0</span><br><span class="line">        s0 = <span class="number">0</span></span><br><span class="line">        s1 = <span class="number">0</span></span><br><span class="line">        s2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(prices)):</span><br><span class="line">            b1 = max(b0, s0 - prices[i])</span><br><span class="line">            s2 = max(s1, b0 + prices[i])</span><br><span class="line"></span><br><span class="line">            b0 = b1</span><br><span class="line">            s0 = s1</span><br><span class="line">            s1 = s2</span><br><span class="line">        <span class="keyword">return</span> s2</span><br></pre></td></tr></table></figure><h1 id="矩阵DP"><a href="#矩阵DP" class="headerlink" title="矩阵DP"></a>矩阵DP</h1><p>这种问题需要初始化DP数组，第0行和第0列，这样会方便之后的操作，通常这种问题是只能向右或者向下操作，否则则需要用BFS–求最短路径；DFS来解决</p><h2 id="Warm-Up-1"><a href="#Warm-Up-1" class="headerlink" title="Warm Up"></a>Warm Up</h2><h3 id="62-Unique-Paths"><a href="#62-Unique-Paths" class="headerlink" title="62. Unique Paths"></a>62. Unique Paths</h3><p>符合求解的个数问题<br><code>dp[i][j] = dp[i-1][j] + dp[i][j-1]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> m <span class="keyword">or</span> <span class="keyword">not</span> n:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [[<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">                dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>当然我们知道每一个dp状态只与上方或者左方的状态相关，所以可以考虑通过某种方式来保存状态；一种方法是建立一个额外数组来存储列状态，dp变成一维存行状态；不过更进一步的话，每一个dp[i]状态就意味着当前从i行过来的状态总数，这里还是贴图吧，更好理解<img data-src="https://user-images.githubusercontent.com/10191895/31799214-a436210a-b4ed-11e7-8f79-5c0c1cf489d9.JPG" alt="img_6600"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePaths</span><span class="params">(self, m, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type m: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dp = [<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">                dp[j] += dp[j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="63-Unique-Paths-II"><a href="#63-Unique-Paths-II" class="headerlink" title="63.Unique Paths II"></a>63.Unique Paths II</h3><p>初始化首行首列的时候如果有障碍的话，就都变成0了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(self, obstacleGrid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type obstacleGrid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = len(obstacleGrid)</span><br><span class="line">        n = len(obstacleGrid[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span>] * n] * m</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> obstacleGrid[i][j] == <span class="number">1</span>:</span><br><span class="line">                    dp[i][j] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="number">0</span> <span class="keyword">and</span> j == <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> i == <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">elif</span> j == <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j] + dp[i][j<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="64-Minimum-Path-Sum"><a href="#64-Minimum-Path-Sum" class="headerlink" title="64. Minimum Path Sum"></a>64. Minimum Path Sum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type grid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = len(grid)</span><br><span class="line">        n = len(grid[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">0</span>] + grid[i][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            dp[<span class="number">0</span>][j] = dp[<span class="number">0</span>][j<span class="number">-1</span>] + grid[<span class="number">0</span>][j]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">                dp[i][j] = min(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]) + grid[i][j]</span><br><span class="line">        <span class="comment">#print dp</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><p>题目变成了正方形，逐层扩展的时候要记录，每一列计算之前要加上第0行第j列的值，所以沿用上一题的图，dp[i] = dp[i]–上方的值+ dp[i-1] – 左方的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minPathSum</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type grid: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = len(grid)</span><br><span class="line">        n = len(grid[<span class="number">0</span>])</span><br><span class="line">        dp = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + grid[i][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">0</span>] + grid[<span class="number">0</span>][j]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m):</span><br><span class="line">                dp[i] = min(dp[i], dp[i<span class="number">-1</span>]) + grid[i][j]</span><br><span class="line">        <span class="comment">#print dp</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="256-Paint-House"><a href="#256-Paint-House" class="headerlink" title="256. Paint House"></a>256. Paint House</h3><p>由于每次喷涂的房子颜色不能与之前的相同，所以转移方程为<code>dp[i][2] += min(dp[i-1][0], dp[i-1][1])</code> dp为costs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minCost</span><span class="params">(self, costs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type costs: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> costs:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        length = len(costs)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">            costs[i][<span class="number">0</span>] += min(costs[i<span class="number">-1</span>][<span class="number">1</span>],costs[i<span class="number">-1</span>][<span class="number">2</span>])</span><br><span class="line">            costs[i][<span class="number">1</span>] += min(costs[i<span class="number">-1</span>][<span class="number">0</span>],costs[i<span class="number">-1</span>][<span class="number">2</span>])</span><br><span class="line">            costs[i][<span class="number">2</span>] += min(costs[i<span class="number">-1</span>][<span class="number">0</span>],costs[i<span class="number">-1</span>][<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> min(costs[length<span class="number">-1</span>][<span class="number">0</span>], costs[length<span class="number">-1</span>][<span class="number">1</span>], costs[length<span class="number">-1</span>][<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="276-Paint-Fence"><a href="#276-Paint-Fence" class="headerlink" title="276. Paint Fence"></a>276. Paint Fence</h3><p>这道题其实跟上一道题很像，但是每一次涂得颜色可以和上一个一样（连续的颜色最多出现两次），所以当前状态与前两个有关，可以和前两个状态其中任何一个颜色一样 <code>dp[2] = (k-1) * (dp[0] + dp[1]), dp = [k, k*k, 0]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numWays</span><span class="params">(self, n, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>: <span class="keyword">return</span> k</span><br><span class="line"></span><br><span class="line">        <span class="comment"># for the first 2 posts</span></span><br><span class="line">        dp = [k, k*k, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</span><br><span class="line">            dp[<span class="number">2</span>] = (k<span class="number">-1</span>) * (dp[<span class="number">0</span>] + dp[<span class="number">1</span>])</span><br><span class="line">            dp[<span class="number">0</span>] = dp[<span class="number">1</span>]</span><br><span class="line">            dp[<span class="number">1</span>] = dp[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="174-Dungeon-Game"><a href="#174-Dungeon-Game" class="headerlink" title="174. Dungeon Game"></a>174. Dungeon Game</h3><p>最主要的区别是，要从后往前找，由于生命最少为1，所以DP的条件也要相应变一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculateMinimumHP</span><span class="params">(self, dungeon)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type dungeon: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m = len(dungeon)</span><br><span class="line">        n = len(dungeon[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">                <span class="keyword">if</span> i == m<span class="number">-1</span> <span class="keyword">and</span> j == n<span class="number">-1</span>:</span><br><span class="line">                    dp[i][j] = max(<span class="number">1</span>, <span class="number">1</span> - dungeon[i][j])</span><br><span class="line">                <span class="keyword">elif</span> i == m<span class="number">-1</span>:</span><br><span class="line">                    dp[i][j] = max(<span class="number">1</span>, dp[i][j+<span class="number">1</span>] - dungeon[i][j])</span><br><span class="line">                <span class="keyword">elif</span> j == n<span class="number">-1</span>:</span><br><span class="line">                    dp[i][j] = max(<span class="number">1</span>, dp[i+<span class="number">1</span>][j] - dungeon[i][j])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = max(<span class="number">1</span>, min(dp[i+<span class="number">1</span>][j], dp[i][j+<span class="number">1</span>]) - dungeon[i][j])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><h3 id="651-4-Keys-Keyboard"><a href="#651-4-Keys-Keyboard" class="headerlink" title="651. 4 Keys Keyboard"></a>651. 4 Keys Keyboard</h3><p>这道题想了半天，发现最后还是举例子最好；在6个操作内，只有A的操作是最大的，之后的话dp[i] = dp[j] * (i-j-1), 比如i==7， j==1的时候，最后是A * 7-1-1 = 5A</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxA</span><span class="params">(self, N)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type N: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> N &lt;= <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">return</span> N</span><br><span class="line">        dp = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(N+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>,N+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i<span class="number">-2</span>):</span><br><span class="line">                dp[i] = max(dp[i], dp[j] * (i-j<span class="number">-1</span>))</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="304-Range-Sum-Query-2D-Immutable"><a href="#304-Range-Sum-Query-2D-Immutable" class="headerlink" title="304. Range Sum Query 2D - Immutable"></a>304. Range Sum Query 2D - Immutable</h3><p>这道题最关键的是处理corner case</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumMatrix</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        m = len(matrix)</span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># deal with zero row and column</span></span><br><span class="line">        self.dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">                self.dp[i][j] = matrix[i<span class="number">-1</span>][j<span class="number">-1</span>] + self.dp[i<span class="number">-1</span>][j] + self.dp[i][j<span class="number">-1</span>] - self.dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRegion</span><span class="params">(self, row1, col1, row2, col2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type row1: int</span></span><br><span class="line"><span class="string">        :type col1: int</span></span><br><span class="line"><span class="string">        :type row2: int</span></span><br><span class="line"><span class="string">        :type col2: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.dp[row2+<span class="number">1</span>][col2+<span class="number">1</span>] - self.dp[row2+<span class="number">1</span>][col1]- self.dp[row1][col2+<span class="number">1</span>] + self.dp[row1][col1]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your NumMatrix object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = NumMatrix(matrix)</span></span><br><span class="line"><span class="comment"># param_1 = obj.sumRegion(row1,col1,row2,col2)</span></span><br></pre></td></tr></table></figure><h3 id="221-Maximal-Square"><a href="#221-Maximal-Square" class="headerlink" title="221. Maximal Square"></a>221. Maximal Square</h3><p>可行的解法是很巧妙的：以这个square的最右下角的位置作为存储点f(i, j),当matrix(i, j)是1的时候，f(i, j) = min{f(i - 1, j - 1), f(i - 1, j), f(i, j -1)} + 1. 这是因为如果这是一个square，那么构成这个square的最基本条件就是跟它相邻的边的最小所在square.所以一个square的f值如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximalSquare</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        m = len(matrix)</span><br><span class="line">        n = len(matrix[<span class="number">0</span>])</span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(m+<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,m+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> matrix[i<span class="number">-1</span>][j<span class="number">-1</span>] == <span class="string">'1'</span>:</span><br><span class="line"></span><br><span class="line">                    dp[i][j] = min(dp[i<span class="number">-1</span>][j<span class="number">-1</span>], dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]) + <span class="number">1</span></span><br><span class="line">                    res = max(res, dp[i][j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res * res</span><br></pre></td></tr></table></figure><h2 id="二维DP"><a href="#二维DP" class="headerlink" title="二维DP"></a>二维DP</h2><h3 id="72-Edit-Distance"><a href="#72-Edit-Distance" class="headerlink" title="72. Edit Distance"></a>72. Edit Distance</h3><p>这道题是一道经典问题，分为之下三个操作，我觉得以下的解释是最好的<br>a) 插入一个字符：word1[0:i] -&gt; word2[0:j-1]，然后在word1[0:i]后插入word2[j]<br>DP[i+1][j+1] = DP[i+1][j]+1</p><p>b) 删除一个字符：word1[0:i-1] -&gt; word2[0:j]，然后删除word1[i]<br>DP[i+1][j+1] = DP[i][j+1]+1</p><p>c) 替换一个字符：word1[0:i-1] -&gt; word2[0:j-1]<br>word1[i] != word2[j]时，word1[i] -&gt; word2[j]：DP[i+1][j+1] = DP[i][j] + 1<br>word1[i] == word2[j]时：DP[i+1][j+1] = DP[i][j]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDistance</span><span class="params">(self, word1, word2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type word1: str</span></span><br><span class="line"><span class="string">        :type word2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        l1 = len(word1)+<span class="number">1</span></span><br><span class="line">        l2 = len(word2) + <span class="number">1</span></span><br><span class="line">        dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(l2)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(l1)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(l1):</span><br><span class="line">            dp[i][<span class="number">0</span>] = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(l2):</span><br><span class="line">            dp[<span class="number">0</span>][j] = j</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,l1):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,l2):</span><br><span class="line">                <span class="keyword">if</span> word1[i<span class="number">-1</span>] == word2[j<span class="number">-1</span>]:</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp[i][j] = min(dp[i][j<span class="number">-1</span>],dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j<span class="number">-1</span>]) + <span class="number">1</span></span><br><span class="line">        <span class="comment">#print dp</span></span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">-1</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Indeed面试总结</title>
      <link href="/2017/10/19/Indeed%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>/2017/10/19/Indeed%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>HR联系-&gt; 确认电话面试时间-&gt; 电话面试 -&gt; 后续跟进（move on fail）<br>Data Engineer</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>易梦前尘前辈的地里帖子 <a href="http://www.1point3acres.com/bbs/thread-223228-1-1.html" target="_blank" rel="noopener">链接</a></li><li>Github总结 [链接] (<a href="https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed" target="_blank" rel="noopener">https://github.com/shi-edward/Company-Algorithm-Solution/tree/master/src/indeed</a>)<a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1>当时根据地里的总结了一下题目，但是电话面试的时候还是出了一道我似乎见过的但是没有复习到题目，直接给出了brute force解，优化的时候有点紧张就没有答上来….就最后跪了<h2 id="UnrolledLinked-List"><a href="#UnrolledLinked-List" class="headerlink" title="UnrolledLinked List"></a>UnrolledLinked List</h2></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, array)</span>:</span></span><br><span class="line">self.array = array</span><br><span class="line">self.len = len(self.array)</span><br><span class="line"><span class="keyword">while</span> len(self.array) &lt; <span class="number">5</span>:</span><br><span class="line">self.array.append(<span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, head)</span>:</span></span><br><span class="line">self.head = head</span><br><span class="line">self.next = <span class="literal">None</span></span><br><span class="line">self.len = head.len</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(head, index)</span>:</span></span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">cur = head</span><br><span class="line"><span class="keyword">while</span> cur <span class="keyword">and</span> index:</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="number">5</span>: <span class="comment"># cur.len</span></span><br><span class="line">index -= <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> cur.head.array[index]</span><br><span class="line">cur = cur.next</span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(head, index, char)</span>:</span></span><br><span class="line"><span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">cur = head</span><br><span class="line"><span class="keyword">while</span> cur <span class="keyword">and</span> index:</span><br><span class="line"><span class="keyword">if</span> index &gt;= <span class="number">5</span>:</span><br><span class="line">index -= <span class="number">5</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> cur.len == <span class="number">5</span>:</span><br><span class="line">newNode = Node([cur.head.array[<span class="number">-1</span>]])</span><br><span class="line">newlist = LinkedList(newNode)</span><br><span class="line">cur.head.array[<span class="number">4</span>] = char</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">length = cur.len</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length+<span class="number">1</span>,index,<span class="number">-1</span>):</span><br><span class="line">cur.head.array[i] = cur.head.array[i<span class="number">-1</span>]</span><br><span class="line">cur.head.array[index] = char</span><br><span class="line"><span class="keyword">return</span> cur.head.array</span><br><span class="line"><span class="comment">#break</span></span><br><span class="line">prev = cur</span><br><span class="line">cur = cur.next</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> cur:</span><br><span class="line">node = Node([char])</span><br><span class="line"></span><br><span class="line">newlist = LinkedList(node)</span><br><span class="line">prev.next = newlist</span><br><span class="line"><span class="keyword">return</span> newlist.head.array</span><br><span class="line"><span class="comment">#return cur.head.array</span></span><br><span class="line">n1 = Node([<span class="string">'a'</span>,<span class="string">'t'</span>,<span class="string">'y'</span>])</span><br><span class="line">n2 = Node([<span class="string">'r'</span>,<span class="string">'i'</span>,<span class="string">'p'</span>])</span><br><span class="line">l1 = LinkedList(n1)</span><br><span class="line">l2 = LinkedList(n2)</span><br><span class="line">l1.next = l2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> get(l1, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> insert(l1,<span class="number">1</span>,<span class="string">'c'</span>)</span><br></pre></td></tr></table></figure><h2 id="Dice-Sum"><a href="#Dice-Sum" class="headerlink" title="Dice Sum"></a>Dice Sum</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># O(6*m)</span></span><br><span class="line"><span class="comment"># O(mn)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(dice, target, memo)</span>:</span></span><br><span class="line">res = <span class="number">0</span></span><br><span class="line"><span class="comment"># base case</span></span><br><span class="line"><span class="keyword">if</span> dice == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> target == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> target &gt; <span class="number">6</span> * dice <span class="keyword">or</span> target &lt; dice:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> memo[dice][target]:</span><br><span class="line"><span class="keyword">return</span> memo[dice][target]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">7</span>):</span><br><span class="line">res += helper(dice<span class="number">-1</span>, target-i, memo)</span><br><span class="line"></span><br><span class="line">memo[dice][target] = res</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dicesum</span><span class="params">(dice, target)</span>:</span></span><br><span class="line"><span class="comment"># dice --- number of dice</span></span><br><span class="line"><span class="comment"># target --- int</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># base case</span></span><br><span class="line"><span class="keyword">if</span> dice &lt; <span class="number">1</span> <span class="keyword">or</span> target &lt; dice <span class="keyword">or</span> target &gt; <span class="number">6</span>* dice:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.0</span></span><br><span class="line">total = int(math.pow(<span class="number">6</span>,dice))</span><br><span class="line"></span><br><span class="line">memo = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(target+<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> range(dice+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">count = helper(dice, target, memo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> float(count) / total</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> dicesum(<span class="number">2</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h2 id="Expire-Time"><a href="#Expire-Time" class="headerlink" title="Expire Time"></a>Expire Time</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">expireDict</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">self.key = <span class="string">""</span></span><br><span class="line">self.value = <span class="string">""</span></span><br><span class="line">self.regular_dict = dict()</span><br><span class="line">self.ordered_dict = OrderedDict()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, key, value,duration)</span>:</span></span><br><span class="line">self.regular_dict[key] = value</span><br><span class="line">ticks = time.time()</span><br><span class="line">self.ordered_dict[str(ticks+duration)] = key</span><br><span class="line">self.check()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, key)</span>:</span></span><br><span class="line">self.check()</span><br><span class="line"><span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.regular_dict:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> self.regular_dict[key]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self)</span>:</span></span><br><span class="line">ticks = time.time()</span><br><span class="line"><span class="keyword">for</span> timestamp <span class="keyword">in</span> self.ordered_dict:</span><br><span class="line">key = self.ordered_dict[timestamp]</span><br><span class="line"><span class="keyword">if</span> ticks - float(timestamp) &gt; <span class="number">0</span>:</span><br><span class="line"><span class="keyword">del</span>(self.ordered_dict[timestamp])</span><br><span class="line"><span class="keyword">del</span>(self.regular_dict[key])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># T = expireDict()</span></span><br><span class="line"><span class="comment"># T.put('A',100,1)</span></span><br><span class="line"><span class="comment"># time.sleep(0.6)</span></span><br><span class="line"><span class="comment"># print T.ordered_dict</span></span><br><span class="line"><span class="comment"># T.put('B',200,1)</span></span><br><span class="line"><span class="comment"># time.sleep(0.6)</span></span><br><span class="line"><span class="comment"># print T.ordered_dict</span></span><br><span class="line"><span class="comment"># T.put('C',300,1)</span></span><br><span class="line"><span class="comment"># time.sleep(0.1)</span></span><br><span class="line"><span class="comment"># print T.ordered_dict</span></span><br><span class="line"><span class="comment"># T.put('D',400,1)</span></span><br><span class="line"><span class="comment"># time.sleep(0.1)</span></span><br><span class="line"><span class="comment"># print T.ordered_dict</span></span><br><span class="line"><span class="comment"># print T.get('D')</span></span><br><span class="line"><span class="comment"># print T.ordered_dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print T.get('A')</span></span><br></pre></td></tr></table></figure><h2 id="Find-Peak-Element"><a href="#Find-Peak-Element" class="headerlink" title="Find Peak Element"></a>Find Peak Element</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findPeakElement</span><span class="params">(nums)</span>:</span></span><br><span class="line"><span class="comment"># O (lgN)</span></span><br><span class="line"><span class="comment"># O(1)</span></span><br><span class="line">l = <span class="number">0</span></span><br><span class="line">r = len(nums) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> l &lt; r :</span><br><span class="line">mid = l + (r - l) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[mid] &gt; nums[mid+<span class="number">1</span>]:</span><br><span class="line">r = mid</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">l = mid + <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line"><span class="keyword">print</span> findPeakElement([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h2 id="Git-relate-question"><a href="#Git-relate-question" class="headerlink" title="Git relate question"></a>Git relate question</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GitNode</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="string">"""docstring for ClassName"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,id, parent)</span>:</span></span><br><span class="line">self.id = id</span><br><span class="line">self.parent = parent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findAllCommits</span><span class="params">(node)</span>:</span></span><br><span class="line">res = []</span><br><span class="line">queue = [node]</span><br><span class="line">visited = set()</span><br><span class="line">visited.add(node.id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">cur = queue.pop(<span class="number">0</span>)</span><br><span class="line">res.append(cur.id)</span><br><span class="line"><span class="keyword">for</span> par <span class="keyword">in</span> cur.parent:</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> par.id <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">queue.append(par)</span><br><span class="line">visited.add(par.id)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">g1 = GitNode(<span class="number">1</span>,[])</span><br><span class="line">g2 = GitNode(<span class="number">2</span>,[g1])</span><br><span class="line">g3 = GitNode(<span class="number">3</span>,[g2])</span><br><span class="line">g4 = GitNode(<span class="number">4</span>,[g1])</span><br><span class="line"><span class="keyword">print</span> findAllCommits(g3)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findLCA</span><span class="params">(node1, node2)</span>:</span></span><br><span class="line"><span class="comment"># O(V+E)</span></span><br><span class="line"><span class="comment"># visit every node and for each node needs to visit each edge</span></span><br><span class="line"><span class="comment"># O(N)</span></span><br><span class="line"><span class="comment"># create queue, each node enter</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">or</span> <span class="keyword">not</span> node2:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">queue1 = [node1]</span><br><span class="line">queue2 = [node2]</span><br><span class="line"></span><br><span class="line">set1 = set()</span><br><span class="line">set1.add(node1.id)</span><br><span class="line">set2 = set()</span><br><span class="line">set2.add(node2.id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue1 <span class="keyword">and</span> queue2:</span><br><span class="line">size1 = len(queue1)</span><br><span class="line">size2 = len(queue2)</span><br><span class="line"><span class="keyword">while</span> size1:</span><br><span class="line">cur = queue1.pop(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> cur.id <span class="keyword">in</span> set2:</span><br><span class="line"><span class="keyword">return</span> cur.id</span><br><span class="line">set1.add(cur.id)</span><br><span class="line"><span class="keyword">for</span> par <span class="keyword">in</span> cur.parent:</span><br><span class="line">queue1.append(par)</span><br><span class="line">set1.add(par.id)</span><br><span class="line">size1 -= <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> size2:</span><br><span class="line">cur = queue2.pop(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> cur.id <span class="keyword">in</span> set1:</span><br><span class="line"><span class="keyword">return</span> cur.id</span><br><span class="line">set2.add(cur.id)</span><br><span class="line"><span class="keyword">for</span> par <span class="keyword">in</span> cur.parent:</span><br><span class="line">queue2.append(par)</span><br><span class="line">set2.add(par.id)</span><br><span class="line">size2 -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> findLCA(g2, g4)</span><br></pre></td></tr></table></figure><h2 id="Merge-List"><a href="#Merge-List" class="headerlink" title="Merge List"></a>Merge List</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type l1: ListNode</span></span><br><span class="line"><span class="string">        :type l2: ListNode</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(N)</span></span><br><span class="line">        <span class="comment"># O(1)</span></span><br><span class="line">        dummy = ListNode(<span class="number">-1</span>)</span><br><span class="line">        curr = dummy</span><br><span class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">            <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">                curr.next = l1</span><br><span class="line">                l1 = l1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr.next = l2</span><br><span class="line">                l2 = l2.next</span><br><span class="line">            curr = curr.next</span><br><span class="line">        <span class="keyword">if</span> l1:</span><br><span class="line">            curr.next = l1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            curr.next = l2</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeKLists</span><span class="params">(self, lists)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type lists: List[ListNode]</span></span><br><span class="line"><span class="string">        :rtype: ListNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(Nlogk)</span></span><br><span class="line">        <span class="comment"># O(N)</span></span><br><span class="line">        dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">        curr = dummy</span><br><span class="line">        pq = []</span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">            <span class="keyword">if</span> node: <span class="comment">## empty</span></span><br><span class="line">                heapq.heappush(pq,(node.val, node))</span><br><span class="line">        <span class="keyword">while</span> pq:</span><br><span class="line">            curr.next = heapq.heappop(pq)[<span class="number">1</span>]</span><br><span class="line">            curr = curr.next</span><br><span class="line">            <span class="keyword">if</span> curr.next:</span><br><span class="line">                heapq.heappush(pq,(curr.next.val, curr.next))</span><br><span class="line">        <span class="keyword">return</span> dummy.next</span><br></pre></td></tr></table></figure><h2 id="Range-Summary"><a href="#Range-Summary" class="headerlink" title="Range Summary"></a>Range Summary</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangePrint</span><span class="params">(nums)</span>:</span></span><br><span class="line"><span class="comment"># O(n)</span></span><br><span class="line"><span class="comment"># O(1)</span></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">ori = <span class="number">0</span></span><br><span class="line">preVal = nums[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line"><span class="keyword">if</span> nums[i] == preVal+<span class="number">1</span>:</span><br><span class="line">preVal = nums[i]</span><br><span class="line"><span class="keyword">if</span> nums[i] == preVal:</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> i - ori == <span class="number">1</span>:</span><br><span class="line">res.append(str(nums[ori]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">if</span> nums[ori] == preVal:</span><br><span class="line">res.append(str(nums[ori]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">temp = str(nums[ori]) + <span class="string">"-&gt;"</span> + str(preVal)</span><br><span class="line">res.append(temp)</span><br><span class="line">ori = i</span><br><span class="line">preVal = nums[i]</span><br><span class="line"><span class="keyword">if</span> ori +<span class="number">1</span> != len(nums):</span><br><span class="line">res.append(str(ori)+<span class="string">"-&gt;"</span>+str(nums[<span class="number">-1</span>]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res.append(str(nums[<span class="number">-1</span>]))</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> rangePrint([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">11</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rangesummary2</span><span class="params">(nums)</span>:</span></span><br><span class="line"><span class="comment"># O(nlgn)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(nums, l, r)</span>:</span></span><br><span class="line"><span class="keyword">while</span> l +<span class="number">1</span> &lt; r:</span><br><span class="line">m = (l+r)/<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> nums[m] - nums[l] == m - l:</span><br><span class="line">l = m</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">r = m</span><br><span class="line"><span class="keyword">return</span> l</span><br><span class="line">res = []</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; len(nums):</span><br><span class="line">k = helper(nums, i, len(nums))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i != k:</span><br><span class="line">res.append(str(nums[i])+<span class="string">"-&gt;"</span>+str(nums[k]))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res.append(str(nums[i]))</span><br><span class="line">i = k+<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">print</span> rangesummary2([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure><h2 id="Rearrange-Lists"><a href="#Rearrange-Lists" class="headerlink" title="Rearrange Lists"></a>Rearrange Lists</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ["a", "b", "c", "a", "a", "b"] -&gt; [ ["a", "b", "c"], ["a", "b"], ["a"] ]</span></span><br><span class="line"><span class="comment"># This is not a unique solution; [ ["a", "b"], ["a", "b"], ["a", "c"] ] would also be a valid output. You only need to return one valid output.</span></span><br><span class="line"><span class="comment"># Order does not matter in any way for either the input or the output.</span></span><br><span class="line"><span class="comment"># Your solution should minimize the number of inner lists.</span></span><br><span class="line"><span class="comment"># For example:</span></span><br><span class="line"><span class="comment"># [ ["a"], ["a"], ["b"] ] would not be a correct solution for ["a", "a", "b"].</span></span><br><span class="line"><span class="comment"># The correct solution would be [ ["a", "b"], ["a"] ]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># rearrange the strings into a list of lists of strings where each inner list contains no duplicates</span></span><br><span class="line"><span class="comment"># ["a", "b", "c", "a", "a", "b"] -&gt; [ ["a", "b", "c"], ["a", "b"], ["a"] ]</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(s)</span>:</span></span><br><span class="line">res = [[]]</span><br><span class="line">index = [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">26</span>)]</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line"><span class="keyword">if</span> len(res) &lt;=index[ord(char) - <span class="number">97</span>]:</span><br><span class="line">temp = []</span><br><span class="line">res.append(temp)</span><br><span class="line">res[index[ord(char) - <span class="number">97</span>]].append(char)</span><br><span class="line">index[ord(char) - <span class="number">97</span>] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"><span class="keyword">print</span> func([<span class="string">"a"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>])</span><br></pre></td></tr></table></figure><h2 id="Reverse-String"><a href="#Reverse-String" class="headerlink" title="Reverse String"></a>Reverse String</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_a_string_more_slowly</span><span class="params">(a_string)</span>:</span></span><br><span class="line">    new_strings = []</span><br><span class="line">    index = len(a_string)</span><br><span class="line">    <span class="keyword">while</span> index:</span><br><span class="line">        index -= <span class="number">1</span></span><br><span class="line">        new_strings.append(a_string[index])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(new_strings)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_a_string_slowly</span><span class="params">(a_string)</span>:</span></span><br><span class="line">    new_string = <span class="string">''</span></span><br><span class="line">    index = len(a_string)</span><br><span class="line">    <span class="keyword">while</span> index:</span><br><span class="line">        index -= <span class="number">1</span>                    <span class="comment"># index = index - 1</span></span><br><span class="line">        new_string += a_string[index] <span class="comment"># new_string = new_string + character</span></span><br><span class="line">    <span class="keyword">return</span> new_string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseWords</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type s: str</span></span><br><span class="line"><span class="string">    :rtype: str</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    li = s.strip().split()</span><br><span class="line">    <span class="keyword">print</span> li</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> range(len(li)<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">        res.append(li[each])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">' '</span>.join(res)</span><br><span class="line"><span class="keyword">print</span> reverseWords(<span class="string">'  a  b '</span>)</span><br></pre></td></tr></table></figure><h2 id="shortest-word-distance"><a href="#shortest-word-distance" class="headerlink" title="shortest word distance"></a>shortest word distance</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestDistance1</span><span class="params">(self, words, word1, word2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :type word1: str</span></span><br><span class="line"><span class="string">        :type word2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(n)</span></span><br><span class="line">        <span class="comment"># O(1)</span></span><br><span class="line">        p1, p2 = <span class="number">-1</span>, <span class="number">-1</span></span><br><span class="line">        res = len(words)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words)):</span><br><span class="line">            <span class="keyword">if</span> words[i] == word1:</span><br><span class="line">                p1 = i</span><br><span class="line">            <span class="keyword">if</span> words[i] == word2:</span><br><span class="line">                p2 = i</span><br><span class="line">            <span class="keyword">if</span> p1!=<span class="number">-1</span> <span class="keyword">and</span> p2 != <span class="number">-1</span>:</span><br><span class="line">                temp = abs(p1-p2)</span><br><span class="line">                res = min(res, temp)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestWordDistance3</span><span class="params">(self, words, word1, word2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        :type word1: str</span></span><br><span class="line"><span class="string">        :type word2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(n)</span></span><br><span class="line">        <span class="comment"># O(1)</span></span><br><span class="line">        p1, p2 = -len(words), <span class="number">-1</span></span><br><span class="line">        res = len(words)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words)):</span><br><span class="line">            <span class="keyword">if</span> word1 != word2:</span><br><span class="line">                <span class="keyword">if</span> words[i] == word1:</span><br><span class="line">                    p1 = i</span><br><span class="line">                <span class="keyword">if</span> words[i] == word2:</span><br><span class="line">                    p2 = i</span><br><span class="line">                <span class="keyword">if</span> p1!=<span class="number">-1</span> <span class="keyword">and</span> p2 != <span class="number">-1</span>:</span><br><span class="line">                    temp = abs(p1-p2)</span><br><span class="line">                    res = min(res, temp)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> words[i] == word1:</span><br><span class="line">                    res = min(res, abs(p1 - i))</span><br><span class="line">                    p1 = i</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordDistance</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, words)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type words: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.map = defaultdict(list)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words)):</span><br><span class="line">            self.map[words[i]] += [i]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortest</span><span class="params">(self, word1, word2)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type word1: str</span></span><br><span class="line"><span class="string">        :type word2: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># O(n)</span></span><br><span class="line">        <span class="comment"># O(n)</span></span><br><span class="line">        l1 = self.map[word1]</span><br><span class="line">        l2 = self.map[word2]</span><br><span class="line">        <span class="keyword">if</span> l1[<span class="number">0</span>]&gt;l2[<span class="number">0</span>]:</span><br><span class="line">            l1,l2 = l2, l1</span><br><span class="line">        p1 = <span class="number">0</span></span><br><span class="line">        p2 = <span class="number">0</span></span><br><span class="line">        res = float(<span class="string">'inf'</span>)</span><br><span class="line">        <span class="keyword">while</span> p1 &lt; len(l1) <span class="keyword">and</span> p2 &lt; len(l2):</span><br><span class="line">            temp = abs(l1[p1]- l2[p2])</span><br><span class="line">            res = min(temp, res)</span><br><span class="line">            <span class="keyword">if</span> l1[p1] &lt; l2[p2]:</span><br><span class="line">                p1 +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p2 += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your WordDistance object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = WordDistance(words)</span></span><br><span class="line"><span class="comment"># param_1 = obj.shortest(word1,word2)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Indeed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opinion about Love</title>
      <link href="/2017/10/19/Opinion-about-Love/"/>
      <url>/2017/10/19/Opinion-about-Love/</url>
      
        <content type="html"><![CDATA[<h1 id="浅谈一下爱情的看法"><a href="#浅谈一下爱情的看法" class="headerlink" title="浅谈一下爱情的看法"></a>浅谈一下爱情的看法</h1><p>奢侈品，想买就要付出高昂代价，不买也不会死。许多人梦寐以求却得不到，因此市面上假货水货很多。奢侈品，如果能拥有，确实是好东西。</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>湾区吃喝玩乐推荐</title>
      <link href="/2017/09/25/bayarea-entertainment-guide/"/>
      <url>/2017/09/25/bayarea-entertainment-guide/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><blockquote><p>Update (2019/01) 大幅更新了本文。<br>本文没有考虑的：滑雪系列，开飞机跳伞潜水，海钓，露营</p></blockquote><h1 id="郊野"><a href="#郊野" class="headerlink" title="郊野"></a>郊野</h1><h2 id="赏花"><a href="#赏花" class="headerlink" title="赏花"></a>赏花</h2><ol><li>[   ] <a href="https://filoli.org/" target="_blank" rel="noopener">Filoli Garden</a> (位于Woodside，以🌷出名，推荐时节：三月)</li><li>[   ] <a href="http://http://goblossomtrail.com/" target="_blank" rel="noopener">Blossom trail</a> (位于Fresno，displays of blooming fruit trees &amp; wildflowers. 推荐时节：2～3月)</li></ol><h2 id="Hiking"><a href="#Hiking" class="headerlink" title="Hiking"></a>Hiking</h2><ol><li>[ x ] <a href="https://www.travelyosemite.com/" target="_blank" rel="noopener"><strong>Yosemite</strong></a> (瀑布观赏时节 5月至10月)</li><li>[ x ] Skyline Blvd （适合自驾观赏）</li><li>[ x ] Muir Woods National Monument (从18年起，需要提前注册车辆并且乘坐shuttle门口)</li><li>[ x ] Lick Observatory (在CA-130，Mt Hamilton的山顶上，需要至少45分钟的盘山路）</li><li>[ x ] Mt Diablo</li><li>[ x ] Sierra Vista Point</li><li>[   ] CA-120 Mono Lake （CA-120会有半年的大雪封山状况）</li><li>[ x ] Big Basin Redwoods State Park (多种多样的路线)</li><li>[ x ] Lassen National Forest (火山公园)</li><li>[   ] Kings Canyon National Park</li><li>[   ] Death Valley National Park</li></ol><a id="more"></a><h2 id="海峡海滩"><a href="#海峡海滩" class="headerlink" title="海峡海滩"></a>海峡海滩</h2><ol><li>[ x ] <strong>Point Reyes National Seashore</strong> <a href="https://medium.com/@maggiema1981/%E9%9B%B7%E6%96%AF%E5%B2%AC%E4%B8%80%E6%97%A5%E6%B8%B8%E7%9A%84%E8%A1%8C%E7%A8%8B-%E5%8E%BBtomales-bay%E5%90%83%E7%94%9F%E8%9A%9D%E5%95%A6-dd6c396f057f" target="_blank" rel="noopener">攻略</a></li><li>[ x ] Point Bonita Lighthouse</li><li>[ x ] Pacifica (Surfing初学者的好地方)</li><li>[ x ] Half Moon Bay (最佳观赏地点可能是在Ritz旁边)</li><li>[ x ] Pigeon Point Lighthouse</li><li>[ x ] Santa Cruz (难得的沙滩)</li><li>[   ] Alamere Falls</li><li>[ x ] Carmel Beach</li></ol><h1 id="城镇"><a href="#城镇" class="headerlink" title="城镇"></a>城镇</h1><blockquote><p>这些是我觉得可以逛一天放松心情的</p></blockquote><ol><li>[ x ] Napa</li><li>[ x ] Los Gatos</li><li>[ x ] Monterey</li><li>[ x ] <strong>Carmel-By-The-Sea</strong></li><li>[ x ] Belvedere Tiburon</li></ol><h1 id="美食"><a href="#美食" class="headerlink" title="美食"></a>美食</h1><blockquote><p>只推荐评价我吃过的（e.g. Napa作为大湾区米其林星级餐厅的聚集地，我一个都没吃过…）<br>另,基本上中餐对单人觅食者不友好</p></blockquote><h2 id="Napa-and-North-Bay"><a href="#Napa-and-North-Bay" class="headerlink" title="Napa and North Bay"></a>Napa and North Bay</h2><ol><li>[ x ] <strong>Bouchon Bakery</strong>, Napa (值得一去的烘焙坊)</li><li>[ x ] Caffē Acri, Tiburon</li></ol><h2 id="San-Francisco-area"><a href="#San-Francisco-area" class="headerlink" title="San Francisco area"></a>San Francisco area</h2><blockquote><p>只有这两家的原因因为靠近地下停车场…</p></blockquote><ol><li>[ x ] <strong>Z &amp; Y Restaurant</strong>（御食园）</li><li>[ x ] <strong>R &amp; G Lounge</strong> (岭南小馆) （推荐椒盐螃蟹）</li></ol><h2 id="中半岛"><a href="#中半岛" class="headerlink" title="中半岛"></a>中半岛</h2><ol><li>[ x ] Boiling Beijing, San Bruno (推荐羊蝎子，干锅手撕包菜，夫妻肺片，豆浆)</li><li>[ x ] Yummy Szechuan, San Bruno (川菜)</li></ol><h2 id="Palo-Alto-Mountain-View"><a href="#Palo-Alto-Mountain-View" class="headerlink" title="Palo Alto ~ Mountain View"></a>Palo Alto ~ Mountain View</h2><ol><li>[ x ] <strong>Madera</strong>, Menlo Park (环境优美，周末午饭的话不是很贵，米其林一星)</li><li>[ x ] Mitsunobu, Menlo Park (中高档日料)</li><li>[ x ] Noodle Talk, Los Altos (请客吃饭的保险选择)</li></ol><h2 id="Sunnyvale-Cupertino"><a href="#Sunnyvale-Cupertino" class="headerlink" title="Sunnyvale ~ Cupertino"></a>Sunnyvale ~ Cupertino</h2><blockquote><p>个人原因不是很喜欢韶山印象</p></blockquote><ol start="2"><li>[ x ] <strong>Benihana</strong>, Cupertino （日式铁板烧，需要预定）</li><li>[ x ] Men-Bei Ramen, Santa Clara （推荐蛋包饭）</li><li>[ x ] Crema Coffee Roasting Co, San Jose (甜品有Lady M)</li><li>[ x ] <strong>Forthright Oyster Bar &amp; Kitchen</strong>, Campbell (Happy Hour的生蚝)</li><li>[ x ] Soong Soong Chinese Restaurant, San Jose (煎饼果子和羊杂碎汤)</li><li>[ x ] Hatcho Japanese Cuisine, Santa Clara</li><li>[ x ] Taiwan Porridge Kingdom, Cupertino (喝南瓜粥的地方)</li><li>[ x ] One Pot Shabu Shabu, Cupertino (日式火锅，需要排队)</li><li>[ x ] Tofu Plus Korean BBQ, Cupertino (豆腐汤锅)</li></ol><h2 id="Milpitas"><a href="#Milpitas" class="headerlink" title="Milpitas"></a>Milpitas</h2><ol><li>[ x ] Xian Kitchen, Milpitas (只收现金)</li><li>[ x ] Koi Palace, Milpitas (鲤鱼门早茶)</li><li>[ x ] Chef Liu Restaurant, San Jose (觉得比杨师傅要好吃些)</li><li>[ x ] Jiangnan Taste, Fremont （难得的江南菜）</li></ol><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ol><li>[ x ] Chengdu Style Restaurant, Berkeley (被誉为伯克利外面的午餐食堂，钵钵鸡)</li><li>[ x ] Dametra Cafe, Carmel-by-the-sea (全美都榜上有名的Mediterranean Food)</li></ol><h1 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h1><ol><li><a href="https://mp.weixin.qq.com/s/Nm7_3x9fZQ1gx2r6HetWtQ" target="_blank" rel="noopener">旧金山湾区最美hiking路线推荐</a></li><li><a href="https://cn.dealmoon.com/guide/649181" target="_blank" rel="noopener">“冰”与“火”之歌：CA雪山和火山的碰撞</a></li><li><a href="https://www.guruin.com/articles/522" target="_blank" rel="noopener">反击孤独星球, 我来讲讲最适合去美国国家公园的月份 (美西)</a></li><li>吃货小分队</li></ol>]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BayArea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree总结</title>
      <link href="/2017/09/24/Tree%E6%80%BB%E7%BB%93/"/>
      <url>/2017/09/24/Tree%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Tree的性质"><a href="#Tree的性质" class="headerlink" title="Tree的性质"></a>Tree的性质</h1><h2 id="Divide-and-Conquer模版"><a href="#Divide-and-Conquer模版" class="headerlink" title="Divide and Conquer模版"></a>Divide and Conquer模版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">traversal</span><span class="params">(root)</span>:</span></span><br><span class="line"><span class="comment"># none or leaf</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line"><span class="comment"># do sth</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># divide</span></span><br><span class="line">left = traversal(root.left)</span><br><span class="line">right = traversal(root.right)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Conquer</span></span><br><span class="line">res = <span class="comment"># merge </span></span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>T O(n) 一般是遍历所有点<br>S O(h) 用堆栈来做的话是遍历所有点<br>  O(n) 用队列实现遍历所有点</p><a id="more"></a><h3 id="104-Maximum-Depth-of-Binary-Tree"><a href="#104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="104. Maximum Depth of Binary Tree"></a>104. Maximum Depth of Binary Tree</h3><p>深度等于子树高度+1<br>T O(n)<br>S O(h)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.maxDepth(root.left)</span><br><span class="line">        right = self.maxDepth(root.right)</span><br><span class="line">        <span class="keyword">return</span> max(left,right) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a>111. Minimum Depth of Binary Tree</h3><p>和上一道题相比，需要判断树的情况，如果一个node的左儿子为空 右儿子不空 从root 到左儿子的路径不算是minimum depth<br>因为左儿子不算这个node的leaf node。<br>T O(n)<br>S O(h)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.minDepth(root.left)</span><br><span class="line">        right = self.minDepth(root.right)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> left:</span><br><span class="line">            <span class="keyword">return</span> right+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> right:</span><br><span class="line">            <span class="keyword">return</span> left+<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> min(left,right) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="110-Balanced-Binary-Tree"><a href="#110-Balanced-Binary-Tree" class="headerlink" title="110. Balanced Binary Tree"></a>110. Balanced Binary Tree</h3><p>这道题和上面的类似，都是找深度，由于要返回一个boolean值，所以多用一个helper function</p><p>T O(n)<br>S O(h)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.check(root) == <span class="number">-1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        left = self.isBalanced(root.left)</span><br><span class="line">        right = self.isBalanced(root.right)</span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">-1</span> <span class="keyword">or</span> right == <span class="number">-1</span> <span class="keyword">or</span> abs(left-right) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> max(left, right) + <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="100-Same-Tree"><a href="#100-Same-Tree" class="headerlink" title="100. Same Tree"></a>100. Same Tree</h3><p>我们考虑一下结束条件，如果两个结点都是null，也就是到头了，那么返回true。如果其中一个是null，说明在一棵树上结点到头，另一棵树结点还没结束，即树不相同，或者两个结点都非空，并且结点值不相同，返回false。最后递归处理两个结点的左右子树，返回左右子树递归的与结果即可。<br>T O(n)<br>S O(h)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">or</span> <span class="keyword">not</span> q:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> p.val != q.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.isSameTree(p.left, q.left) <span class="keyword">and</span> self.isSameTree(p.right, q.right)</span><br></pre></td></tr></table></figure><h3 id="101-Symmetric-Tree"><a href="#101-Symmetric-Tree" class="headerlink" title="101. Symmetric Tree"></a>101. Symmetric Tree</h3><p>本质上和上一题一样，区别就是从两棵树到左右孩子。<br>T O(n)<br>S O(h)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.check(root.left, root.right)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(self, node1, node2)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">and</span> <span class="keyword">not</span> node2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node1 <span class="keyword">or</span> <span class="keyword">not</span> node2:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> node1.val != node2.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> self.check(node1.left, node2.right) <span class="keyword">and</span> self.check(node1.right, node2.left)</span><br></pre></td></tr></table></figure><h2 id="三种遍历"><a href="#三种遍历" class="headerlink" title="三种遍历"></a>三种遍历</h2><h3 id="recursion"><a href="#recursion" class="headerlink" title="recursion"></a>recursion</h3><p>recursion的方法很简单 Time O(n) Space O(1)  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">orderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">         </span><br><span class="line">        self.traverse(root, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">traverse</span><span class="params">(self, root, res)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        res.append(root.val) <span class="comment"># preorder</span></span><br><span class="line">        self.traverse(root.left, res)</span><br><span class="line">        <span class="comment">## res.append(root.val) # inorder</span></span><br><span class="line">        self.traverse(root.right, res)</span><br><span class="line">        <span class="comment">## res.append(root.val) # postorder</span></span><br></pre></td></tr></table></figure><h3 id="iterative"><a href="#iterative" class="headerlink" title="iterative"></a>iterative</h3><p>因为不能使用recursion，所以我们要模拟构建栈。  </p><h4 id="前序遍历-pre-order"><a href="#前序遍历-pre-order" class="headerlink" title="前序遍历(pre-order):"></a>前序遍历(pre-order):</h4><p>根-&gt;左-&gt;右1. 对root异常处理 2.cur 指向root, 循环条件为node!=null || !stack.isEmpty() 3.当cur不为空，就压入stack,并将元素加入结果，cur继续往左边找 4.当cur为空，就cur就为pop出的栈顶元素,.cur继续往右边找. 5.返回最终结果集合.<br>T O(n)<br>S O(h)  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = []</span><br><span class="line">        res = []</span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                res.append(node.val)</span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            node = node.right</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>本质上是一样的，先访问左孩子所以就一路到底</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = []</span><br><span class="line">        res = []</span><br><span class="line">        node = root</span><br><span class="line">        <span class="keyword">while</span> node <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                stack.append(node)</span><br><span class="line">                </span><br><span class="line">                node = node.left</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            node = node.right</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>这个需要一点技巧以及练习，因为根节点需要访问两次，所以就需要判断是否已经访问过右节点了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        stack = []</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> root <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            </span><br><span class="line">            peak = stack[<span class="number">-1</span>]</span><br><span class="line">            <span class="keyword">if</span> peak.right <span class="keyword">and</span> peak.right != pre: <span class="comment"># 如果当前栈顶元素的右结点存在并且还没访问过（也就是右结点不等于上一个访问结点）就访问右结点 </span></span><br><span class="line">                root = peak.right</span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># 如果栈顶元素右结点是空或者已经访问过，那么说明栈顶元素的左右子树都访问完毕 需要把栈顶元素加入结果并且回溯上一层</span></span><br><span class="line"></span><br><span class="line">                stack.pop()</span><br><span class="line">                res.append(peak.val)</span><br><span class="line">                pre = peak</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>不过还有一种更加巧妙的办法，前序遍历和后续遍历能否直接颠倒呢？答案是否定的，我们来看看前序遍历：根-左子树-右子树<br>后序遍历：左子树-右子树-根 把前序遍历倒过来：右子树-左子树-根 ！左右子树相反，不能直接倒！<br>但是这题，哼哼哼，先左子树入栈，在右子树入栈！最后输出颠倒一下即可！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param root, a tree node</span></span><br><span class="line">    <span class="comment"># @return a list of integers</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        ans,q=[],[]</span><br><span class="line">        q.append(root)</span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            cur=q.pop()          </span><br><span class="line">            <span class="keyword">if</span> cur.left: q.append(cur.left)</span><br><span class="line">            <span class="keyword">if</span> cur.right: q.append(cur.right)</span><br><span class="line">            ans.append(cur.val)</span><br><span class="line">        <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="116-Populating-Next-Right-Pointers-in-Each-Node"><a href="#116-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="116. Populating Next Right Pointers in Each Node"></a>116. Populating Next Right Pointers in Each Node</h3><p>前序遍历的性质的小变种题目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># @param root, a tree link node</span></span><br><span class="line">    <span class="comment"># @return nothing</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            root.left.next = root.right</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            <span class="keyword">if</span> root.next:</span><br><span class="line">                root.right.next = root.next.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                root.right.next = <span class="literal">None</span></span><br><span class="line">        self.connect(root.left)</span><br><span class="line">        self.connect(root.right)</span><br></pre></td></tr></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><p>基本思想便是套用BFS模版，用queue实现，在Python中可以通过引入Deque</p><h3 id="102-Binary-Tree-Level-Order-Traversal"><a href="#102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="102. Binary Tree Level Order Traversal"></a>102. Binary Tree Level Order Traversal</h3><p>这是基本题型，外层queue记录第几层，内层size记录当前层所存储的节点<br>  T O(V+E)<br>  S O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        </span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            size = len(queue)</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">while</span> size:</span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                temp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                size -= <span class="number">1</span></span><br><span class="line">            res.append(list(temp))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="107-Binary-Tree-Level-Order-Traversal-II"><a href="#107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="107. Binary Tree Level Order Traversal II"></a>107. Binary Tree Level Order Traversal II</h3><p>本质上和上一道题一样，只是在外层倒叙输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            size = len(queue)</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">while</span> size:</span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                temp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                size -= <span class="number">1</span></span><br><span class="line">            **res.insert(<span class="number">0</span>,list(temp))**</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="103. Binary Tree Zigzag Level Order Traversal"></a>103. Binary Tree Zigzag Level Order Traversal</h3><p>类似的题，在内层倒叙输出，设置flag记录奇偶</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">zigzagLevelOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        res = []</span><br><span class="line">        **count = <span class="number">0</span>**</span><br><span class="line">        queue = []</span><br><span class="line">        queue.append(root)</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            size = len(queue)</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">while</span> size:</span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">**                <span class="keyword">if</span> count % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    temp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> count % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                    temp.insert(<span class="number">0</span>,node.val)**</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                size -= <span class="number">1</span></span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            res.append(list(temp))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="637-Average-of-Levels-in-Binary-Tree"><a href="#637-Average-of-Levels-in-Binary-Tree" class="headerlink" title="637.Average of Levels in Binary Tree"></a>637.Average of Levels in Binary Tree</h3><p>层序遍历的基础上，每层的average</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averageOfLevels</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[float]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>]</span><br><span class="line">        queue = [root]</span><br><span class="line">        res = []</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            size = len(queue)</span><br><span class="line">            temp = []</span><br><span class="line">            <span class="keyword">while</span> size:</span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                temp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                size -= <span class="number">1</span></span><br><span class="line">            res.append(sum(temp)/float(len(temp)))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="314-Binary-Tree-Vertical-Order-Traversal"><a href="#314-Binary-Tree-Vertical-Order-Traversal" class="headerlink" title="314. Binary Tree Vertical Order Traversal"></a>314. Binary Tree Vertical Order Traversal</h3><p>也是BFS traverse题，中间存贮index的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verticalOrder</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        queue = [(root,<span class="number">0</span>)]</span><br><span class="line">        dic = dict()</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node, index = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                queue.append((node.left, index<span class="number">-1</span>))</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                queue.append((node.right, index + <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">if</span> index <span class="keyword">not</span> <span class="keyword">in</span> dic:</span><br><span class="line">                dic[index] = []</span><br><span class="line">            dic[index].append(node.val)</span><br><span class="line">        minx,maxx = float(<span class="string">'inf'</span>), float(<span class="string">'-inf'</span>)</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> dic.keys():</span><br><span class="line">            minx = min(minx, key)</span><br><span class="line">            maxx = max(maxx, key)</span><br><span class="line">            </span><br><span class="line">        res = [<span class="number">0</span>] * (maxx - minx + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> dic:</span><br><span class="line">            res[key-minx] = dic[key]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h1 id="Path系列问题"><a href="#Path系列问题" class="headerlink" title="Path系列问题"></a>Path系列问题</h1><h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>基本上是可以用递归和分治的方法来进行解决，存在解和所有解都是一样的操作</p><h3 id="257-Binary-Tree-Paths"><a href="#257-Binary-Tree-Paths" class="headerlink" title="257. Binary Tree Paths"></a>257. Binary Tree Paths</h3><p>输出所有路径，DFS递归，然后到叶子结点的时候返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: List[str]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        self.helper(root, res, str(root.val))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, res, temp)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">            res.append(temp)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> root.left:</span><br><span class="line">            self.helper(root.left, res, temp + <span class="string">'-&gt;'</span>+str(root.left.val))</span><br><span class="line">        <span class="keyword">if</span> root.right:</span><br><span class="line">            self.helper(root.right, res , temp + <span class="string">'-&gt;'</span>+str(root.right.val))</span><br></pre></td></tr></table></figure><h3 id="112-Path-Sum"><a href="#112-Path-Sum" class="headerlink" title="112. Path Sum"></a>112. Path Sum</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">T O(n)</span><br><span class="line">S O(h)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root, sum)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type sum: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> root.val == sum:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.hasPathSum(root.left, sum - root.val) <span class="keyword">or</span> self.hasPathSum(root.right, sum - root.val)</span><br></pre></td></tr></table></figure><h3 id="113-Path-Sum-II"><a href="#113-Path-Sum-II" class="headerlink" title="113. Path Sum II"></a>113. Path Sum II</h3><p>发现解的时候需要list(temp)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span><span class="params">(self, root, sum)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type sum: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        self.helper(root, sum, res, [])</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, target, res, temp)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> root.val == target:</span><br><span class="line">            res.append(list(temp+[root.val]))</span><br><span class="line">        <span class="keyword">return</span> self.helper(root.left, target - root.val, res, temp+[root.val]) <span class="keyword">or</span> self.helper(root.right, target - root.val, res, temp+[root.val])</span><br></pre></td></tr></table></figure><h3 id="129-Sum-Root-to-Leaf-Numbers"><a href="#129-Sum-Root-to-Leaf-Numbers" class="headerlink" title="129. Sum Root to Leaf Numbers"></a>129. Sum Root to Leaf Numbers</h3><p>每一条往下传的时候，根据题目要求<code>prev * 10 + root.val</code>,然后分治相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumNumbers</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> self.helper(root, <span class="number">0</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, total)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">            <span class="keyword">return</span> total * <span class="number">10</span> + root.val</span><br><span class="line">        left = self.helper(root.left, total*<span class="number">10</span> + root.val)</span><br><span class="line">        right = self.helper(root.right, total*<span class="number">10</span> + root.val)</span><br><span class="line">        <span class="keyword">return</span> left + right</span><br></pre></td></tr></table></figure><h3 id="124-Binary-Tree-Maximum-Path-Sum"><a href="#124-Binary-Tree-Maximum-Path-Sum" class="headerlink" title="124. Binary Tree Maximum Path Sum"></a>124. Binary Tree Maximum Path Sum</h3><p>这道题相比上一道题区别在于每个结点的local max 不一样，这道题是不需经过根节点的，所以可以变成无向图，然后分成四种情况: <code>root.val, root.val+root.left.val, root.val+root.right.val</code> 这三种是可以继续向上传的，<code>root.val+root.left.val+root.right.val</code>这种是不可以往上传的，所以这些情况可以进行local比较，最终返回global max</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxPathSum</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        maxSum = [float(<span class="string">'-inf'</span>)]</span><br><span class="line">        self.helper(root, maxSum)</span><br><span class="line">        <span class="keyword">return</span> maxSum[<span class="number">0</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, maxSum)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.helper(root.left, maxSum)</span><br><span class="line">        right = self.helper(root.right, maxSum)</span><br><span class="line">        temp = max(root.val + left, root.val+right, root.val)</span><br><span class="line">        maxSum[<span class="number">0</span>] = max(maxSum[<span class="number">0</span>], temp, root.val+left+right)</span><br><span class="line">        <span class="keyword">return</span> temp</span><br></pre></td></tr></table></figure><h3 id="563-Binary-Tree-Tilt"><a href="#563-Binary-Tree-Tilt" class="headerlink" title="563. Binary Tree Tilt"></a>563. Binary Tree Tilt</h3><p>这道题根据题设，每次结点的返回值是其左右孩子和本身的和，然后每次更新abs()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findTilt</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        total = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        self.helper(root,total)</span><br><span class="line">        <span class="keyword">return</span> total[<span class="number">0</span>]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root,total)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.helper(root.left,total)</span><br><span class="line">        right = self.helper(root.right,total)</span><br><span class="line">        total[<span class="number">0</span>] += abs(left - right)</span><br><span class="line">        <span class="keyword">return</span> left+right+root.val <span class="comment"># sum</span></span><br></pre></td></tr></table></figure><h2 id="Binary-Search-Tree性质"><a href="#Binary-Search-Tree性质" class="headerlink" title="Binary Search Tree性质"></a>Binary Search Tree性质</h2><p>这种题目是根据其性质，左孩子永远比根节点小，右孩子永远比根节点大</p><h3 id="235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="235. Lowest Common Ancestor of a Binary Search Tree"></a>235. Lowest Common Ancestor of a Binary Search Tree</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span><span class="params">(self, root, p, q)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type p: TreeNode</span></span><br><span class="line"><span class="string">        :type q: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> p.val &gt; q.val:</span><br><span class="line">            p,q = q,p</span><br><span class="line">        <span class="keyword">if</span> p.val &lt;= root.val <span class="keyword">and</span> q.val &gt;= root.val:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">if</span> q.val &lt; root.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.left, p, q)</span><br><span class="line">        <span class="keyword">if</span> p.val &gt; root.val:</span><br><span class="line">            <span class="keyword">return</span> self.lowestCommonAncestor(root.right, p, q)</span><br></pre></td></tr></table></figure><h3 id="270-Closest-Binary-Search-Tree-Value"><a href="#270-Closest-Binary-Search-Tree-Value" class="headerlink" title="270. Closest Binary Search Tree Value"></a>270. Closest Binary Search Tree Value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closestValue</span><span class="params">(self, root, target)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type target: float</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        r = root.val</span><br><span class="line">        <span class="keyword">while</span> root:</span><br><span class="line">            <span class="keyword">if</span> abs(root.val - target) &lt; abs(r - target):</span><br><span class="line">                r = root.val <span class="comment"># generate new node</span></span><br><span class="line">            root = root.left <span class="keyword">if</span> target &lt; root.val <span class="keyword">else</span> root.right</span><br><span class="line">        <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure><h3 id="272-Closest-Binary-Search-Tree-Value-II"><a href="#272-Closest-Binary-Search-Tree-Value-II" class="headerlink" title="272. Closest Binary Search Tree Value II"></a>272. Closest Binary Search Tree Value II</h3><p>这道题要维持一个k长度的list，所以可以中序遍历，然后不断更新最后添加元素和队列首元素与target的差值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closestKValues</span><span class="params">(self, root, target, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :type target: float</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        self.helper(root, target, k ,res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, root, target, k, res)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.helper(root.left, target, k, res)</span><br><span class="line">        <span class="keyword">if</span> len(res) &lt; k:</span><br><span class="line">            res.append(root.val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> abs(target - root.val) &lt; abs(target - res[<span class="number">0</span>]):</span><br><span class="line">                res.pop(<span class="number">0</span>)</span><br><span class="line">                res.append(root.val)</span><br><span class="line">                </span><br><span class="line">        self.helper(root.right, target , k , res)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
            <tag> Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heap总结</title>
      <link href="/2017/09/20/Heap%E6%80%BB%E7%BB%93/"/>
      <url>/2017/09/20/Heap%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="heapq–堆数据结构"><a href="#heapq–堆数据结构" class="headerlink" title="heapq–堆数据结构"></a>heapq–堆数据结构</h1><p>heapq模块是python的一个标准库，它实现了一个堆数据结构，堆数据结构是一种二叉树。</p><h2 id="什么是堆数据结构？"><a href="#什么是堆数据结构？" class="headerlink" title="什么是堆数据结构？"></a>什么是堆数据结构？</h2><p>官网给出的定义是：<br><code>This implementation uses arrays for which heap[k] &lt;= heap[2*k+1] and heap[k] &lt;= heap[2*k+2]for all k, counting elements from zero.</code><br>我们可以这样理解：<br>堆是完全二叉树或者近似二叉树，它的各个节点的键值都有固定对应的的数字，根节点（即root,最上面起始位置）是0，若父节点为heap[k]，则子节点为heap[2<em>k+1]和heap[2</em>k+2]。父节点对应的值总是小于或者等于子节点，称为最小堆。对应的，父节点的值总是大于或者等于子节点，称为最大堆。<strong>在heapq中，使用的是最小堆。</strong></p><p>正因为堆的这种特殊结构，使得通过heapq模块，可以快速获取一个列表的前N个最大(小)值，即Top N。</p><a id="more"></a><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>这里，可能我们不禁要问，python不是内置了sort方法用来排序么？</p><p>现在我们假设一种情景，我们在维护一个列表，并且这个列表在变化，不断有新元素加入，而在任何时候我们可能需要获取里面的Top N，因此我们要求列表始终可以处于已排序状态。</p><p>这时候sort方法就显得不那么好用了，因为每次新加入一个元素，我们都要调用一次sort。数据量小时还是可以的，当数据量较大时，效率就会降低，并且python内置的sort方法本身在实现上也不是那么的高效，复杂度是O(NlgN)。</p><p><strong>特别强调，当初我思考了半天，构建heap需要O(N)的复杂度–见算法导论，而heapsort的话，每次操作heappop()是需要lgN的复杂度，而list中有N个元素，所以整体复杂度是O(NlgN)</strong></p><p>python维护了一个堆，使用的存储结构是列表，通过heapq模块来管理、操作这个堆。heapq提供了插入、删除元素的方法，并且保证在插入或删除元素时，所有节点自动调整，保证堆的结构，同时尽量高效，复杂度为O(log n)，在大数据时，效率高于sort排序。</p><h2 id="常用方法使用"><a href="#常用方法使用" class="headerlink" title="常用方法使用"></a>常用方法使用</h2><p>heapq.heappush(heap, item) 把item添加到heap这个list中<br>heapq.heappop(heap)把堆顶元素弹出<br>两种操作的复杂度均为O（logN）</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="215-Kth-Largest-Element-in-an-Array"><a href="#215-Kth-Largest-Element-in-an-Array" class="headerlink" title="215. Kth Largest Element in an Array"></a>215. Kth Largest Element in an Array</h2><p>基本操作就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">T O(Nlgk)</span><br><span class="line">S O(N)</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        heap = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">            heapq.heappush(heap,num)</span><br><span class="line">            <span class="keyword">if</span> len(heap) &gt; k:</span><br><span class="line">                heapq.heappop(heap)</span><br><span class="line">        <span class="keyword">return</span> heapq.heappop(heap)</span><br></pre></td></tr></table></figure><h2 id="347-Top-K-Frequent-Elements"><a href="#347-Top-K-Frequent-Elements" class="headerlink" title="347. Top K Frequent Elements"></a>347. Top K Frequent Elements</h2><p>最基本的题目，只要注意Python中是最小堆就好，由于我们只取前K个元素，所以是klgN</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">T O(N + klgN)</span><br><span class="line">S O(N)</span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: List[int]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        cntDict = collections.defaultdict(int)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            cntDict[i] += <span class="number">1</span></span><br><span class="line">        cnt_list = []</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> cntDict.keys():</span><br><span class="line">            heapq.heappush(cnt_list,(-cntDict[key],key))</span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            res.append(heapq.heappop(cnt_list)[<span class="number">1</span>])</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="378-Kth-Smallest-Element-in-a-Sorted-Matrix"><a href="#378-Kth-Smallest-Element-in-a-Sorted-Matrix" class="headerlink" title="378. Kth Smallest Element in a Sorted Matrix"></a>378. Kth Smallest Element in a Sorted Matrix</h2><p>Example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">matrix &#x3D; [</span><br><span class="line">   [ 1,  5,  9],</span><br><span class="line">   [10, 11, 13],</span><br><span class="line">   [12, 13, 15]</span><br><span class="line">],</span><br><span class="line">k &#x3D; 8,</span><br><span class="line"></span><br><span class="line">return 13.</span><br></pre></td></tr></table></figure><p>这道题目当然可以暴力解，就是n^2lgK，不过显然不是题目要求的,通过观察可以发现每一行每一列都是增序排列，所以可以每次只加横行或者纵列。但如何避免重复呢？可以维持一个数组记录已经访问过的点，要是为了节约空间的话，借鉴网上大神的想法，只有当处于第一列时才往下遍历，否则只横向遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># T O(klgN)</span></span><br><span class="line"><span class="comment"># S O(N)</span></span><br><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">kthSmallest</span><span class="params">(self, matrix, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        m, n = len(matrix), len(matrix[<span class="number">0</span>])</span><br><span class="line">        q = [(matrix[<span class="number">0</span>][<span class="number">0</span>], <span class="number">0</span>, <span class="number">0</span>)]</span><br><span class="line">        <span class="comment"># ans = None</span></span><br><span class="line">        <span class="keyword">while</span> k:</span><br><span class="line">            ans, i, j = heapq.heappop(q)</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">0</span> <span class="keyword">and</span> i + <span class="number">1</span> &lt; m:</span><br><span class="line">                heapq.heappush(q, (matrix[i + <span class="number">1</span>][j], i + <span class="number">1</span>, j))</span><br><span class="line">            <span class="keyword">if</span> j + <span class="number">1</span> &lt; n:</span><br><span class="line">                heapq.heappush(q, (matrix[i][j + <span class="number">1</span>], i, j + <span class="number">1</span>))</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Union-Find总结</title>
      <link href="/2017/09/18/Union-Find%E6%80%BB%E7%BB%93/"/>
      <url>/2017/09/18/Union-Find%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Union-Find-总结"><a href="#Union-Find-总结" class="headerlink" title="Union Find 总结"></a>Union Find 总结</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>并查集是一种树型的数据结构，其保持着用于处理一些不相交集合（Disjoint Sets）的合并及查询问题。有一个联合-查找算法（union-find algorithm）定义了两个操作用于此数据结构：<br>Find：确定元素属于哪一个子集。它可以被用来确定两个元素是否属于同一子集。<br>Union：将两个子集合并成同一个集合。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>适合于判断，给出一组结点，判断他们是否联通。从判断是否为图（一个节点的两个边都会指向同一节点–构成三角形从而不再是树）到岛屿问题（如果节点不与其它节点联通，则会孤立成一个岛屿）</p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>建立n个分组，每个分组代表一堆可以互相联通的结点<br>遍历每对结点，找到他们各自所属的分组A, B<br>如果A != B，则将A, B分组union起来，表示A, B分组联通了<br>如果A == B，则跳过  （说明A，B已经在一个组里）</p><a id="more"></a><p>初始化，每一个点都设置为单独的一个组，标记为index</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupTag = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br></pre></td></tr></table></figure><p>Find操作是为每一个节点找到它的最远祖先，如果节点对应的数值为初始的index的话，证明其仍然为isolate，如果不是的话，存储的index为其祖先的index，这样就能find其最远祖先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, e, groupTag)</span>:</span></span><br><span class="line">    <span class="comment"># isolate</span></span><br><span class="line">    <span class="keyword">if</span> groupTag[e] == e:</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    <span class="comment"># group</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> self.find(groupTag[e], groupTag)</span><br></pre></td></tr></table></figure><p>Union操作,进来的这两个节点是联通的，union函数是将这两个节点合并为一个组。通过调用Find操作，对两个节点找到其祖先，然后如果祖先相同的话，证明这两个节点已经在一个组里，跳过；如果不是的话，将第二个节点的祖先设置为第一个节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j, x, y, groupTag, n)</span>:</span></span><br><span class="line">    index1 = i*n+j</span><br><span class="line">    index2 = x*n+y</span><br><span class="line">    root1 = self.find(index1, groupTag)</span><br><span class="line">    root2 = self.find(index2, groupTag)</span><br><span class="line">    <span class="comment"># already unioned</span></span><br><span class="line">    <span class="keyword">if</span> root1 == root2:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        groupTag[root2] = root1</span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>Nearly to O（1）<br>参考 <a href="https://neo1218.github.io/unionfind/" target="_blank" rel="noopener">Union-Find算法 动态连通性概念介绍</a></p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>200    Number of Islands    34.8%    Medium<br>128    Longest Consecutive Sequence    37.0%    Hard<br>130    Surrounded Regions    18.6%    Medium<br>547    Friend Circles    49.1%    Medium<br>305    Number of Islands II     39.0%    Hard<br>261    Graph Valid Tree     37.9%    Medium<br>323    Number of Connected Components in an Undirected Graph </p><h3 id="261-Graph-Valid-Tree"><a href="#261-Graph-Valid-Tree" class="headerlink" title="261. Graph Valid Tree"></a>261. Graph Valid Tree</h3><p>判断一张图是否是一颗树的两个关键点：<br>不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)<br>满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)</p><p>所以可以套用最简单的Union-Find模版来解这道题，判断条件为一个顶点的两个祖先为同一个组的话，False，因为这两个祖先顶点既然在一个组里，肯定已经联成一条线，这样这三个点就会成为环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">T O(n) union-find nearly o(<span class="number">1</span>)</span><br><span class="line">S O(n)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">validTree</span><span class="params">(self, n, edges)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type edges: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line">        group = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> e1, e2 <span class="keyword">in</span> edges:</span><br><span class="line">            root1 = self.find(e1, group)</span><br><span class="line">            root2 = self.find(e2, group)</span><br><span class="line">            <span class="keyword">if</span> root1 == root2:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                group[root2] = root1</span><br><span class="line">        <span class="keyword">return</span> len(edges) == n - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, e, group)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> e == group[e]:</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure><h3 id="323-Number-of-Connected-Components-in-an-Undirected-Graph"><a href="#323-Number-of-Connected-Components-in-an-Undirected-Graph" class="headerlink" title="323. Number of Connected Components in an Undirected Graph"></a>323. Number of Connected Components in an Undirected Graph</h3><p>在上一题的基础上，算出有几个unconnected components，还是利用性质 不存在环路(对于有向图，不存在环路也就意味着不存在强连通子图)<br>满足边数加一等于顶点数的规律(不考虑重边和指向自身的边)，每一次成功union操作后，孤立顶点数减1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">T O(n) union-find nearly o(<span class="number">1</span>)</span><br><span class="line">S O(n)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countComponents</span><span class="params">(self, n, edges)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :type edges: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        count = n</span><br><span class="line">        group = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(n)]</span><br><span class="line">        <span class="keyword">for</span> e1, e2 <span class="keyword">in</span> edges:</span><br><span class="line">            root1 = self.find(e1, group)</span><br><span class="line">            root2 = self.find(e2, group)</span><br><span class="line">            <span class="keyword">if</span> root1 == root2:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                group[root2] = root1</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, e, group)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> e == group[e]:</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure><h3 id="547-Friend-Circles"><a href="#547-Friend-Circles" class="headerlink" title="547. Friend Circles"></a>547. Friend Circles</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line">[[1,1,0],</span><br><span class="line"> [1,1,1],</span><br><span class="line"> [0,1,1]]</span><br><span class="line">Output: 1</span><br><span class="line">Explanation:The 0th and 1st students are direct friends, the 1st and 2nd students are direct friends, </span><br><span class="line">so the 0th and 2nd students are indirect friends. All of them are in the same friend circle, so return 1.</span><br></pre></td></tr></table></figure><p>这道题和上一道题类似，算出孤立的朋友就好… trick的地方就是我们只用算一半的矩阵就好，因为If M[i][j] = 1, then M[j][i] = 1. 而且对角线一定为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">T O(n^<span class="number">2</span>) union-find nearly o(<span class="number">1</span>)</span><br><span class="line">S O(n)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findCircleNum</span><span class="params">(self, M)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type M: List[List[int]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> M <span class="keyword">or</span> <span class="keyword">not</span> M[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m = len(M)</span><br><span class="line">        group = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(m)]</span><br><span class="line">        count = m</span><br><span class="line">        <span class="comment"># init</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,m):</span><br><span class="line">                <span class="keyword">if</span> M[i][j] == <span class="number">1</span>:</span><br><span class="line">                    p1 = self.find(i, group)</span><br><span class="line">                    p2 = self.find(j, group)</span><br><span class="line">                    <span class="keyword">if</span> p1 != p2:</span><br><span class="line">                        count -= <span class="number">1</span></span><br><span class="line">                        group[p2] = p1</span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">                      </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, e, group)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> e == group[e]:</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find(group[e], group)</span><br></pre></td></tr></table></figure><h3 id="200-Number-of-Islands"><a href="#200-Number-of-Islands" class="headerlink" title="200. Number of Islands"></a>200. Number of Islands</h3><p>本质上和上面的策略相同，不过可以把二维的矩阵变为一维，联通条件为上下左右的方向需要为1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands</span><span class="params">(self, grid)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type grid: List[List[str]]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># TIME O(MN)</span></span><br><span class="line">        <span class="comment"># SPACE O(MN)</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> grid <span class="keyword">or</span> <span class="keyword">not</span> len(grid) <span class="keyword">or</span> <span class="keyword">not</span> grid[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        m = len(grid)</span><br><span class="line">        n = len(grid[<span class="number">0</span>])</span><br><span class="line">        <span class="comment"># two dimension to one</span></span><br><span class="line">        groupTag = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(m*n)]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">'1'</span>:</span><br><span class="line">                    groupTag[i*n+j] = i*n + j</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    groupTag[i*n+j] = <span class="number">-1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="string">'0'</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> j+<span class="number">1</span> &lt; n <span class="keyword">and</span> grid[i][j+<span class="number">1</span>] == <span class="string">'1'</span>:</span><br><span class="line">                    self.union(i,j,i,j+<span class="number">1</span>,groupTag,n)</span><br><span class="line">                <span class="keyword">if</span> i+<span class="number">1</span> &lt; m <span class="keyword">and</span> grid[i+<span class="number">1</span>][j] == <span class="string">'1'</span>:</span><br><span class="line">                    self.union(i,j,i+<span class="number">1</span>,j,groupTag,n)</span><br><span class="line">        </span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(groupTag)):</span><br><span class="line">            <span class="keyword">if</span> groupTag[i] == i:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, e, groupTag)</span>:</span></span><br><span class="line">        <span class="comment"># isolate</span></span><br><span class="line">        <span class="keyword">if</span> groupTag[e] == e:</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        <span class="comment"># group</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find(groupTag[e], groupTag)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, i, j, x, y, groupTag, n)</span>:</span></span><br><span class="line">        index1 = i*n+j</span><br><span class="line">        index2 = x*n+y</span><br><span class="line">        root1 = self.find(index1, groupTag)</span><br><span class="line">        root2 = self.find(index2, groupTag)</span><br><span class="line">        <span class="comment"># already unioned</span></span><br><span class="line">        <span class="keyword">if</span> root1 == root2:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            groupTag[root2] = root1</span><br></pre></td></tr></table></figure><h3 id="305-Number-of-Islands-II"><a href="#305-Number-of-Islands-II" class="headerlink" title="305. Number of Islands II"></a>305. Number of Islands II</h3><p>在上一题的基础上，需要满足操作add，然后得出isolate的岛屿。<br>这道题需要建一个Union的类，这样每次调用类的操作能更好的减少时间空间复杂度，这次因为是需要在每次Add操作（isolate岛屿数量预先 count+1）的时候算出isolate的数量，所以可以对于每个新加入的点，向四周move一步，判断是否和已知岛屿联通，从而count-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numIslands2</span><span class="params">(self, m, n, positions)</span>:</span></span><br><span class="line">        ans = []</span><br><span class="line">        islands = Union()</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> map(tuple, positions):</span><br><span class="line">            islands.add(p)</span><br><span class="line">            <span class="keyword">for</span> dp <span class="keyword">in</span> (<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, <span class="number">-1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">-1</span>, <span class="number">0</span>):</span><br><span class="line">                q = (p[<span class="number">0</span>] + dp[<span class="number">0</span>], p[<span class="number">1</span>] + dp[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">if</span> q <span class="keyword">in</span> islands.group:</span><br><span class="line">                    islands.union(p, q)</span><br><span class="line">            ans += [islands.count]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Union</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.group = &#123;&#125;</span><br><span class="line">        self.island = &#123;&#125;</span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, p)</span>:</span></span><br><span class="line">        self.group[p] = p</span><br><span class="line">        self.island[p] = <span class="number">1</span></span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(self, i)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i == self.group[i]:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.find(self.group[i])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">union</span><span class="params">(self, p, q)</span>:</span></span><br><span class="line">        root1, root2 = self.find(p), self.find(q)</span><br><span class="line">        <span class="keyword">if</span> root1 == root2:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> self.island[root1] &gt; self.island[root2]:</span><br><span class="line">            root1, root2 = root2, root1</span><br><span class="line">        self.group[root1] = root2</span><br><span class="line">        self.island[root2] += self.island[root1]</span><br><span class="line">        self.count -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> Union-Find </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BFS-Board类型总结</title>
      <link href="/2017/09/10/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2017/09/10/BFS-Maze%E7%B1%BB%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><hr><h1 id="Maze"><a href="#Maze" class="headerlink" title="Maze"></a>Maze</h1><p>这一系列题目的要求是小球滚动直到遇到障碍才停止，最后找到出口，求出valid，shorest，shortest的变种；所以用BFS可以比较简洁的解决这一系列的问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">queue = [start]</span><br><span class="line"></span><br><span class="line">direction = [(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">-1</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">i, j = queue.pop(<span class="number">0</span>) <span class="comment"># python 用List模仿实现Queue</span></span><br><span class="line">maze[i][j] = <span class="number">-1</span> <span class="comment"># visited</span></span><br><span class="line"><span class="comment"># 终止条件</span></span><br><span class="line"><span class="keyword">if</span> (i,j) == destination:</span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历四个方向</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> direction: <span class="comment"># local dir</span></span><br><span class="line">row = i</span><br><span class="line">col = j</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> xxx <span class="keyword">and</span> xxx : <span class="comment"># condition</span></span><br><span class="line">row += x</span><br><span class="line">col += y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> visited <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">in</span> the queue:</span><br><span class="line">queue.append()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="I"><a href="#I" class="headerlink" title="I"></a>I</h2><p>`490. The Maze<br>基本款，套用模版就好了<br>O(mn),O(mn)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPath</span><span class="params">(self, maze, start, destination)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type maze: List[List[int]]</span></span><br><span class="line"><span class="string">        :type start: List[int]</span></span><br><span class="line"><span class="string">        :type destination: List[int]</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        queue = [start]</span><br><span class="line">        m = len(maze)</span><br><span class="line">        n = len(maze[<span class="number">0</span>])</span><br><span class="line">        dir = [(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">-1</span>)]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            i, j = queue.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="comment"># record</span></span><br><span class="line">            maze[i][j] = <span class="number">-1</span></span><br><span class="line">            <span class="keyword">if</span> i == destination[<span class="number">0</span>] <span class="keyword">and</span> j == destination[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> dir:</span><br><span class="line">                row = x + i</span><br><span class="line">                col = y + j</span><br><span class="line">                <span class="comment"># move until the wall</span></span><br><span class="line">                <span class="keyword">while</span> <span class="number">0</span>&lt;= row &lt; m <span class="keyword">and</span> <span class="number">0</span>&lt;= col &lt; n <span class="keyword">and</span> maze[row][col] != <span class="number">1</span>:</span><br><span class="line">                    row += x</span><br><span class="line">                    col += y</span><br><span class="line">                <span class="comment"># move back a step</span></span><br><span class="line">                row -= x</span><br><span class="line">                col -= y</span><br><span class="line">                <span class="keyword">if</span> maze[row][col] == <span class="number">0</span> <span class="keyword">and</span> [row,col] <span class="keyword">not</span> <span class="keyword">in</span> queue:</span><br><span class="line">                    queue.append([row, col])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="II-求最短路径"><a href="#II-求最短路径" class="headerlink" title="II - 求最短路径"></a>II - 求最短路径</h2><p>`505. The Maze II<br>可以考虑Dijkstra’s algorithm，在Python使用heapq最小堆，因为每一次都要记录当前路径，所以需要记录local_count</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count,i,j = heapq.heappop(pq)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> dir:</span><br><span class="line">    row = i+x</span><br><span class="line">    col = j+y</span><br><span class="line">    local = <span class="number">1</span></span><br><span class="line">...</span><br><span class="line">heapq.heappush(pq, (count+local, row, col))</span><br></pre></td></tr></table></figure><p>时间：O(mn*log(mn)) – 用heapq方法每次heapify的时候是Log级别的复杂度<br>空间：O（mn）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> heapq</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shortestDistance</span><span class="params">(self, maze, start, destination)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type maze: List[List[int]]</span></span><br><span class="line"><span class="string">        :type start: List[int]</span></span><br><span class="line"><span class="string">        :type destination: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pq = [(<span class="number">0</span>,start[<span class="number">0</span>],start[<span class="number">1</span>])]</span><br><span class="line">        m = len(maze)</span><br><span class="line">        n = len(maze[<span class="number">0</span>])</span><br><span class="line">        dir = [(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">-1</span>)]</span><br><span class="line">        <span class="keyword">while</span> pq:</span><br><span class="line">            count,i,j = heapq.heappop(pq)</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># cut</span></span><br><span class="line">            maze[i][j] = <span class="number">-1</span> <span class="comment"># record</span></span><br><span class="line">            <span class="keyword">if</span> i == destination[<span class="number">0</span>] <span class="keyword">and</span> j == destination[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> count</span><br><span class="line">            <span class="keyword">for</span> x,y <span class="keyword">in</span> dir:</span><br><span class="line">                row = i+x</span><br><span class="line">                col = j+y</span><br><span class="line">                local = <span class="number">1</span></span><br><span class="line">                <span class="comment"># record local variable</span></span><br><span class="line">                <span class="keyword">while</span> <span class="number">0</span> &lt;= row &lt; m <span class="keyword">and</span> <span class="number">0</span> &lt;= col &lt; n <span class="keyword">and</span> maze[row][col] != <span class="number">1</span>:</span><br><span class="line">                    row += x</span><br><span class="line">                    col += y</span><br><span class="line">                    local += <span class="number">1</span></span><br><span class="line">                row -= x</span><br><span class="line">                col -= y</span><br><span class="line">                local -= <span class="number">1</span></span><br><span class="line">                <span class="comment">#print pq</span></span><br><span class="line">                heapq.heappush(pq, (count+local, row, col))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h2 id="III-遇到洞"><a href="#III-遇到洞" class="headerlink" title="III - 遇到洞"></a>III - 遇到洞</h2><p>`499. The Maze III<br>同样道理，只需要添加条件在while循环里，然后在dir里面加入dir的字符，heap的时候</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [row,col] == destination:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">    ...</span><br><span class="line">heapq.heappush(pq, (count+local, move+path, row, col))</span><br></pre></td></tr></table></figure><p>时间：O(mn*log(mn)) – 用heapq方法每次heapify的时候是Log级别的复杂度<br>空间：O（mn）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findShortestWay</span><span class="params">(self, maze, start, destination)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type maze: List[List[int]]</span></span><br><span class="line"><span class="string">        :type ball: List[int]</span></span><br><span class="line"><span class="string">        :type hole: List[int]</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pq = [(<span class="number">0</span>,<span class="string">""</span>, start[<span class="number">0</span>],start[<span class="number">1</span>])]</span><br><span class="line">        m = len(maze)</span><br><span class="line">        n = len(maze[<span class="number">0</span>])</span><br><span class="line">        dir = [(<span class="number">0</span>,<span class="number">1</span>,<span class="string">'r'</span>),(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'d'</span>),(<span class="number">-1</span>,<span class="number">0</span>,<span class="string">'u'</span>),(<span class="number">0</span>,<span class="number">-1</span>,<span class="string">'l'</span>)]</span><br><span class="line">        <span class="keyword">while</span> pq:</span><br><span class="line">            <span class="comment">#print pq</span></span><br><span class="line">            count,move,i,j = heapq.heappop(pq)</span><br><span class="line">            <span class="keyword">if</span> maze[i][j] == <span class="number">-1</span>:</span><br><span class="line">                <span class="keyword">continue</span> <span class="comment"># cut</span></span><br><span class="line">            maze[i][j] = <span class="number">-1</span> <span class="comment"># record</span></span><br><span class="line">            <span class="keyword">if</span> i == destination[<span class="number">0</span>] <span class="keyword">and</span> j == destination[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> move</span><br><span class="line">            <span class="keyword">for</span> x,y,path <span class="keyword">in</span> dir:</span><br><span class="line">                row = i</span><br><span class="line">                col = j</span><br><span class="line">                local = <span class="number">0</span></span><br><span class="line">                <span class="comment"># record local variable</span></span><br><span class="line">                <span class="keyword">while</span> <span class="number">0</span> &lt;= row+x &lt; m <span class="keyword">and</span> <span class="number">0</span> &lt;= col+y &lt; n <span class="keyword">and</span> maze[row+x][col+y] != <span class="number">1</span> :</span><br><span class="line">                    row += x</span><br><span class="line">                    col += y</span><br><span class="line">                    local += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">if</span> [row,col] == destination:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                heapq.heappush(pq, (count+local, move+path, row, col))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"impossible"</span></span><br></pre></td></tr></table></figure><h1 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h1><h2 id="01-Matrix"><a href="#01-Matrix" class="headerlink" title="01 Matrix"></a>01 Matrix</h2><p>`542. 01 Matrix<br>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.<br>The distance between two adjacent cells is 1<br>用类似的思维，在Queue中只加入0的点，然后预设其他的点到0的距离为无穷大，这样的话，遍历的时候四个方向每次加1；遇到重复的时候取最小值就好<br>T O(mn)<br>S O(mn)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateMatrix</span><span class="params">(self, rooms)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    :type matrix: List[List[int]]</span></span><br><span class="line"><span class="string">    :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queue = []</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(len(rooms)):</span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> range(len(rooms[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">if</span> rooms[row][col] == <span class="number">0</span>:</span><br><span class="line">                queue.append((row,col))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rooms[row][col] = float(<span class="string">'inf'</span>)</span><br><span class="line">    direction = [(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">-1</span>)]</span><br><span class="line">    <span class="keyword">while</span> queue:</span><br><span class="line">        i,j = queue.pop(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> x,y <span class="keyword">in</span> direction:</span><br><span class="line">            row = i + x</span><br><span class="line">            col = j + y</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= row &lt; len(rooms) <span class="keyword">and</span> <span class="number">0</span> &lt;= col &lt; len(rooms[<span class="number">0</span>]) <span class="keyword">and</span> rooms[row][col] &gt; <span class="number">1</span> + rooms[i][j]:</span><br><span class="line">                rooms[row][col] = rooms[i][j] + <span class="number">1</span></span><br><span class="line">                queue.append((row, col))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rooms</span><br></pre></td></tr></table></figure><h1 id="286-Walls-and-Gates"><a href="#286-Walls-and-Gates" class="headerlink" title="286. Walls and Gates"></a>286. Walls and Gates</h1><p>几乎一摸一样的题，除了题目中的1改为inf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># init</span></span><br><span class="line">queue = []</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> range(len(rooms)):</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> range(len(rooms[<span class="number">0</span>])):</span><br><span class="line">        <span class="keyword">if</span> rooms[row][col] == <span class="number">0</span>:</span><br><span class="line">            queue.append((row,col))</span><br><span class="line">direction = [(<span class="number">1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">1</span>),(<span class="number">-1</span>,<span class="number">0</span>),(<span class="number">0</span>,<span class="number">-1</span>)]</span><br><span class="line"><span class="keyword">while</span> queue:</span><br><span class="line">    i,j = queue.pop(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> x,y <span class="keyword">in</span> direction:</span><br><span class="line">        row = i + x</span><br><span class="line">        col = j + y</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= row &lt; len(rooms) <span class="keyword">and</span> <span class="number">0</span> &lt;= col &lt; len(rooms[<span class="number">0</span>]) <span class="keyword">and</span> rooms[row][col] == <span class="number">2147483647</span>:</span><br><span class="line">            rooms[row][col] = rooms[i][j] + <span class="number">1</span></span><br><span class="line">            queue.append((row, col))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BFS </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Backtracking总结</title>
      <link href="/2017/09/06/Backtracking%E6%80%BB%E7%BB%93/"/>
      <url>/2017/09/06/Backtracking%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="BackingTracking系列"><a href="#BackingTracking系列" class="headerlink" title="BackingTracking系列"></a>BackingTracking系列</h1><p>4／35<br>[x] Easy<br>[x] Medium<br>[] Hard</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>凡是含有duplicate的都需要之前sorted，才能保证没有结果中没有重复</p><h2 id="经典7道题"><a href="#经典7道题" class="headerlink" title="经典7道题"></a>经典7道题</h2><h3 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a>46. Permutations</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="number">-2</span><span class="number">-3</span></span><br><span class="line"> <span class="number">-3</span><span class="number">-2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, nums, temp, ans)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(nums) == len(temp): <span class="comment"># quit loop</span></span><br><span class="line">        ans.append(list(temp))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">if</span> nums[i] <span class="keyword">in</span> temp: <span class="comment"># cut duplicate</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        temp.append(nums[i])</span><br><span class="line">        self.backtracking(nums, temp, ans)</span><br><span class="line">        temp.pop()</span><br></pre></td></tr></table></figure><h3 id="47-Permutations-II"><a href="#47-Permutations-II" class="headerlink" title="47. Permutations II"></a>47. Permutations II</h3><p>由于输入可能包含重复数字，所以就要保证去重。先排序然后创建Array记录访问过的数字，然后前面的一个数是否和自己相等，相等的时候则前面的数必须使用了，自己才能使用，这样就不会产生重复的排列了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, nums, temp, ans, used)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(temp) == len(nums):</span><br><span class="line">        ans.append(list(temp))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">        <span class="keyword">if</span> used[i] <span class="keyword">or</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i]==nums[i<span class="number">-1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i<span class="number">-1</span>]: <span class="comment"># 判断条件</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        temp.append(nums[i])</span><br><span class="line">        used[i] = <span class="literal">True</span> <span class="comment"># 记录访问</span></span><br><span class="line">        self.backtracking(nums, temp, ans, used)</span><br><span class="line">        used[i] = <span class="literal">False</span></span><br><span class="line">        temp.pop()</span><br></pre></td></tr></table></figure><h3 id="78-Subsets"><a href="#78-Subsets" class="headerlink" title="78. Subsets"></a>78. Subsets</h3><p>终止条件不同，因为要返回每一个set，所以每次backtracking的时候都要返回tempList；然后保证唯一性就是backtrack的时候index+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, nums, temp, res, start)</span>:</span></span><br><span class="line">    res.append(list(temp))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start,len(nums)):</span><br><span class="line">        temp.append(nums[i])</span><br><span class="line">        self.backtracking(nums, temp, res, i+<span class="number">1</span>)</span><br><span class="line">        temp.pop()</span><br></pre></td></tr></table></figure><h3 id="90-Subsets-II"><a href="#90-Subsets-II" class="headerlink" title="90. Subsets II"></a>90. Subsets II</h3><p>因为input含有duplicate，所以在进入backtracking之前需要检查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, nums, temp, res, start)</span>:</span></span><br><span class="line">    res.append(list(temp))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(start,len(nums)):</span><br><span class="line">        <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> nums[i] == nums[i<span class="number">-1</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        temp.append(nums[i])</span><br><span class="line">        self.backtracking(nums, temp, res, i+<span class="number">1</span>)</span><br><span class="line">        temp.pop()</span><br></pre></td></tr></table></figure><h3 id="39-Combination-Sum"><a href="#39-Combination-Sum" class="headerlink" title="39 Combination Sum"></a>39 Combination Sum</h3><p>本质上是一样的，每次传的时候target-candidates[i], 然后因为每个数字可以重复使用，所以index可以保持不变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, candidates, target, res, temp, start)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> target&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> target == <span class="number">0</span>:</span><br><span class="line">        res.append(list(temp))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(candidates)):</span><br><span class="line">            temp.append(candidates[i])</span><br><span class="line">            self.backtracking(candidates, target - candidates[i], res, temp, i)</span><br><span class="line">            temp.pop()</span><br></pre></td></tr></table></figure><h3 id="40-Combination-Sum-II"><a href="#40-Combination-Sum-II" class="headerlink" title="40 Combination Sum II"></a>40 Combination Sum II</h3><p>变化就是不可以重复利用数字，index+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, candidates, target, res, temp, start)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> target&lt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> target == <span class="number">0</span>:</span><br><span class="line">        res.append(list(temp))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start, len(candidates)):</span><br><span class="line">            <span class="keyword">if</span> i &gt; start <span class="keyword">and</span> candidates[i<span class="number">-1</span>] == candidates[i]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            temp.append(candidates[i])</span><br><span class="line">            self.backtracking(candidates, target - candidates[i], res, temp, i+<span class="number">1</span>)</span><br><span class="line">            temp.pop()</span><br></pre></td></tr></table></figure><h3 id="216-Combination-Sum-III"><a href="#216-Combination-Sum-III" class="headerlink" title="216 Combination Sum III"></a>216 Combination Sum III</h3><p>与上一道题的区别就是，输入为[1…9]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span><span class="params">(self, k, n)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :type n: int</span></span><br><span class="line"><span class="string">        :rtype: List[List[int]]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        res = []</span><br><span class="line">        self.backtracking(k,n,[],res,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, k, target, temp, res, start)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(temp) &gt; k:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> len(temp) == k <span class="keyword">and</span> target == <span class="number">0</span>:</span><br><span class="line">            res.append(list(temp))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(start, <span class="number">10</span>):</span><br><span class="line">                temp.append(i)</span><br><span class="line">                self.backtracking(k, target - i, temp, res, i+<span class="number">1</span>)</span><br><span class="line">                temp.pop()</span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><h3 id="22-Generate-Parentheses"><a href="#22-Generate-Parentheses" class="headerlink" title="22 Generate Parentheses"></a>22 Generate Parentheses</h3><p>recursion rule 就是判断left，right的count啦，直到满足right == n</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self,temp, left, right, res,n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; n:</span><br><span class="line">        self.dfs(temp+<span class="string">'('</span>,left+<span class="number">1</span>,right,res,n)</span><br><span class="line">    <span class="keyword">if</span> right &lt; left:</span><br><span class="line">        self.dfs(temp+<span class="string">')'</span>,left, right+<span class="number">1</span>, res,n)</span><br><span class="line">    <span class="keyword">if</span> right==n:</span><br><span class="line">        res.append(temp)</span><br></pre></td></tr></table></figure><h3 id="320-Generalized-Abbreviation"><a href="#320-Generalized-Abbreviation" class="headerlink" title="320. Generalized Abbreviation"></a>320. Generalized Abbreviation</h3><p>这道题debug了好久，困惑于如何使得数字和字母不会在base case的时候重复导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">3d</span><br><span class="line">2r1 2rd</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtrack</span><span class="params">(res, word, pos, string, count)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> pos == len(word):</span><br><span class="line">        <span class="keyword">if</span> count&gt;<span class="number">0</span>:</span><br><span class="line">            string += str(count)</span><br><span class="line">        res.append(string)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        backtrack(res,word,pos+<span class="number">1</span>,string,count+<span class="number">1</span>)</span><br><span class="line">        <span class="comment">## 这个track保证了index每次不断加1 从而在base的时候输出，然后每一次count同时加1，为了记录count</span></span><br><span class="line">        backtrack(res, word, pos+<span class="number">1</span>, string + (str(count) <span class="keyword">if</span> count&gt;<span class="number">0</span> <span class="keyword">else</span> <span class="string">""</span>)+ word[pos], <span class="number">0</span>)</span><br><span class="line">        <span class="comment">## 这个是为了退一步，先保存当前的count数字，然后因为数字不能连续，所以+word【index】，同时把count清0</span></span><br></pre></td></tr></table></figure><h3 id="二维backtracking"><a href="#二维backtracking" class="headerlink" title="二维backtracking"></a>二维backtracking</h3>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> Backtracking </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkedList系列</title>
      <link href="/2017/07/10/LinkedList%E7%B3%BB%E5%88%97/"/>
      <url>/2017/07/10/LinkedList%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="LinkedList系列总结"><a href="#LinkedList系列总结" class="headerlink" title="LinkedList系列总结"></a>LinkedList系列总结</h1><p>24/27<br>[x] Easy<br>[x] Medium<br>[x] Hard<br>这种题，多画图，一步步来，确定哪个node指向哪个node就会好一点,之后把图放上来，会更容易复习！</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="dummyNode"><a href="#dummyNode" class="headerlink" title="dummyNode"></a>dummyNode</h3><p>适用于头节点需要进行操作，增删改，亦或者保存头节点，不被后续操作改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dummy = ListNode(<span class="number">0</span>)</span><br><span class="line">dummy.next = head</span><br><span class="line">curr = head</span><br></pre></td></tr></table></figure><h3 id="reverseList"><a href="#reverseList" class="headerlink" title="reverseList"></a>reverseList</h3><p>Iterative版本，简要来说就是记录下一节点，当前节点指向上一节点，同步移动上一节点和当前节点。最后的curr为空，prev为头也就是最初链表的最后一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">prev = <span class="literal">None</span></span><br><span class="line">curr = head</span><br><span class="line"><span class="keyword">while</span> curr:</span><br><span class="line">    nextNode = curr.next</span><br><span class="line">    curr.next = prev</span><br><span class="line">    prev = curr</span><br><span class="line">    curr = nextNode</span><br><span class="line"><span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure><p>Recursive版本的，一直到底，然后倒叙指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">second = head.next</span><br><span class="line">head.next = <span class="literal">None</span></span><br><span class="line">rest = self.reverseList(second)</span><br><span class="line">second.next = head</span><br><span class="line"><span class="keyword">return</span> rest</span><br></pre></td></tr></table></figure><p>变种1 92. Reverse Linked List II<br>除了移动节点之外，关键是链接头和尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pre.next.next = curr //pre.next 为最初的头，.next则链接后来的尾和最初的尾 <span class="number">1</span><span class="number">-2</span><span class="number">-3</span><span class="number">-4</span><span class="number">-5</span>，<span class="number">1</span><span class="number">-4</span><span class="number">-3</span><span class="number">-2</span><span class="number">-5</span>，<span class="number">2</span><span class="number">-5</span></span><br><span class="line">pre.next = newHead // <span class="number">1</span><span class="number">-4</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>用于检测环和找中点,见于<br> 141. Linked List Cycle<br> 142. Linked List Cycle II<br> ·234. Palindrome Linked List</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fast, slow = head, head</span><br><span class="line"><span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">    fast = fast.next.next</span><br><span class="line">    slow = slow.next</span><br></pre></td></tr></table></figure><h2 id="Medium版本"><a href="#Medium版本" class="headerlink" title="Medium版本"></a>Medium版本</h2><p>·369. Plus One Linked List<br>·445. Add Two Numbers II<br>本质上用stack保存节点信息，然后不断在前方添加节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node.val = add_value % <span class="number">10</span></span><br><span class="line">carry = ListNode(add_value / <span class="number">10</span>)</span><br><span class="line">carry.next = node</span><br><span class="line">node = carry</span><br><span class="line">add_value /= <span class="number">10</span></span><br></pre></td></tr></table></figure><p>Merge，Move系列<br>·21. Merge Two Sorted Lists<br>·328. Odd Even Linked List<br>·86. Partition List</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">curr = dummy</span><br><span class="line"><span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</span><br><span class="line">    <span class="keyword">if</span> l1.val &lt; l2.val:</span><br><span class="line">        curr.next = l1</span><br><span class="line">        l1 = l1.next</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        curr.next = l2</span><br><span class="line">        l2 = l2.next</span><br><span class="line">    curr = curr.next</span><br></pre></td></tr></table></figure><p>保证两个list都存在，然后剩余的append在后面；然后移动节点的过程中要数好步伐<code>while even and even.next:</code><br>·160. Intersection of Two Linked Lists<br>·19. Remove Nth Node From End of List</p><p>`61. Rotate List<br>trick的地方是找到最后一个node，并且链接第一个，使用常用模版，不过稍加改动，因为要找到最后一个node而不是长度，所以要提前终止循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">length = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> curr.next:</span><br><span class="line">    curr = curr.next</span><br><span class="line">    length += <span class="number">1</span></span><br><span class="line">curr.next = head</span><br><span class="line">move = length<span class="number">-1</span>-k%length</span><br></pre></td></tr></table></figure><p>综合<br>`143. Reorder List<br>结合 以上多种方法，快慢指针找中点，反转，merge</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mid = self.findMiddle(head)</span><br><span class="line">tail = self.reverse(mid.next)</span><br><span class="line">mid.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">self.merge(head, tail)</span><br></pre></td></tr></table></figure><p>`23. Merge k Sorted Lists<br>一种方法是利用merge two list然后不断divide and conquer，另外一种比较简洁的是利用PriorityQueue，然后不断put和poll()进而每一个node都是所有优先队列中最小的一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">q = PriorityQueue()</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> lists:</span><br><span class="line">    <span class="keyword">if</span> node: <span class="comment">## empty</span></span><br><span class="line">        q.put((node.val, node))</span><br><span class="line"><span class="keyword">while</span> q.qsize():</span><br><span class="line">    curr.next = q.get()[<span class="number">1</span>]</span><br><span class="line">    curr = curr.next</span><br><span class="line">    <span class="keyword">if</span> curr.next:</span><br><span class="line">        q.put((curr.next.val, curr.next))</span><br></pre></td></tr></table></figure><p>`82. Remove Duplicates from Sorted List II<br>因为要移除所有重复的node，所以势必要prev保存上一节点，然后如果中间因为重复节点而curr！= prev.next，要把prev节点的next放到curr的next节点，因为curr为重复节点的最后一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> curr:</span><br><span class="line"><span class="keyword">while</span> curr.next <span class="keyword">and</span> curr.val == curr.next.val: <span class="comment">## [1]</span></span><br><span class="line">curr = curr.next</span><br><span class="line"><span class="keyword">if</span> prev.next != curr:</span><br><span class="line">prev.next = curr.next</span><br><span class="line">curr = prev.next</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">prev = prev.next</span><br><span class="line">curr = curr.next</span><br></pre></td></tr></table></figure><p>`109. Convert Sorted List to Binary Search Tree<br>用helperfunction帮助，每一步找出子链表的中点，然后分别递归left和right节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> fast!= tail <span class="keyword">and</span> fast.next != tail:</span><br><span class="line">    fast = fast.next.next</span><br><span class="line">    slow = slow.next</span><br><span class="line">root = TreeNode(slow.val)</span><br><span class="line">root.left = self.helper(head, slow)</span><br><span class="line">root.right = self.helper(slow.next, tail)</span><br></pre></td></tr></table></figure><p>·148. Sort List<br>分治法，然后分别对子链表merge</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">prev,fast, slow =  <span class="literal">None</span>, head, head</span><br><span class="line"><span class="keyword">while</span> fast <span class="keyword">and</span> fast.next:</span><br><span class="line">    prev = slow</span><br><span class="line">    slow = slow.next</span><br><span class="line">    fast = fast.next.next</span><br><span class="line"></span><br><span class="line">prev.next = <span class="literal">None</span> <span class="comment">## cut the middle</span></span><br><span class="line"></span><br><span class="line">l1 = self.sortList(head)</span><br><span class="line">l2 = self.sortList(slow)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> self.merge(l1, l2)</span><br></pre></td></tr></table></figure><p>·24. Swap Nodes in Pairs<br>这道题勤画图，一步步来就好，iterative的方法比较烦，不过是<code>Reverse Nodes in k-Group</code>的简化版，那道题是LinkedList集大成者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> curr.next <span class="keyword">and</span> curr.next.next:</span><br><span class="line">    first = curr.next   <span class="comment"># 1</span></span><br><span class="line">    second = curr.next.next <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">    first.next = second.next <span class="comment"># 1-3</span></span><br><span class="line">    curr.next = second  <span class="comment">#-2</span></span><br><span class="line">    curr.next.next = first  <span class="comment">#2-1</span></span><br><span class="line">    curr = curr.next.next <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><p>`25. Reverse Nodes in k-Group<br>这道题是一道典型的综合题，适合复习备考多刷。它的子function是reverseList的改良，因为需要保存头节点和尾节点，所以需要设置lastNode和nextNode，然后与之相对应的就是lastNode不断和后面的节点进行调换。可以看看对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 0-&gt;1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</span><br><span class="line"> * |           |</span><br><span class="line"> * pre        next</span><br><span class="line"> *</span><br><span class="line"> * after calling pre = reverse(pre, next)</span><br><span class="line"> *</span><br><span class="line"> * 0-&gt;3-&gt;2-&gt;1-&gt;4-&gt;5-&gt;6</span><br><span class="line"> *          |  |</span><br><span class="line"> *          pre next</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseNode</span><span class="params">(self, pre, nextNode)</span>:</span></span><br><span class="line">    lastNode = pre.next</span><br><span class="line">    curr = lastNode.next</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> curr != nextNode:</span><br><span class="line">        lastNode.next = curr.next</span><br><span class="line">        curr.next = pre.next</span><br><span class="line">        pre.next = curr</span><br><span class="line">        curr = lastNode.next</span><br><span class="line">    <span class="keyword">return</span> lastNode</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head)</span>:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> head <span class="keyword">or</span> <span class="keyword">not</span> head.next:</span><br><span class="line">    <span class="keyword">return</span> head</span><br><span class="line">prev = <span class="literal">None</span></span><br><span class="line">curr = head</span><br><span class="line"><span class="keyword">while</span> curr:</span><br><span class="line">    nextNode = curr.next</span><br><span class="line">    curr.next = prev</span><br><span class="line">    prev = curr</span><br><span class="line">    curr = nextNode</span><br><span class="line"><span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LinkedList </tag>
            
            <tag> TwoPointer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Longest Substring系列</title>
      <link href="/2017/07/07/Longest-Substring%E7%B3%BB%E5%88%97/"/>
      <url>/2017/07/07/Longest-Substring%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="先从最基础的开始"><a href="#先从最基础的开始" class="headerlink" title="先从最基础的开始"></a>先从最基础的开始</h2><h3 id="3-Longest-Substring-Without-Repeating-Characters"><a href="#3-Longest-Substring-Without-Repeating-Characters" class="headerlink" title="3. Longest Substring Without Repeating Characters"></a>3. Longest Substring Without Repeating Characters</h3><p>这道题就是使用一个dict来维护字符出现的位置，一旦发现新字符出现在字典里并且start的位置&lt;= 记录位置（就是连续同样字符保留最后一个） start更新为上个出现该字符的index+1，类似滑动窗口，一旦发现重复元素就去把上一次的元素位置+1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">in</span> dic <span class="keyword">and</span> start &lt;= dic[s[i]]:</span><br><span class="line">                start = dic[s[i]] + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res = max(res, i - start + <span class="number">1</span>)</span><br><span class="line">            dic[s[i]] = i</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="159-Longest-Substring-with-At-Most-Two-Distinct-Characters"><a href="#159-Longest-Substring-with-At-Most-Two-Distinct-Characters" class="headerlink" title="159. Longest Substring with At Most Two Distinct Characters."></a>159. Longest Substring with At Most Two Distinct Characters.</h3><h3 id="340-Longest-Substring-with-At-Most-K-Distinct-Characters"><a href="#340-Longest-Substring-with-At-Most-K-Distinct-Characters" class="headerlink" title="340. Longest Substring with At Most K Distinct Characters."></a>340. Longest Substring with At Most K Distinct Characters.</h3><p>类似的思路，用字典来保存出现次数，用字典的长度维护K值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLongestSubstringTwoDistinct</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type s: str</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        char_dict = &#123;&#125;</span><br><span class="line">        start = <span class="number">0</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] <span class="keyword">not</span> <span class="keyword">in</span> char_dict:</span><br><span class="line">                char_dict[s[i]] = <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                char_dict[s[i]] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> len(char_dict)&gt;<span class="number">2</span>:</span><br><span class="line">                temp = s[start]</span><br><span class="line">                <span class="keyword">if</span> char_dict[temp] &gt; <span class="number">1</span>:</span><br><span class="line">                    char_dict[temp] -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">del</span>(char_dict[temp])</span><br><span class="line">                start += <span class="number">1</span></span><br><span class="line">            res = max(res, i -start + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="另外的形式"><a href="#另外的形式" class="headerlink" title="另外的形式"></a>另外的形式</h2><h3 id="395-Longest-Substring-with-At-Least-K-Repeating-Characters"><a href="#395-Longest-Substring-with-At-Least-K-Repeating-Characters" class="headerlink" title="395. Longest Substring with At Least K Repeating Characters"></a>395. Longest Substring with At Least K Repeating Characters</h3><p>At least就表明至少有那么多，用字典就不太好使了，因为要不断考虑到之前的情况，倒不如退而求其次，divide and conquer 找到最不可能的字符，然后知道里面的字符至少出现过k次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> len(s) &lt; k:</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">c = min(set(s), key=s.count) <span class="comment">## 按照count排序</span></span><br><span class="line"><span class="keyword">if</span> s.count(c) &gt;= k:</span><br><span class="line">    <span class="keyword">return</span> len(s) <span class="comment">## 都满足</span></span><br><span class="line"><span class="keyword">return</span> max(self.longestSubstring(t, k) <span class="keyword">for</span> t <span class="keyword">in</span> s.split(c))</span><br></pre></td></tr></table></figure><h3 id="424-Longest-Repeating-Character-Replacement"><a href="#424-Longest-Repeating-Character-Replacement" class="headerlink" title="424. Longest Repeating Character Replacement"></a>424. Longest Repeating Character Replacement</h3><p>比较类似 340那道题，同样用字典记录字符出现次数，然后用子序列中出现频率最大的次数加上能被修改的次数K 和窗口长度相比（也就是说窗口中都能统一）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char_dict[value] += <span class="number">1</span></span><br><span class="line">res = max(res, char_dict[value])</span><br><span class="line"><span class="keyword">if</span> res + k &lt;= index - start :</span><br><span class="line">    char_dict[s[start]] -= <span class="number">1</span></span><br><span class="line">    start += <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> SlidingWindow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Joshua美东探索III--Maine &amp; Acadia National Park</title>
      <link href="/2017/06/03/TEST/"/>
      <url>/2017/06/03/TEST/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><blockquote><p>Time: 2017-05-23~05-25<br>Travel: Rental Car</p></blockquote><h1 id="北境"><a href="#北境" class="headerlink" title="北境"></a>北境</h1><p>平潭清秀的阿卡迪亚是密西西比河以东第一个国家公园，没有黄石的奇幻与优胜美地的 俊俏，这里更像是百科全书：港口，沙滩，悬崖，海岛，灯塔，峡湾，山岭，湖泊–一切的户外活动几乎无所不能。平淡中展现的生活恰似远离了中国游客的旋绕。</p><a id="more"></a><h1 id="缅因"><a href="#缅因" class="headerlink" title="缅因"></a>缅因</h1><h2 id="天气"><a href="#天气" class="headerlink" title="天气"></a>天气</h2><p>多变的天气环绕了缅因，自然给予了什么我们就接受什么，缅因人的生活追随着自然，也就像标牌所示的： The Way Life Should Be<br><a href="https://postimg.org/image/kseippz5v/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/ucy5clohz/IMG_4928.jpg" alt="IMG_4928.jpg"></a><br><a href="https://postimg.org/image/tq3u0tgzn/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/sb29c3fwn/IMG_3168.jpg" alt="IMG_3168.jpg"></a><br>时速80mile在缅因州的高速上</p><p><a href="">https://youtu.be/plicXEq3aHk</a></p><h2 id="龙虾"><a href="#龙虾" class="headerlink" title="龙虾"></a>龙虾</h2><p>据说全美90%的龙虾都产自缅因州，此话所言非虚。鲜活的龙虾即刻用海水煮熟，配上薯片，沙拉，新英格兰Clam Chowder，就是一顿绝美的餐食<br><a href="https://postimg.org/image/6h47cavr7/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/wcnxvhxl3/IMG_3225.jpg" alt="IMG_3225.jpg"></a><br><a href="https://postimg.org/image/6ndb1nfib/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/9u7ul9zyf/Substandard_Full_Size_Render_6.jpg" alt="SubstandardFullSizeRender 6.jpg"></a><br><a href="https://postimg.org/image/t4a9qywjn/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/3y9bk4v9j/IMG_5089.jpg" alt="IMG_5089.jpg"></a><br><a href="https://postimg.org/image/a6undpsub/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/5kyj5d7bb/IMG_4891.jpg" alt="IMG_4891.jpg"></a></p><h2 id="灯塔"><a href="#灯塔" class="headerlink" title="灯塔"></a>灯塔</h2><p>波特兰的南面，有一处叫做“伊丽莎白岬角”（Cape Elizabeth）的小镇里，站立着一个著名灯塔，他的名字叫“波特兰灯塔”，是缅因州65个灯塔中最古老且至今仍在运作的灯塔。许多游客，尤其是专业摄影师非常偏爱这里的日出，很多人早早就在此守候，等待太阳露面的那一刻。赏日出、吹海风、听海浪，人生的美好也不过如此了吧！<br><a href="https://postimg.org/image/rizlcwbpf/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/e22mu11dz/Substandard_Full_Size_Render_3.jpg" alt="SubstandardFullSizeRender 3.jpg"></a><br><a href="https://postimg.org/image/3qlonmkar/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/nl7q9qzif/IMG_4935.jpg" alt="IMG_4935.jpg"></a><br><a href="https://postimg.org/image/xh8t9e5ab/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/66ni1h2dj/IMG_4940.jpg" alt="IMG_4940.jpg"></a></p><h2 id="阿卡迪亚国家公园"><a href="#阿卡迪亚国家公园" class="headerlink" title="阿卡迪亚国家公园"></a>阿卡迪亚国家公园</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>这里放一张来自<a href="">http://www.acadiamagic.com</a>的公园地图，然后简单介绍一下。公园的主要景点集中在岛的东边，入口处有个Hulls Cove Visitor Center，然后再往前开就是围绕着Cadillac Mountain的环线公路（地图上比较粗的黑线），基本上绕着开一圈就能把大部分景点看过来，这里要注意的是环线的右半边一直快到Jordan Pond House是单行，左半边这一小段是双行，所以顺时针开比较合理。Cadillac Mountain有专门一条路可以开上去，山上有停车的地方。岛的西南部分景点较少，比较有名的只有Bass Harbor Light House，从Bar Harbor开过去要半个多小时。大概就是这样了，美国国家公园官方网站<a href="">http://www.nps.gov/acad/index.htm</a>有大量信息，包括哪条路在整修，哪天关园之类的，去之前一定要去看一下。<br><img data-src="http://pic.qyer.com/album/17b/97/740304/index" alt=""></p><h3 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h3><p>Bass Harbor LightHouse<br><a href="https://postimg.org/image/7e1ftoshv/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/xz3yp8uvb/Substandard_Full_Size_Render_10.jpg" alt="SubstandardFullSizeRender 10.jpg"></a><br><a href="https://postimg.org/image/tg0wv7rr7/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/7tlwe6t6v/Full_Size_Render_2.jpg" alt="FullSizeRender 2.jpg"></a><br>如美如画的海滩<br><a href="https://postimg.org/image/68218mtkz/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/n8kxhb6mf/Substandard_Full_Size_Render_9.jpg" alt="SubstandardFullSizeRender 9.jpg"></a><br>明信片般的Jordan Pond House<br><a href="https://postimg.org/image/6tmeqzz9f/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/jl0kxi91j/IMG_5017.jpg" alt="IMG_5017.jpg"></a><br><a href="https://postimg.org/image/88sktgpqb/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/9b2rc08jr/Substandard_Full_Size_Render_4.jpg" alt="SubstandardFullSizeRender 4.jpg"></a><br><a href="https://postimg.org/image/dvtj4ohmr/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/hffguhkcn/IMG_2634.jpg" alt="IMG_2634.jpg"></a><br>Cadillac Mountain<br><a href="https://postimg.org/image/bpumwfosj/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/rbbyge0qv/Substandard_Full_Size_Render_7.jpg" alt="SubstandardFullSizeRender 7.jpg"></a><br>其他<br><a href="https://postimg.org/image/bi6zzxdtv/" target="_blank" rel="noopener">![SubstandardFullSizeRender.jpg]<br>(https://s5.postimg.org/vpkfs8bbb/Substandard_Full_Size_Render.jpg)</a><br><a href="https://postimg.org/image/ugrysutz7/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/p5d2857wn/Substandard_Full_Size_Render_2.jpg" alt="SubstandardFullSizeRender 2.jpg"></a><br><a href="https://postimg.org/image/bgsgsrmmb/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/ninumwvuv/IMG_5003.jpg" alt="IMG_5003.jpg"></a><br><a href="https://postimg.org/image/4b5b422wz/" target="_blank" rel="noopener"><img data-src="https://s5.postimg.org/gd0oy7c5j/Substandard_Full_Size_Render_8.jpg" alt="SubstandardFullSizeRender 8.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> Travel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maine </tag>
            
            <tag> Park </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quote John Adams--Education</title>
      <link href="/2017/05/03/Quote-John-Adams-Education/"/>
      <url>/2017/05/03/Quote-John-Adams-Education/</url>
      
        <content type="html"><![CDATA[<p>John Adams<br>US diplomat &amp; politician (1735 - 1826) </p><blockquote><p>I must study politics and war that my sons may have liberty to study mathematics and philosophy. My sons ought to study mathematics and philosophy, geography, natural history, naval architecture, navigation, commerce, and agriculture, in order to give their children a right to study painting, poetry, music, architecture, statuary, tapestry, and porcelain.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Quote </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生产力与实用性工具</title>
      <link href="/2017/04/20/%E7%94%9F%E4%BA%A7%E5%8A%9B%E4%B8%8E%E5%AE%9E%E7%94%A8%E6%80%A7%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/04/20/%E7%94%9F%E4%BA%A7%E5%8A%9B%E4%B8%8E%E5%AE%9E%E7%94%A8%E6%80%A7%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h1 id="生产力工具"><a href="#生产力工具" class="headerlink" title="生产力工具"></a>生产力工具</h1><h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><ol><li><a href="https://brew.sh/" target="_blank" rel="noopener">Homebrew</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure></li><li><a href="https://www.jetbrains.com" target="_blank" rel="noopener">JetBrains系列</a>(可以使用学生优惠)<ul><li><a href="https://www.jetbrains.com/idea" target="_blank" rel="noopener">IntelliJ</a></li><li><a href="https://www.jetbrains.com/pycharm" target="_blank" rel="noopener">PyCharm</a></li><li><a href="https://www.jetbrains.com/webstorm" target="_blank" rel="noopener">WebStorm</a></li><li><a href="https://www.jetbrains.com/ruby" target="_blank" rel="noopener">RubyMine</a></li><li><a href="https://www.jetbrains.com/objc" target="_blank" rel="noopener">AppCode</a><a id="more"></a></li></ul></li><li><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime Text 3</a></li><li><a href="https://www.iterm2.com/" target="_blank" rel="noopener">iTerm 2(终端)</a></li><li><a href="http://zipzapmac.com/go2shell" target="_blank" rel="noopener">Go2Shell</a></li><li><a href="https://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown（比较好用的MarkDown编辑器）</a></li><li><a href="https://kapeli.com/dash" target="_blank" rel="noopener">Dash(文档)</a></li></ol><h2 id="实用类"><a href="#实用类" class="headerlink" title="实用类"></a>实用类</h2><ol><li><a href="http://weiboformac.sinaapp.com/" target="_blank" rel="noopener">Maipo（微博）</a></li><li><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred 3</a></li><li><a href="http://olsa1d2zk.bkt.clouddn.com/Halo_v1.5.3.zip" target="_blank" rel="noopener">Halo （豆瓣音乐）</a></li><li><a href="https://nearlock.me/" target="_blank" rel="noopener">Near Lock （距离解锁）</a></li><li><a href="https://www.rescuetime.com/" target="_blank" rel="noopener">RescueTime （统计工作效率软件）</a></li><li><a href="http://arkanath.com/FreshBackMac/" target="_blank" rel="noopener">FreshBackMac （自动换壁纸）</a></li><li><a href="https://popcorn-time.to/" target="_blank" rel="noopener">PopcornTime （娱乐休闲）</a></li></ol><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><ol><li><a href="https://notion.ai/" target="_blank" rel="noopener">Notion （智能邮件集合）</a></li><li><a href="https://mint.intuit.com/" target="_blank" rel="noopener">Mint （财务整理）</a></li><li><a href="https://robinhood.com" target="_blank" rel="noopener">Robinhood （小额美股投资）</a></li><li><a href="https://www.moves-app.com/" target="_blank" rel="noopener">Moves （位置记录）</a></li><li><a href="https://gyrosco.pe/" target="_blank" rel="noopener">Gyroscope （健康数据整合）</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tools </tag>
            
            <tag> Mac </tag>
            
            <tag> IOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewsLetter Make a product</title>
      <link href="/2017/04/20/NewsLetter-Make-a-product/"/>
      <url>/2017/04/20/NewsLetter-Make-a-product/</url>
      
        <content type="html"><![CDATA[<h1 id="Lesson-1-Find-a-problem-not-a-Solution"><a href="#Lesson-1-Find-a-problem-not-a-Solution" class="headerlink" title="Lesson 1: Find a problem, not a Solution"></a>Lesson 1: Find a problem, not a Solution</h1><p>The first step to building something is determining what you are going to build.  But this isn’t as simple as many may think. The idea you choose to pursue will account for a large part of the success or failure of your product.</p><p>Right this second, I want everyone to kill any idea they came into this program with.  Why?  Because starting with an idea is a huge red flag and despite what many people say - having an idea is not the first step.</p><p>The first thing that everyone must complete is to think of a problem.  By starting with a problem and not a potential solution, you will be much less likely to build something that doesn’t really serve a purpose or that may solve a problem but that problem may be so minuscule that you have trouble getting people to convert.</p><p>Thinking of an idea comes later: when you know a problem that you are going to solve and when you know the reasons why that problem is a problem in the first place.</p><p>Your assignment for the next four days is simple, I want you to make a list of problems that you are passionate about solving.  Use a Google Sheet with two columns, in the first list all of the problems you can think of that you are passionate about solving.  In the second column rate each problem on a scale of 1(not that passionate) to 10 (the purpose of my life is to solve this problem).</p><p>That’s all for now.  Feel free to share your list of problems with me, I would love to see what people are coming up with.</p><a id="more"></a><h1 id="Lesson-2-Email-and-talk-to-everyone-that-will-listen"><a href="#Lesson-2-Email-and-talk-to-everyone-that-will-listen" class="headerlink" title="Lesson 2: Email and talk to everyone that will listen"></a>Lesson 2: Email and talk to everyone that will listen</h1><p>Now that you have a list of problems, the next step is discovering why those are problems in the first place.</p><h2 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1."></a>Step 1.</h2><p>Choose three problems you should focus on<br>these should be chosen by combining two factors - the first is your passion for the problem, the second is the feasibility of creating a solution for the problem.  If you don’t think you can solve any of your problems, you can always bring them down in scope.  </p><p>For example, perhaps one of your problems was climate change.  While you are all amazingly talented students, launching a solution meant to solve a world crisis in your free time over the summer isn’t really feasible.  However, it is easy to lower the scope of that issue.  Maybe there isn’t enough education about climate change amongst the youth in your neighborhood, or maybe your county has the lowest levels of recycling in your state.  </p><p>There are always ways of breaking large problems into smaller, more solvable ones.  If you’re having problems doing this, just reply to this email and I’ll help you out.</p><h2 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a>Step 2</h2><p>Once you have decided on 3 problems to focus on, begin to email, call, and talk to as many people as you can that are stakeholders for each problem.  Just keep in mind that depending on what it is, a problem may have multiple different types of stakeholders.  It is important to talk to all of them to get an idea of the problem from the various angles.</p><p>You can send them an email similar to this one that I used…</p><p>Hi [name],</p><p>I’m  a student at the University of Virginia hoping to spend 15 minutes on the phone with other students across the country who are experiencing a disappointment with the education they are receiving. I’m just doing some research and have nothing to sell. Would you be available for a quick call tomorrow at 3pm?</p><p>When you are communicating with these stakeholders, have about 5-8 questions prepared that are all focused on validating these three things:</p><ol><li><p>Do they actually experience the problem (why is it a problem for them now)</p></li><li><p>How painful is the problem to them (is it an essential problem or is it just a “it would be nice to have fixed problem”?)</p></li><li><p>How do they solve the problem now (What’s wrong with the current solution?)</p></li></ol><p>Here are the 7 questions that I had prepared</p><p>While you are talking/emailing with stakeholders be sure to record everything they say. Take good notes while you are on the phone and immediately after you hang up - rewrite your notes into an Evernote document, or an organized Google Sheet.  This process of rewriting what you just learned will help reinforce the information and make it clearer to you moving forward.</p><p>Go through this process with at least 6 people for each of your three problems.  That means actually talking to 18 people.  Which means you will likely have to email around 50, as typically only a third of the people you email will be willing to fit you into their schedule. That’s a lot of emails but you know how to hustle so get to it.</p><p>Here are a few pointers to help you get there.</p><ol><li><p>Use LinkedIn’s search feature to find people that you may want to talk to.</p></li><li><p>Use Anymailfinder to find the email of almost anyone just based off their name and the company they work for.</p></li><li><p>Send a follow-up email every 2-3 business days if they do not respond.  You’ll be surprised how effective a quick follow-up can be.<br>Here’s an example of a follow-up email I used.</p></li></ol><p>Hi [name],</p><p>Just wanted to jump to the top of your inbox again.  As I mentioned, I’m researching [problem] and would love it if I could jump on a quick 15-minute call with you.</p><p>Let me know what times work the best for you.</p><p>As always, I’m interested in what you guys are learning and what problems you are experiencing. Reply directly to this email and tell me what’s up, I’d love to help wherever I can.</p><h1 id="Lesson-3-📂-Organize-📂"><a href="#Lesson-3-📂-Organize-📂" class="headerlink" title="Lesson 3: 📂 Organize 📂"></a>Lesson 3: 📂 Organize 📂</h1><p>Take everything you learned and just digest it.  Read over all of your notes, do some outside research online, read some articles and really try to get a good understanding of each of the problems that you have been pursuing.  It is now time to pick one.</p><p>Here are some factors that you should consider when narrowing down your problems from three to one.</p><ol><li><p>How much information did you gather from stakeholders (the more the better)</p></li><li><p>How painful is the problem? (the more painful, the more willing people will be to trying your solution)</p></li><li><p>What other solutions already exist?  Do those solutions have their own problems?</p></li><li><p>What do you know the most about?  It is near impossible to build something successful without being an expert in that field.  Make sure you aren’t getting in over your head here.</p></li></ol><p>Take these four things into consideration while making your decision and narrow it down to one.  Remember, you should not be spending any time thinking about a solution to build yet!</p><p>Think of what we are doing now as building a foundation.  You must have a strong, structured foundation that is based on true principles before you can actually start building a structure.</p><p>After you have one problem, your final task for this week is to talk to at least five more people.  Ask these people much deeper questions that try to get at why the problem is a problem.  Often times you will discover smaller underlying problems that are extremely important to keep in mind moving forward.  For example, if your problem is that high school students don’t know how to navigate the college admissions process, why is this a problem?  Do students not like going to their school guidance counselors for help?  Why?  Are there not enough resources available? Why is that?  Are students just lazy and don’t care enough to do research on their own? Why?</p><h1 id="Lesson-4-Nail-Down-What-You-Learned"><a href="#Lesson-4-Nail-Down-What-You-Learned" class="headerlink" title="Lesson 4: Nail Down What You Learned"></a>Lesson 4: Nail Down What You Learned</h1><p>By now you have done a lot of research and interviews, and while you certainly aren’t done with that (no one is ever done), you are closer to thinking about a potential solution.</p><p>Take everything you have learned and try to fit it into a problem statement using a structure like one below.  Start by making a post-it note for all of the different stakeholders involved in your problem.  Then fill out the rest of the columns for each of the stakeholders.<br>This exercise will help you truly understand everything you have learned in a simplified form and help you begin to brainstorm.</p><p>Take a picture of your problem statements and send them to me.  I would love to see what you guys came up with.</p><h1 id="Lesson-5-Create-an-MLP"><a href="#Lesson-5-Create-an-MLP" class="headerlink" title="Lesson 5: Create an MLP"></a>Lesson 5: Create an MLP</h1><p>Okay so you have your problem, you have a great understanding of why it is a problem, and now it is time to start building something.  But this isn’t the time to start building something polished.  For the next 4 days, you should focus on completing an MLP.  MLP stands for Minimum Lovable Product, it is the simplest possible thing that solves the root problem that your potential users are facing.  The MLP does not have to resemble your final product at all, but it should try to solve the problem in a way similar to what you imagine your final project doing.  It also does not have to have any of the cool features that could improve usability.  The only thing that it has to do is begin to solve the problem.  In the end, it is not the MLP that is very important, it is the feedback that you will collect.</p><p>Here are a few examples:<br>-If you want to make unemployed people more aware of available jobs, instead of creating an online job board right off the bat, make a very good, well-organized Google Sheet that you can share with people that acts as a huge database of available jobs.</p><p>-If you want to run a month-long soccer boot camp, try running a one day camp with local neighborhood kids for free.</p><p>-If you want to start a magazine that increases awareness of the amazing things women in tech are building, set up a MailChimp account, write a few email articles and send them to a list of everyone you know.</p><p>No matter what you think you are going to build, there is always an ultra-simple way to do it that can be thrown together in a day or two.</p><p>So make sure that in four days you have an MLP that is ready to be sent out to people.</p><h1 id="Lesson-6-Getting-Feedback"><a href="#Lesson-6-Getting-Feedback" class="headerlink" title="Lesson 6: Getting Feedback"></a>Lesson 6: Getting Feedback</h1><p>So you have your MLP ready to go.  It is now time to send it to users and get your first rounds of feedback.  Start with the people that you have already talked to over the phone.  Send them a follow up email thanking them for their time and give them a brief summary of what you have learned from talking to them and the many other people in similar positions.  At the end of the email tell them that you took what you learned and tried to make a simple solution that you could build in a day.  Ask them to test it out.  Many people argue that you should try to get as many users as possible at this point. However, I strongly disagree.  Get at least 10 testers and you will be able to see trends in what they say about your MLP.  By having 100, 500, or even 1,000 you won’t see many deviations from the early trends of the first 10 or so.</p><p>There are two advantages of having a small (but just large enough) pool of early testers.  First, it saves a ton of valuable time that you could be putting towards building your project.  Secondly, if your MLP really sucks (which I’m sure none of yours do) then you have only disappointed 10 potential users which is very easy to forget and recover from.</p><p>After you have given your testers enough time to test your MLP, try to jump on another quick call with them.  And again, have a series of questions ready to go.  These questions should all be focused on their usage of the product.  You should try to find out these points from all of your testers:</p><ol><li><p>Did this solution solve the problem for you?  Completely or only partially?</p></li><li><p>How often did you use it?</p></li><li><p>What was lacking with it? What problems still exist for you?</p></li></ol><p>Don’t forget to take great notes during these calls and then rewrite them into an organized document immediately after the call.</p><p>Right now you are trying to figure out if you’re on the right path or if a different approach may work to solve the problem in a better way.  Negative feedback is valuable here! Do not ignore, and certainly don’t be discouraged by it.  Bad feedback only means you found a way not to solve a problem and will save you very valuable time down the road.</p><p>At this point, you should start keeping a list that contains the name and email of everyone that you have talked to at this point. It is important to keep this list up-to-date, ideally, the people you are talking to now will turn into the first users of your project once it is completed.</p><p>I can not stress enough how important the people you are talking to now are.  Always be very gracious of their time, and always be sure to follow up with them, relay any new information you have learned, or give them updates as to where you are in the launching process.  People love stories and involving people in your launching story will make them much more likely to become early adopters.</p><h1 id="Lesson-7-Put-Your-Head-Down-and-Build"><a href="#Lesson-7-Put-Your-Head-Down-and-Build" class="headerlink" title="Lesson 7: Put Your Head Down and Build"></a>Lesson 7: Put Your Head Down and Build</h1><p>So you have some feedback about your MLP and you’ve spent some time digesting everything you learned by talking to your first round of testers.  I will repeat two important points again.</p><ol><li><p>Your MLP does not have to resemble your final project, it only has to try to tackle the problem in a similar fashion.</p></li><li><p>You want to learn about underlying problems and behaviors by testing your MLP and start to think about how you will address these before you start building your beta product.  For example, maybe you want to connect people with similar interests.  You may learn that the first message is the hardest part and that in most cases testers didn’t message their connections because they didn’t know what to say at first.  You may take this information and hypothesize that by providing prompts for the first message, people will talk to more of their connections.</p></li></ol><p>Your next step is to start building your beta product.  How should your beta product differ from your MLP?  The beta is like a rough draft, it should closely resemble in form and structure what you are trying to make.  So if you are making an app, your beta should be an app.  If you are publishing a magazine, the beta should be some form of publication.  If you are launching a food delivery company, deliver some actual food.</p><p>One very important thing that I want to point out here.  Choose something that you can build. This means that if you are not a developer DO NOT say that you’re going to build an app.  If you don’t have much design experience, don’t say that you want to launch a series of videos teaching design.  This isn’t to say that you can’t learn new things but to launch by the end of the summer, stick to what you know.</p><p>Your beta does not have to be polished.  It does not have to have every core feature that you think would be useful.  The purpose of the beta is just to get something in testers’ hands that is similar to what you plan to build and ask them about it.  You may learn that a feature you built wasn’t very useful, or the testers may give you awesome ideas that could add a lot of value.  But let’s not worry about that yet.</p><p>Building a beta product is a lot of work but you guys are all smart and you know how to hustle.  The work you put in here will help you out later.  The beta product, with a few small changes, will become the final product.  </p><p>I will say that the best way to start building is to create a product backlog, essentially a to-do list of all the things that need to be completed in order to get your beta completed.  Trello is hands-down the best platform to use for creating a backlog and then keeping it updated.  It’s also free.</p><p>Building a beta product may seem like a huge task but just break it down into little pieces.  Then eventually all of those pieces will add up to something really cool.  If you ever feel overwhelmed, just ask yourself: What can I do today?  This question often helps people break big tasks into smaller ones.</p><p>Depending on your project, this will take longer for some people but just put your head down and build.  I have scheduled about 2.5 weeks just to building the beta so make sure you plan accordingly.</p><h1 id="Lesson-8-Tools-To-Help-You-Out"><a href="#Lesson-8-Tools-To-Help-You-Out" class="headerlink" title="Lesson 8: Tools To Help You Out"></a>Lesson 8: Tools To Help You Out</h1><p>The only thing I have for today is a few tools that I would like to share with you all.  These tools have helped me in the past when I have been building different beta products so I hope they can do the same for you.</p><ol><li><p>Unsplash - Free (do whatever you want) high-resolution photos.  This is extremely helpful for those of you building tech or printed products and need good looking images.</p></li><li><p>Forest - A fun productivity app that encourages you to focus for 30-minute time intervals.  If you don’t, a virtual tree in your forest dies.</p></li><li><p>SlimFAQ - Build a FAQ page quickly and easily for your website or application.</p></li><li><p>Invoicely - free, unlimited online invoices   </p></li><li><p>NewsletterStash - Hand curated directory of the best email newsletters.  This is a great resource if your project includes a mailing list.  It has great examples that you can study and you can mimic what the professionals are doing.</p></li><li><p>Startup Stash - A list of more than 400 resources for you to use while building your startup</p></li><li><p>Arka - The easiest way to order custom packaging.  Does your project involve delivery of any kind?  You’ll want to visit this site.</p></li><li><p>Logo Maker - Create professional logos in minutes, on your phone.</p></li><li><p>Splash - Splash empowers you to create memorable event experiences through beautiful design, powerful planning tools &amp; meaningful media integration.  This tool is perfect if you are planning to build a class, a summer camp, a concert, or anything along those lines.  It creates a beautiful customizable website that allows you to collect payments.</p></li><li><p>Squarespace - Another great website builder option.  This is the best if you are interested in creating an e-commerce store or a blog.</p><h1 id="Lesson-9-Fixes-To-Common-Problems-While-Building"><a href="#Lesson-9-Fixes-To-Common-Problems-While-Building" class="headerlink" title="Lesson 9: Fixes To Common Problems While Building"></a>Lesson 9: Fixes To Common Problems While Building</h1><p>Today’s email is pretty light just because I know you all are working hard.</p></li></ol><p>If you haven’t done so, email me, I’d love to hear about what you are building but more importantly what problems you are having.  If I can’t help you myself, I’ll connect you with someone who can.</p><h1 id="Lesson-10-Start-Thinking-About-Your-Launch"><a href="#Lesson-10-Start-Thinking-About-Your-Launch" class="headerlink" title="Lesson 10: Start Thinking About Your Launch"></a>Lesson 10: Start Thinking About Your Launch</h1><p>It is important to keep your launch in the back of your mind while you are building.</p><p>At this point, I want you all to start taking steps so that your launch will be easy when it comes around.  So what should you be doing?</p><p>Create social media accounts.  Facebook, Instagram, Twitter, Pinterest, wherever you think your audience spends time.</p><p>Get on Medium and write a quick post about what you are trying to build and why.  Remember, people don’t buy products, they buy the story behind them.</p><p>If you haven’t done so yet, set up a simple landing page.  There are countless tools out there for you to use even if you have never written a single line of code.  Squarespace, Splash, AppLandr, OntraPages, and Strinkingly are all tools you can use to get up and running online with no experience.  Each have their strengths and weaknesses, do your research and see what fits your needs the best.</p><p>Finally, set yourself up with a Mailchimp account.  Set up a list within Mailchimp and start collecting email addresses of people who are interested in what you are building.</p><p>Now that you have a landing page you can put language on it, something similar to: “Beta version coming soon.  Sign up to be a tester.”</p><p>You can then include a form that once filled out will add an interested person’s email address straight to your list in Mailchimp.  How to do this differs a little bit depending on the platform you are using for the landing page.  But there are millions of tutorials online that will show you what to do.  Just Google it.</p><h1 id="Lesson-11-Build-to-Optimize-Growth"><a href="#Lesson-11-Build-to-Optimize-Growth" class="headerlink" title="Lesson 11: Build to Optimize Growth"></a>Lesson 11: Build to Optimize Growth</h1><p>You should be close to completing your beta product.  But before you are done, it is important to start thinking about how your project will grow and attract more people.  It is much easier to build those functions in now than to wait until everything is completed.</p><p>Think about features or different products/services that you can reserve for people that share a blog post, like your Facebook page, get 5 friends to sign-up to your newsletter, or something along those lines.  You need ways to get your product out there and offering people incentives to help you out is the best way.</p><p>There are a number of ways that you can do this.</p><p>Viral Sign Ups is a good option but that’s just one of many.</p><p>You can also do something much less official.  Make a few images for Facebook that contain copy such as “Share this post for a chance to win a t-shirt”.  There are a million different things you can do.  Keep your audience in mind and if you think of something good be sure to share it on Slack.  I’m sure everyone would love to hear what others are coming up with.</p><p>Just remember that if something worked for one person it doesn’t mean that it will work for everyone.</p><p>Do some brainstorming here and continue to build your beta.  You should be finishing the last few things.  Plan to launch in a week!</p><h1 id="Lesson-12-Build-Your-Channels"><a href="#Lesson-12-Build-Your-Channels" class="headerlink" title="Lesson 12: Build Your Channels"></a>Lesson 12: Build Your Channels</h1><p>It’s almost here.  After the next email, you should plan to launch your beta product but before doing so, it is important that you start to grow your social following so that you have some sort of stage and audience to announce the release of your beta product to.</p><p>This is the time to invite all of your friends and family to like your Facebook page.  Ask anyone you know if they would be interested in being added to the mailing list.  Post on your personal Facebook, Twitter, and Instagram accounts about the upcoming launch.</p><p>Hand out a few stickers if you have them.  Make flyers.  Make posters.  Hang posters on stop signs, bathroom walls, ceilings, windows.  Don’t ask for permission, just go out and do things.</p><p>Small side note: I’ve found that hanging flyers right above urinals in the Men’s restroom is the absolute best place to hang flyers.</p><p>On Twitter, find an influencer that has a bunch of followers that would probably be interested in what you are building.  Start following their followers.  (Make sure you’ve tweeted a few times before doing this and make sure any important links are in your bio).  Unfollow ones that don’t follow back in 2-3 days.  Look around for twitter tools, there are many that will help you do this.  Some more effective than others.</p><p>Once you start to see your audience growing don’t be afraid to tell them that you’re about to launch a beta version.  Have them signup if they would be interested in testing it.  For this test, unlike the MLP testing, the more testers the better (within reason, just make sure you can handle the volume of testers that join).</p><p>Continue to build up hype through your channels and try to get as many followers and subscribers as possible.</p><p>It’s almost time to launch.  In the next email I’ll leave you all a few tips on having a successful launch.</p><h1 id="Lesson-13-The-Beta-Launch"><a href="#Lesson-13-The-Beta-Launch" class="headerlink" title="Lesson 13: The Beta Launch"></a>Lesson 13: The Beta Launch</h1><p>The time has come.  You have worked very hard to get your beta product working and you are finally ready to have people test it out.  But let’s go over a few things before you go off and start onboarding people.</p><p>First, let’s go over the purpose of the beta test.  The main reason you are launching is to test out your project, see if there are any bugs, problems, weak points, or things that could be improved.  You should try to get as much feedback from the beta users as possible.  If you’re making an app or something electronic that allows you to track usage - do it! This will give you a ton of valuable insights.  If you’re working on something that isn’t online, there are still ways to track valuable analytics that can be very helpful.  Surveys and phone calls will be your friends.</p><p>Who you choose to be your beta testers is also something worth mentioning.  You should get beta testers that you know will give you honest feedback and also people who have a great need for your product.  This way you can be sure that they will spend a substantial amount of time with your product.  </p><p>Your parents probably aren’t the best people to choose for this.  But if you’ve been following my tips, at this point you should have a mailing list of at least 100 people that you have met and talked to along your process of building.  Pull from this list for your testers! You can either individually reach out to a hand-selected group of people or send a newsletter to everyone.  Updating them of your progress and including a form (Google Form or Typeform) for those that would be interested in participating in a beta test.</p><p>The length of your beta test will depend on how often people are interacting with your project but aim for around a week.</p><p>Before you get everyone using your product, make sure that you run a pre-use survey!  This is extremely important and will help you immensely later down the road.  In this survey you want to figure out some sort of baseline before people started using your product.</p><p>For example, if you’re teaching a bootcamp teaching HTML/CSS to non-developers you could ask the following questions:</p><ol><li><p>On a scale of 1-10, how would you rate your current understanding of HTML/CSS?</p></li><li><p>How many times a week do you currently write HTML/CSS code?</p></li><li><p>How many times a week do you plan on writing HTML/CSS code after this bootcamp?</p></li><li><p>How many hours do you plan on practicing outside of the bootcamp over the next week?</p></li></ol><p>Try to make these answers as quantitative as possible.  This will allow you to easily see the effects of your product after we run a post-test survey.</p><p>That’s all for now.  Good luck with getting your beta testers up and running.  And remember, be very respectful of their time and always be very gracious.  There’s a good chance that if you treat them well, beta testers will turn into your first customers once you release your finished product.</p><h1 id="Lesson-14-The-Followup"><a href="#Lesson-14-The-Followup" class="headerlink" title="Lesson 14: The Followup"></a>Lesson 14: The Followup</h1><p>How is your beta test going?  Not seeing the results you were expecting?  People not using your product as much as you would like?  That’s FINE!  There is no such thing as a failed beta test.  It’s a learning experience.  If you’re frustrated with the results then just realize that you found a way to solve a problem that for whatever reason doesn’t work.  By running the beta test you just saved a whole bunch of time before wasting it on trying to perfect a product that doesn’t work.  You can take the feedback you gathered and see why your solution did not work.  Then you can make a few changes and try again.</p><p>If your test is going better than expected, great.  Listen to the users and discuss what could be improved, what added features may increase the value proposition.  You don’t have to listen to every single one of these but they may give you some good ideas that you hadn’t even thought of.</p><p>After the week of testing, you should run a post-use survey.  In this survey you should have some of the same questions that you can compare before and after scores.  In the last example, we used a HTML/CSS bootcamp.  A post-test question should be: After the bootcamp, on a scale of 1-10, how would you rate your understanding of HTML/CSS.  You should also include some questions about continuing usage.  Ask them if they would ever be willing to pay for your product.  How much?  If not, what changes would need to be made in order for them to be willing to pay?  Make sure they realize that answering these questions in no way obligates them to paying anything.</p><p>Quick side note here: you may want to think about offering beta users a discount for when your product becomes paid - it could encourage them to continue using while also paying a little bit.  It doesn’t have to be a huge discount.  20% for the first 3 months - it goes a long way and makes the beta testers feel valued.</p><p>If you see that people generally had positive feedback but they are not willing to pay, don’t worry about it.  You can start to explore different methods of revenue.  Maybe it is through sponsorship?  Displaying ads?  Other stakeholders?  If there are people that enjoy what you have built then there is always a way to make it work, it just might not be that obvious.</p><p>Finish up your beta testing and send that follow-up email, make sure people fill out that post-use survey.  Keep track of everyone that has or hasn’t filled it out and continue to bug people (respectfully) until they complete it.  The information you gain from this is way too important to just let people off the hook.</p><h1 id="Lesson-15-Build-Your-Channels-Again"><a href="#Lesson-15-Build-Your-Channels-Again" class="headerlink" title="Lesson 15: Build Your Channels, Again"></a>Lesson 15: Build Your Channels, Again</h1><p>Congratulations!  You’re done with your beta test.  You gained a ton of extremely valuable insights and you have a few ideas about some small changes you can make to your product that would improve it.  Go ahead and spend some time improving it.  Any spare time you have for the next few days should be focused on continuing to build your channels so that getting the word out of your first public launch is easy.</p><p>Continue to post on your social media platforms and keep growing your following.  There are millions of free resources all over the internet that will give you advice on this (some are much better than others).</p><p>Change the language on any social accounts and your landing page to express that you are launching soon.  Encourage people to sign up to a mailing list so that they receive first access to your product as soon as it launches.</p><p>Send another email to everyone on your current mailing list and send out a link to a survey.  Offer everyone a sticker that gives you the name and email of 3-5 friends that would be interested in your product.  Don’t forget to ask for the mailing address in the survey so you can mail the sticker.  This is a great, cheap, and effective guerrilla marketing tactic that has worked well for me in the past.  Take some time and write a quick thank you card for each of the stickers you send.  It doesn’t have to be much - a sentence or two will do.  This will help you to really stand out.</p><p>If you want to be even more adventurous, try holding a sweepstakes or a contest. Vyper.io lets you do this very easily.</p><p>If your product is something online that people all over the world would benefit from, think about submitting it to a few of the sites found on Promotehour.  These sites are all awesome ways to show off what you are building to early-adopting type people who may be interested in joining.</p><p>If your product is more local, such as a summer day camp for neighborhood kids, try getting into the local paper.  Email a local reporter, they’ll likely ignore your first email, but keep following up with them.  Presistentance counts here.</p><h1 id="Lesson-16-Write-About-Your-Journey"><a href="#Lesson-16-Write-About-Your-Journey" class="headerlink" title="Lesson 16: Write About Your Journey"></a>Lesson 16: Write About Your Journey</h1><p>You have just one assignment for the next 4 days.  Write about the journey.  As I have said before, people love stories and it is important to tell yours.  Talk about the problem you sought out to solve, why it was important to you, the failures you encountered, and what you have accomplished so far.  If you have a blog as part of your project, post it there and make sure that as soon as someone subscribes to your mailing list, they receive an automated email from you directing them to read the article about your start.  If you don’t have a blog already set up, Medium is a great alternative.  On Medium, you can write a post about anything and allow the world to see it.  If you decide to go this route, make sure that you provide the link to your Medium account in as many places as possible (just like Facebook, Twitter, and Instagram accounts).  Medium is great, but without a following your story will not have much of an impact.</p><p>After completing this, send it out to your current subscribers, share it from all of your personal social accounts, make as many people aware of your story as possible! This would also be a great time to announce when you are launching your product. Give a date that you know you can hit and give very clear instructions so that everyone knows exactly what they need to do in order to get access once it launches.</p><p>Not confident about your writing abilities? I’d love to help out.  Also, feel free to share your story with me once it is completed. I’d be happy to share it from BOLD social accounts.</p><p>Once you have finished writing and sharing your story continue making changes to your beta product that improve it.  In four days, I will be giving you some last tips about launching your product.  You’re almost there.</p><h1 id="Lesson-17-The-Launch"><a href="#Lesson-17-The-Launch" class="headerlink" title="Lesson 17: The Launch"></a>Lesson 17: The Launch</h1><p>Your launch date is approaching and hopefully you have something to show everyone that you’re proud of.  I just want to leave you all with a few pieces of advice to make sure you have a great launch now that you spent so much time working on your product.</p><p>Remember Promotehour, it is an extremely valuable resource and getting exposure from just one of those sources could really make a huge difference.</p><p>There are also some other things you could do.  Research some bloggers or publications that your target readers often read.  Offer to guest write for them as long as you can put a blurb about your launch in the article you write.  This is a great way to leverage communities that others have already built.</p><p>I also encourage everyone to offer some kind of incentive for sharing your product with their friends.  There is still nothing like the word of mouth. </p><p>Think about Uber and how they give $10 of credit to you and a friend when your friend uses your promo code when signing up.  What you do doesn’t have to be so complex to execute, but think of ways you can mimic that in a low-tech way.</p><p>If you are using Wordpress at all there are a number of plugins that allow you to lock certain parts of your website or certain pieces of content until a user shares a post to Facebook, Tweets something, or subscribes to your newsletter.  I’ve had great success with Social Locker but do your research and find out which plugin matches your needs the best.</p><p>If you haven’t already, purchase stickers.  Get them from StickerMule and give them out to people.  Put them in different locations and give them to friends.  I have found that giving stickers to students is extremely effective.  They will often put the sticker on their laptop and a sticker on a laptop in a college town can be incredibly valuable.</p><h1 id="Lesson-18-Reflection"><a href="#Lesson-18-Reflection" class="headerlink" title="Lesson 18: Reflection"></a>Lesson 18: Reflection</h1><p>So you did it!  Over the course of ten weeks you identified a problem, researched why that problem existed, made a few (maybe wrong) assumptions about what would solve those problems, held a few interviews, asked a lot of questions, built a MLP, built a beta product, looked at a ton of survey response data, launched an actual product, and most importantly of all, you learned a lot.</p><p>When I was creating the Launch In A Summer program, my goal was never to help students launch successful products.  Rather, I wanted to teach students how to tackle a problem in an entrepreneurial way.  Sure, I absolutely love hearing about all of your successful products, but what I would love even more is to hear that you take the processes you learned this summer and apply them elsewhere.  I truly believe that no matter the situation, be it at a startup, at a large corporate company, or even in class, the processes you learned can be applied anywhere and can result in some pretty amazing solutions.</p><p>If you have not yet done so, subscribe to the BOLD newsletter here to stay in touch.</p><p>If you are interested in having your resume sent to awesome hiring tech companies, submit it here, send me an email and let me know if you do.  For participating in this program I will grant everyone automatic acceptance.</p>]]></content>
      
      
      <categories>
          
          <category> Thinking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Newsletter </tag>
            
            <tag> Product </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo配置</title>
      <link href="/2017/04/20/Hexo%E9%85%8D%E7%BD%AE-2/"/>
      <url>/2017/04/20/Hexo%E9%85%8D%E7%BD%AE-2/</url>
      
        <content type="html"><![CDATA[<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="Hexo原生配置"><a href="#Hexo原生配置" class="headerlink" title="Hexo原生配置"></a>Hexo原生配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h2 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-site</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>More info: <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT</a></p><h2 id="进阶配置"><a href="#进阶配置" class="headerlink" title="进阶配置"></a>进阶配置</h2><h3 id="更新时间"><a href="#更新时间" class="headerlink" title="更新时间"></a>更新时间</h3><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>More info: <a href="http://wuchenxu.com/categories/hexo/" target="_blank" rel="noopener">More</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g deploy -d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Technology </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Update Hexo</title>
      <link href="/2017/04/05/Update-Hexo/"/>
      <url>/2017/04/05/Update-Hexo/</url>
      
        <content type="html"><![CDATA[<p>#Update Procedure<br>Change into blog directory with package.json file<br>run <code>npm install hexo</code></p><p>run <code>hexo version</code> to check the version of Hexo.<br>Now succesfully updated to version 3.3.1 and hexo-cli to 1.0.2</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meep Cheat Sheet</title>
      <link href="/2017/01/11/Meep-Cheat-Sheet/"/>
      <url>/2017/01/11/Meep-Cheat-Sheet/</url>
      
        <content type="html"><![CDATA[<p>Original Post from <a href="https://www.ocf.berkeley.edu/~ykhan/meep-cheat-sheet/" target="_blank" rel="noopener">Yasser’s Page</a></p><h1 id="Running-Parallel-Meep"><a href="#Running-Parallel-Meep" class="headerlink" title="Running Parallel Meep:"></a>Running Parallel Meep:</h1><p>mpirun -np 16 meep-mpi splitter.ctl &gt; splitter.out<br>; runs meep-mpi in 16 processors [input.ctl &gt; output.out]</p><h1 id="Running-Serial-Meep"><a href="#Running-Serial-Meep" class="headerlink" title="Running Serial Meep:"></a>Running Serial Meep:</h1><p>meep znonw_glass.ctl &gt;&amp; znonw_glass.out</p><h1 id="Exporting-Image-with-Epsilon-Overlay"><a href="#Exporting-Image-with-Epsilon-Overlay" class="headerlink" title="Exporting Image with Epsilon Overlay"></a>Exporting Image with Epsilon Overlay</h1><p>h5topng -S4 -Zc dkbluered -a gray:0.5 -A eps-000000.00.h5 ez*.h5<br>; scales 4 times used dkblured color scheme, places overlay gray with 50% opacity</p><h1 id="Exporting-330-images"><a href="#Exporting-330-images" class="headerlink" title="Exporting 330 images:"></a>Exporting 330 images:</h1><p>h5topng -t 0:329 -R -Zc dkbluered -a yarg -A trans-eps-000000.00.h5 trans-ez.h5</p><h1 id="Exporting-2D-slices-from-3D-Structure"><a href="#Exporting-2D-slices-from-3D-Structure" class="headerlink" title="Exporting 2D slices from 3D Structure"></a>Exporting 2D slices from 3D Structure</h1><p>h5topng -S4 -0 -x 0 eps-000000.00.h5 ; yz plane<br>h5topng -S4 -0 -z 0 eps-000000.00.h5 ; xy plane</p><h1 id="At-every-6-outputs-pngs"><a href="#At-every-6-outputs-pngs" class="headerlink" title="At every .6 outputs pngs"></a>At every .6 outputs pngs</h1><p>(run-until 200 (at-every 0.6 (output-png Ez “-Zc bluered”)))</p><h1 id="Using-grep-to-get-flux-data-out"><a href="#Using-grep-to-get-flux-data-out" class="headerlink" title="Using grep to get flux data out"></a>Using grep to get flux data out</h1><p>grep flux1: ito1_glass.out &gt; ito1_glass.dat</p><h1 id="Export-vtk-files"><a href="#Export-vtk-files" class="headerlink" title="Export vtk files"></a>Export vtk files</h1><p>h5tovtk -t 150 -o test.vtk -d ey test-e.h5</p><h1 id="Creating-movie-from-bunch-of-png-files"><a href="#Creating-movie-from-bunch-of-png-files" class="headerlink" title="Creating movie from bunch of .png files"></a>Creating movie from bunch of .png files</h1><p>mencoder mf://*.png -mf w=800:h=600:fps=4:type=png -ovc copy -oac copy -o output.avi<br>; you will need mencoder [sudo apt-get install mencoder]</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Meep </tag>
            
            <tag> H5topng </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Meep and python-meep on MacOS</title>
      <link href="/2016/10/06/python-meep-install-mac/"/>
      <url>/2016/10/06/python-meep-install-mac/</url>
      
        <content type="html"><![CDATA[<h1 id="Meep-and-python-meep-on-MacOS"><a href="#Meep-and-python-meep-on-MacOS" class="headerlink" title="Meep and python-meep on MacOS"></a>Meep and python-meep on MacOS</h1><p>This is a compilation procedure that worked for me to setup the python-meep with some utilities on a MacOS-based system.<br>Last update: 12/15/2016</p><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>I created this recipe for a general guide line to install meep and python-meep on MacOS based system. Currently I installed on MacOS Sierra, and meep or meep-mpi does not working correctly, make check failed symmetry test which is failing due to a small numerical error (I guess this is fine). The error message that I have is posted as an issue in <a href="https://github.com/stevengj/meep/issues/33" target="_blank" rel="noopener">meep Github repo</a>. It seems like due to guile library, please let me know if you have any suggestion, I would really appreciate.<br>This is the error message I have when running examples of meep scripts:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: In procedure memoize-variable-access!:</span><br><span class="line">ERROR: Unbound variable: Ez</span><br></pre></td></tr></table></figure><p>Python-meep seems working correctly with the given sample examples.</p><p>Please take your own resposibility when you follow this recipe.</p><p>I followed <a href="https://www.mail-archive.com/meep-discuss@ab-initio.mit.edu/msg05292.html" target="_blank" rel="noopener">Glenn’s post</a> on Meep-discuss and made some modification when necessery.</p><ol><li><p>First, install Xcode from the App Store and command line tools using the terminal:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-select --install</span><br></pre></td></tr></table></figure></li><li><p>Next, install home-brew</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;ruby -e &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install)&quot;</span><br><span class="line">brew doctor</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure></li><li><p>Install packages needed to build meep:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">brew install guile</span><br><span class="line">brew install --with-mpi homebrew&#x2F;science&#x2F;hdf5</span><br><span class="line">brew install homebrew&#x2F;science&#x2F;openblas fftw h5utils</span><br><span class="line">brew install pkg-config</span><br><span class="line">brew install swig</span><br><span class="line">brew install automake</span><br><span class="line">brew install autoconf</span><br></pre></td></tr></table></figure></li><li><p>Log in as a user with admin privileges.</p></li><li><p>Download harminv library from <a href="http://ab-initio.mit.edu/harminv/harminv-1.4.tar.gz" target="_blank" rel="noopener">ab-initio:</a>  Unpack that, cd into harminv-1.4 and do the usual</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>Download libctl library from <a href="http://ab-initio.mit.edu/libctl/libctl-3.2.2.tar.gz" target="_blank" rel="noopener">ab-initio:</a> Unpack that, cd into libctl-3.2.2 and do the usual</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></li><li><p>Get meep from github:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;stevengj&#x2F;meep</span><br></pre></td></tr></table></figure></li><li><p>In the cloned code (on 2/1/15), some files needed to be modified to get swig to work properly. Specifically, the cloned libctl/Makefile.am caused broken libctl/meep_swig_bug_workaround.i, libctl/meep_enum_renames.i and libctl/meep_renames.i to be created. To fix that I modified two lines in libctl/Makefile.am:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">the line after “meep_swig_bug_workaround.i: $(LIBHDRS)” was changed from</span><br><span class="line">-&gt; (echo &quot;&#x2F;&#x2F; AUTOMATICALLY GENERATED -- DO NOT EDIT&quot;; grep -h friend $(LIBHDRS) | sed &#39;s&#x2F;^ *friend \+[A-Za-z_0-9:&lt;&gt;]\+[* ]\+\([A-Za-z_0-9:]*\) *(.*$$&#x2F;%ignore \1;&#x2F;&#39; | grep &quot;%ignore&quot; | sort -u;) &gt; $@</span><br><span class="line">to</span><br><span class="line">-&gt; (echo &quot;&#x2F;&#x2F; AUTOMATICALLY GENERATED -- DO NOT EDIT&quot;; grep -h friend $(LIBHDRS) | sed &#39;s&#x2F;^ *friend  *[[:alpha:]_][[:alnum:]_]* *\([[:alpha:]_][[:alnum:]_]*\) *(.*&#x2F;%ignore \1;&#x2F;&#39; | grep &quot;%ignore&quot; | sort -u;) &gt; $@</span><br><span class="line">the line after “meep_enum_renames.i: $(LIBHDRS)” was changed from</span><br><span class="line">-&gt; (echo &quot;&#x2F;&#x2F; AUTOMATICALLY GENERATED -- DO NOT EDIT&quot;; for f in $(LIBHDRS); do egrep &quot;^enum&quot; $$f | sed &#39;s&#x2F;enum \+\([A-Za-z_0-9:]\+\).*$$&#x2F;\1&#x2F;g&#39; | while read enum; do cat $$f | tr -d &#39;\n&#39; | sed &#39;s&#x2F;.*enum \+&#39;$$&#123;enum&#125;&#39; *&#123;\([^&#125;]*\)&#125;.*&#x2F;\1&#x2F;g&#39; | sed &#39;s&#x2F;&#x3D; *[0-9]\+&#x2F;&#x2F;g&#39; |tr -d &#39; \t&#39; | tr &#39;,&#39; &#39;\n&#39; | sed  &#39;s&#x2F;^.*$$&#x2F;&#39;&quot;%rename(meep_$$&#123;enum&#125;_\0) meep::\0;&#x2F;g&quot;; echo; done; done;) &gt; $@</span><br><span class="line">to</span><br><span class="line">-&gt; (echo &quot;&#x2F;&#x2F; AUTOMATICALLY GENERATED -- DO NOT EDIT&quot;;for f in $(LIBHDRS); do egrep &quot;^enum&quot; $$f | sed &#39;s&#x2F;enum  *\([^&#125;][^&#125;]*\).*&#125;;&#x2F;\1&#x2F;g&#39; | tr -d &quot;&#123;&quot; | sed &#39;s&#x2F;, *&#x2F; &#x2F;g&#39; | sed &#39;s&#x2F; *&#x3D; *[[:digit:]][[:digit:]]*&#x2F;&#x2F;g&#39;| while read -a array; do varname&#x3D;$$&#123;array[0]&#125;;unset &quot;array[0]&quot;;for varvalue in $$&#123;array[@]&#125;;do echo &quot;%rename(meep_$$&#123;varname&#125;_$$varvalue) meep::$$varvalue;&quot;; done;done;done;) &gt; $@</span><br></pre></td></tr></table></figure><p>That resulted in good libctl/meep_swig_bug_workaround.i and libctl/meep_enum_renames.i when make was run, but to fix libctl/meep_renames.i, I punted and just copied that file over from a meep 1.2.1 distribution.</p></li><li><p>For the instructions that follow, I used this <a href="http://www.fzu.cz/~dominecf/meep/index.html" target="_blank" rel="noopener">guide</a> as a guide and made modifications to get things to work on OS-X.</p></li></ol><p>cd into meep and execute</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export eFLAGS&#x3D;&quot; -fPIC&quot;; export CXXFLAGS&#x3D;&quot; -fPIC&quot;; export FFLAGS&#x3D;&quot;-fPIC&quot;</span><br><span class="line">export CPPFLAGS&#x3D;&quot;-I&#x2F;usr&#x2F;local&#x2F;include&quot;</span><br><span class="line">export LD_RUN_PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;lib&quot;</span><br><span class="line">.&#x2F;autogen.sh --with-mpi --enable-maintainer-mode --enable-shared --prefix&#x3D;&#x2F;usr&#x2F;local</span><br><span class="line">make  &amp;&amp;  sudo make install</span><br></pre></td></tr></table></figure><ol start="10"><li>That should take care of the basic meep, but I find it much more convenient to deal with Python than Scheme, so I installed python-meep, which started with a <a href="https://launchpad.net/python-meep/1.4/1.4/+download/python-meep-1.4.2.tar" target="_blank" rel="noopener">download</a>.The resulting files seemed to require some modification to install in /usr/local directories and to work properly:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">in setup-mpi.py inserted after line 9: import numpy as np</span><br><span class="line">in setup-mpi.py changed the last line to:</span><br><span class="line">include_dirs&#x3D;includeDir+[np.get_include()]</span><br><span class="line">in setup-mpi.py changed line 16 to: includeDir &#x3D; [&quot;&#x2F;usr&#x2F;local&#x2F;include”]</span><br><span class="line">in setup-mpi.py changed line 17 to: includeDir &#x3D; [&quot;&#x2F;usr&#x2F;local&#x2F;lib”]</span><br><span class="line">in make-mpi inserted after line 5: export LD_RUN_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib</span><br><span class="line">in meep_mpi.py changed line 4918 to: libmpi &#x3D; CDLL(&#39;libmpi.0.dylib’,</span><br><span class="line">RTLD_GLOBAL)</span><br><span class="line">in meep_mpi.py changed line 4921 to: libmpi &#x3D; CDLL(&#39;libmpi.dylib’,</span><br><span class="line">RTLD_GLOBAL)</span><br><span class="line">in meep-site-init.py replaced the # in the first line with &#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">With those modifications, the installation can proceed:</span><br><span class="line">cd to python-meep directory</span><br><span class="line">as a user with admin privileges execute: sudo .&#x2F;make-mpi -I&#x2F;usr&#x2F;local&#x2F;include -L&#x2F;usr&#x2F;local&#x2F;lib</span><br></pre></td></tr></table></figure></li><li>I find out that python-meep cant read the right libmpi library for file<br>meep-mpi.py that generated.<br>In order to fix this, you need to modify the /usr/local/bin/meep-mpi.py<br>from<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    libmpi &#x3D; CDLL(&#39;libmpi.so.0&#39;, RTLD_GLOBAL)</span><br><span class="line">except:</span><br><span class="line">    try:</span><br><span class="line">    libmpi &#x3D; CDLL(&#39;libmpi.so&#39;, RTLD_GLOBAL)</span><br><span class="line">    except Exception,e:</span><br><span class="line">    print &quot;Neither libmpi.so.0 nor libmpi.so found. Fatal error.&quot;</span><br><span class="line">    raise e</span><br></pre></td></tr></table></figure>to<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line">if sys.platform &#x3D;&#x3D; &#39;darwin&#39;: # works on OSX</span><br><span class="line">    try:</span><br><span class="line">        libmpi &#x3D; CDLL(&#39;libmpi.0.dylib&#39;, RTLD_GLOBAL)</span><br><span class="line">    except:</span><br><span class="line">        try:</span><br><span class="line">        libmpi &#x3D; CDLL(&#39;libmpi.dylib&#39;, RTLD_GLOBAL)</span><br><span class="line">        except Exception,e:</span><br><span class="line">        print &quot;Neither libmpi.0.dylib nor libmpi.dylib found. Fatal error.&quot;</span><br><span class="line">        raise e</span><br><span class="line">else:</span><br><span class="line">    try:</span><br><span class="line">        libmpi &#x3D; CDLL(&#39;libmpi.so.0&#39;, RTLD_GLOBAL)</span><br><span class="line">    except:</span><br><span class="line">        try:</span><br><span class="line">        libmpi &#x3D; CDLL(&#39;libmpi.so&#39;, RTLD_GLOBAL)</span><br><span class="line">        except Exception,e:</span><br><span class="line">        print &quot;Neither libmpi.so.0 nor libmpi.so found. Fatal error.&quot;</span><br><span class="line">        raise e</span><br></pre></td></tr></table></figure></li><li>If no errors or omissions have slipped by me, that should get python-meep running on OS-X.</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Meep </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vimtex default key mappings</title>
      <link href="/2016/09/27/vimtex-default-key-mappings/"/>
      <url>/2016/09/27/vimtex-default-key-mappings/</url>
      
        <content type="html"><![CDATA[<h1 id="Vimtex-Default-Mappings"><a href="#Vimtex-Default-Mappings" class="headerlink" title="Vimtex Default Mappings"></a>Vimtex Default Mappings</h1><p>Vimtex is designed to be controlled by a selection of mappings. Note,<br>though, that most of the mappings are also available as commands.<br>[comment]: # (Add link to Vimtex commands)</p><p>Many of the mappings utilize the <code>maplocalleader</code>. The right-hand sides are<br>provided as <code>plug</code> mappings. For any given<br><code>&lt;plug&gt;</code> map, the default mapping will only be created if it does not already<br>exist.<br>This means that if a user defines a custom mapping, e.g. with<br><code>viml  nmap &lt;space&gt;li &lt;plug&gt;(vimtex-info)</code><br>  then the corresponding default left-hand side will not be mapped.</p><p>  If one prefers, one may disable all default mappings through the option<br>  <code>g:vimtex_mappings_enabled</code>. One must then define custom mappings for all<br>  desired features through the listed RHS <code>&lt;plug&gt;</code> maps or by mapping the<br>  available commands.</p><p>  In the below list of mappings, LHS is the default mapping, RHS is the<br>  corresponding <code>&lt;plug&gt;</code> maps, and MODE indicates in which vim mode the<br>  mappings<br>  are valid.</p><pre><code>LHS        |                   RHS                   | MODE----------------- | --------------------------------------- | ----`&lt;localleader&gt;li` | `&lt;plug&gt;(vimtex-info)`                   | n`&lt;localleader&gt;lI` | `&lt;plug&gt;(vimtex-info-full)`              | n`&lt;localleader&gt;lt` | `&lt;plug&gt;(vimtex-toc-open)`               | n`&lt;localleader&gt;lT` | `&lt;plug&gt;(vimtex-toc-toggle)`             | n`&lt;localleader&gt;ly` | `&lt;plug&gt;(vimtex-labels-open)`            | n`&lt;localleader&gt;lY` | `&lt;plug&gt;(vimtex-labels-toggle)`          | n`&lt;localleader&gt;lv` | `&lt;plug&gt;(vimtex-view)`                   | n`&lt;localleader&gt;lr` | `&lt;plug&gt;(vimtex-reverse-search)`         | n`&lt;localleader&gt;ll` | `&lt;plug&gt;(vimtex-compile-toggle)`         | n`&lt;localleader&gt;lk` | `&lt;plug&gt;(vimtex-stop)`                   | n`&lt;localleader&gt;lK` | `&lt;plug&gt;(vimtex-stop-all)`               | n`&lt;localleader&gt;le` | `&lt;plug&gt;(vimtex-errors)`                 | n`&lt;localleader&gt;lo` | `&lt;plug&gt;(vimtex-compile-output)`         | n`&lt;localleader&gt;lg` | `&lt;plug&gt;(vimtex-status)`                 | n`&lt;localleader&gt;lG` | `&lt;plug&gt;(vimtex-status-all)`             | n`&lt;localleader&gt;lc` | `&lt;plug&gt;(vimtex-clean)`                  | n`&lt;localleader&gt;lC` | `&lt;plug&gt;(vimtex-clean-full)`             | n`&lt;localleader&gt;lm` | `&lt;plug&gt;(vimtex-imaps-list)`             | n`&lt;localleader&gt;lx` | `&lt;plug&gt;(vimtex-reload)`                 | n`&lt;localleader&gt;ls` | `&lt;plug&gt;(vimtex-toggle-main)`            | n`dse`             | `&lt;plug&gt;(vimtex-env-delete)`             | n`dsc`             | `&lt;plug&gt;(vimtex-cmd-delete)`             | n`ds$`             | `&lt;plug&gt;(vimtex-env-delete-math)`        | n`cse`             | `&lt;plug&gt;(vimtex-env-change)`             | n`csc`             | `&lt;plug&gt;(vimtex-cmd-change)`             | n`cs$`             | `&lt;plug&gt;(vimtex-cmd-change-math)`        | n`tse`             | `&lt;plug&gt;(vimtex-env-toggle-star)`        | n`tsd`             | `&lt;plug&gt;(vimtex-delim-toggle-modifier)`  | nx`&lt;F7&gt;`            | `&lt;plug&gt;(vimtex-cmd-create)`             | ni`]]`              | `&lt;plug&gt;(vimtex-delim-close)`            | i`ac`              | `&lt;plug&gt;(vimtex-ac)`                     | nxo`ic`              | `&lt;plug&gt;(vimtex-ic)`                     | nxo`ad`              | `&lt;plug&gt;(vimtex-ad)`                     | nxo`id`              | `&lt;plug&gt;(vimtex-id)`                     | nxo`ae`              | `&lt;plug&gt;(vimtex-ae)`                     | nxo`ie`              | `&lt;plug&gt;(vimtex-ie)`                     | nxo`a$`              | `&lt;plug&gt;(vimtex-a$)`                     | nxo`i$`              | `&lt;plug&gt;(vimtex-i$)`                     | nxo`%`               | `&lt;plug&gt;(vimtex-%)`                      | nxo`]]`              | `&lt;plug&gt;(vimtex-]])`                     | nxo`][`              | `&lt;plug&gt;(vimtex-][)`                     | nxo`[]`              | `&lt;plug&gt;(vimtex-[])`                     | nxo`[[`              | `&lt;plug&gt;(vimtex-[[)`                     | nxo `]])` `]]])` `]`</code></pre><p>  `</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Latex </tag>
            
            <tag> vimtex </tag>
            
            <tag> VIM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>One-line browser notepad</title>
      <link href="/2016/09/27/One-line-browser-notepad/"/>
      <url>/2016/09/27/One-line-browser-notepad/</url>
      
        <content type="html"><![CDATA[<p>Original Post was first published in <a href="https://gist.github.com/nepsilon/070daa5f631c4e56237f28775aa31158" target="_blank" rel="noopener">fullweb.io issue #67</a></p><h1 id="One-line-browser-notepad-📝"><a href="#One-line-browser-notepad-📝" class="headerlink" title="One-line browser notepad 📝"></a>One-line browser notepad 📝</h1><p>Sometimes you just need to quickly take some notes.</p><p>A trick is to use the <code>data:</code> scheme with <code>data:text/html</code> to show just a piece<br>of HTML in your browser.<br>Then using the mighty <code>contentEditable</code> to make the whole thing editable.</p><p><strong>To copy/paste into your browser address bar:</strong><br><code>htmldata:text/html,&lt;html contenteditable&gt;</code></p><p><strong>And from there you can get fancier. Adding better styling:</strong><br><code>htmldata:text/html,&lt;html contenteditable autofocus style=&quot;font: 500 1rem/1.5 Menlo,monospace; background:#fafafa&quot;&gt;</code></p><p><strong>From there, no limit: Turning it into a full editor:</strong></p><p>From <a href="https://gist.github.com/jakeonrails/4666256" target="_blank" rel="noopener">Jake Moffatt</a>:<br>``html<br>data:text/html, <styletype="text/css">#e{position:absolute;top:0;right:0;bottom:0;left:0;}</style></p><div id="e"></div><scriptsrc="http://d1n0x3qji82z53.cloudfront.net/src-min-noconflict/ace.js"type="text/javascript" charset="utf-8"></script><script>vare=ace.edit("e");e.setTheme("ace/theme/monokai");e.getSession().setMode("ace/mode/ruby");</script>`````]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> html </tag>
            
            <tag> Gist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>set up a Django Project</title>
      <link href="/2016/06/04/set-up-a-Django-Project/"/>
      <url>/2016/06/04/set-up-a-Django-Project/</url>
      
        <content type="html"><![CDATA[<hr><p><strong>NOTE</strong></p><p>搬运文章，原创作者:<a href="http://joshuablog.herokuapp.com/" target="_blank" rel="noopener">http://joshuablog.herokuapp.com/</a><br>Just for study purpose, I don’t hold the copyright, if this is affecting anyone, please let me know.</p><hr><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>如果用Python写Web的吧，那就不得不提及Django了。我们先借助wiki来了解下吧。</p><p>|Django是一个开放源代码的Web应用框架，由Python写成。采用了MVC的软件设计模式，即<br>|模型M，视图V和控制器C。Django的主要目标是使得开发复杂的、数据库驱动的网站变得简<br>|单。Django注重组件的重用性和“可插拔性”，敏捷开发和DRY法则（Don’t Repeat<br>|Yourself）。在Django中Python被普遍使用，甚至包括配置文件和数据模型。—维基百科</p><p>上面那段话，我们只需知道Django很好用很快捷就好了。下面我们来看看怎么去搭建一个Django工程。由于操作的时候是在Windows上，所以这里就只写Windows平台了。</p><h2 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h2><p>因为Django是基于Python的，所以安装Django之前我们需要先安装好Python，这个有Python的下载地址 。由于Django最新稳定版推荐使用Python3，所以我们就直接下载最新稳定版的python。下载安装后，我们还需要把Python的安装目录和脚本目录添加到环境变量。如下:</p><p>|C:\Python34;C:\Python34\Scripts;</p><p>然后我们打开cmd， 输入python</p><p>|C:\Users\archerda&gt; python</p><p>如果能看见下面这个输出，就说明安装Python成功了。</p><p>|C:\Users\archerda&gt;python<br>|Python 3.4.3 (v3.4.3:9b73f1c3e601, Feb 24 2015, 22:43:06) [MSC v.1600 32 bit (Intel)] on win32<br>|Type “help”, “copyright”, “credits” or “license” for more information.<br>|&gt;&gt;&gt;</p><h2 id="安装Django"><a href="#安装Django" class="headerlink" title="安装Django"></a>安装Django</h2><p>安装Django有 2 种方式，第一种是用 python 自带的 pip，另一种是下载压缩包安装。</p><ol><li>pip方式（推荐）</li></ol><p>因为pip放在python目录下的Scripts目录下，所以我们必须先把Scripts文件夹的路径放在环境变量中。然后依次执行以下步骤。</p><ul><li>用管理员权限打开cmd；</li><li>执行</li></ul><p>|pip install Django</p><ul><li>cmd输出以下语句，安装Django成功</li></ul><p>|Installing collected packages: Django<br>|Successfully installed Django-1.8.3</p><ol start="2"><li>压缩包方式</li></ol><p>先下载压缩包Latest release: Django-1.8.3.tar.gz,下载后放在任意文件夹上，比如</p><p>|C:\Django-1.8.3</p><p>然后cmd切换到该目录，执行以下命令安装Django</p><p>|python setup.py install</p><p>以上 2 种方式安装完成后，会生成以下文件夹</p><p>|C:\Python34\Lib\site-packages\django</p><p>这就是Django的安装目录了。在这里我们需要添加Django环境变量</p><p>|C:\Python34\Lib\site-packages;</p><p>至此， Django安装完毕。我们可以在cmd检测下。</p><p>|C:\Windows\system32&gt; django-admin –version<br>|1.8.3</p><h2 id="新建第一个Django工程"><a href="#新建第一个Django工程" class="headerlink" title="新建第一个Django工程"></a>新建第一个Django工程</h2><p>先切入到 Python 的工作区间，比如</p><p>|E:\Python</p><p>然后，用 django-admin 工具来新建工程，如下</p><p>|E:\Python&gt; django-admin startproject testdjango</p><p>如此，就会在 E:\Python 生成一个 testdjango 文件夹。文件目录及解释如下：</p><ul><li>testdjango 工程文件夹</li><li>testdjango</li><li><strong>init</strong>.py 表明该目录为一个python包</li><li>settings.py 项目设置文件</li><li>urls.py URL映射管理</li><li>wsgi.py Python Web Server Gateway Interface，是Python应用程序或框架和Web服务器之间的一种接口</li><li>manage.py 对项目进行操作的命令</li></ul><p>工程建立完毕。然后激动人心的时刻到了。我们要开始运行这个工程。</p><ul><li>cmd 切换到 testdjango 工程文件夹下。</li><li>执行</li></ul><p>|E:\Python\testdjango&gt; manage.py runserver 127.0.0.1:8080</p><ul><li>cmd 输出</li></ul><p>| Performing system checks…<br>| System check identified no issues (0 silenced).<br>| You have unapplied migrations; your app may not work properly until they are applied.<br>| Run ‘python manage.py migrate’ to apply them.<br>| July 24, 2015 - 10:30:05<br>| Django version 1.8.3, using settings ‘testdjango.settings’<br>| Starting development server at <a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a><br>| Quit the server with CTRL-BREAK.</p><p>说明服务器已经成功运行了。</p><ul><li>访问 <a href="http://127.0.0.1:8080/" target="_blank" rel="noopener">http://127.0.0.1:8080/</a> ， 页面输出</li></ul><p>| It worked!<br>| Congratulations on your first Django-powered page.</p><p>至此，第一个Django工程就顺利完工了。</p><h2 id="最后，总结下"><a href="#最后，总结下" class="headerlink" title="最后，总结下"></a>最后，总结下</h2><ul><li>Django的安装</li></ul><p>| 1. pip install Django<br>| 2. python setup.py install</p><ul><li>App的生成与启动</li></ul><p>| django-admin startproject {project_name}</p><ul><li>启动服务器</li></ul><p>| manage.py runserver [[IP:] 端口]</p><ul><li>用浏览器打开URL</li></ul><p>| <a href="http://localhost:端口/[函数名]">http://localhost:端口/[函数名]</a></p><p>到这里，第一个Django工程就顺利地搭建了。学习Django的第一课，对比Java的Web工程，我觉得Django还是很有意思的。趁着几天，好好学学Python。</p><p>完。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Python </tag>
            
            <tag> Django </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Optical Computing</title>
      <link href="/2016/06/01/Optical-Computing/"/>
      <url>/2016/06/01/Optical-Computing/</url>
      
        <content type="html"><![CDATA[<h1 id="Optical-Computing-Past-and-Future"><a href="#Optical-Computing-Past-and-Future" class="headerlink" title="Optical Computing: Past and Future"></a>Optical Computing: Past and Future</h1><p>Ravi Athale and Demetri Psaltis<br><a href="http://www.osa-opn.org/home/articles/volume_27/june_2016/features/optical_computing_past_and_future/" target="_blank" rel="noopener">Original<br>Website</a>,</p><h1 id="Electronic-computing’s-historical-strengths"><a href="#Electronic-computing’s-historical-strengths" class="headerlink" title="Electronic computing’s historical strengths"></a>Electronic computing’s historical strengths</h1><p>Conventional wisdom says that electrons compute and photons communicate. That’s<br>because the strong Coulomb interactions of charged electrons can be leveraged<br>to perform nonlinear computations (Boolean logic), whereas charge-free photons<br>do not interact with each other at all in free space.</p><p>An electronic computer operates at baseband by manipulating the flow of charges<br>in semiconductors, such as silicon, whereas most optical systems transfer<br>information encoded on a carrier frequency of several hundred THz by the<br>polarization of bound electrons in dielectric materials, such as glasses.<br>Indeed, the lack of photon-photon interaction makes it possible to use a large<br>number of spatial and spectral channels to increase the information-carrying<br>capacity of optical communication systems.</p><p>Electronic telecommunication systems evolved from telegraphy, with baseband<br>operation using simple metal wires for transmission, through telephony, whose<br>increased demand for transmission bandwidth was initially met by higher carrier<br>frequencies that require more complex guiding structures such as coaxial<br>cables, and finally into fiber optic technology for long-haul communications<br>beginning in the late 1980s. The starting point for computers was similar to<br>that of early communications systems—that is, simple electrical circuits<br>operating at baseband frequencies, with bandwidth of several MHz.</p><p>Unlike communications however, computers have continued to operate at<br>baseband—and, thus far, with great success. Computers have acquired complexity<br>and speed through improvements in the resolution of lithography, which allowed<br>exponential gains under Moore’s law. Transistors with ever-shrinking dimensions<br>provide a highly localized interaction between electrical signals (typically<br>the gate and source voltages), through the 1/r2 drop of the electric field<br>established by the charge at the gate of the transistor. Such localization is<br>essential for Boolean logic, in which only two bits typically interact at a<br>time.</p><p>The miniaturization of transistors made possible by ever-finer-scale<br>lithography leads to increased speed, greater density, lower power and lower<br>cost (through increased integration)—all at the same time—and has formed the<br>basis of the microelectronic revolution. In contrast to communications, placing<br>the data on a high carrier frequency before performing nonlinear logic<br>computations has offered no obvious advantages.Electronic computing’s<br>historical strengths</p><h1 id="Big-data-and-physical-limits"><a href="#Big-data-and-physical-limits" class="headerlink" title="Big data and physical limits"></a>Big data and physical limits</h1><p>In recent years, it’s been widely recognized that conventional scaling in CMOS<br>processors is reaching its physical limits, and can’t provide the same<br>exponential improvement in computational capabilities as in the past. The<br>computational challenges now posed by so-called big-data analytics are also<br>necessitating a rethinking at a fundamental level.</p><p>All of this has driven increased interest in alternatives to silicon-CMOS-based<br>hardware for digital computation, a trend captured by a variety of campaigns by<br>industry groups to “reboot” information technology. These initiatives envision<br>tight integration among specific applications, alternative models of<br>computation, and new, potentially unconventional hardware platforms. Proposals<br>for building optical systems implementing a “reservoir” model of computation—a<br>variation on neural-net models—constitute one recent example.</p><p>In those efforts, nanophotonics could play a key role. The same advances in<br>lithography and manufacturing that have driven Moore’s law have also, in the<br>past decade, brought a veritable revolution in photonics technology, making it<br>possible to precisely create features far smaller than wavelength of light. As<br>a result, photonic-crystal structures, metamaterials, plasmonics and highly<br>resonant nanostructures are now enabling unprecedented control over light<br>propagation, modulation, generation and detection. Novel ideas in bottom-up<br>self-assembly of materials are also opening new vistas in light-matter<br>interactions through tools such as quantum dots.</p><p>These integrated-photonics developments are leading to exploration of<br>ever-smaller, ever-higher-performance devices for electrical-to-optical and<br>optical-to-electrical conversion. They have also rekindled interest in<br>nonlinear optical switches as logic devices for special-purpose digital optical<br>circuits—if not as CPUs in general-purpose digital computers. The rapidly<br>evolving landscape of information processing—and the increasing limits faced by<br>Moore’s law—makes now an opportune time to explore such advanced<br>optical-computing techniques.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Research </tag>
            
            <tag> Optical </tag>
            
            <tag> Computation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to merge old post</title>
      <link href="/2016/05/15/How-to-merge-old-post/"/>
      <url>/2016/05/15/How-to-merge-old-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vim Cheatsheet</title>
      <link href="/2016/03/13/Vim-Cheatsheet/"/>
      <url>/2016/03/13/Vim-Cheatsheet/</url>
      
        <content type="html"><![CDATA[<h1 id="Vim-Cheatsheet"><a href="#Vim-Cheatsheet" class="headerlink" title="Vim Cheatsheet"></a>Vim Cheatsheet</h1><blockquote><p>Note: The original post is from <a href="https://github.com/hackjutsu/vim-cheatsheet/blob/master/README.md" target="_blank" rel="noopener">github</a>.</p></blockquote><h2 id="Global"><a href="#Global" class="headerlink" title="Global"></a>Global</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">help</span> keyword <span class="comment"># open help for keyword</span></span><br><span class="line">:o file       <span class="comment"># open file</span></span><br><span class="line">:saveas file  <span class="comment"># save file as</span></span><br><span class="line">:close        <span class="comment"># close current pane</span></span><br></pre></td></tr></table></figure><h2 id="Cursor-movement"><a href="#Cursor-movement" class="headerlink" title="Cursor movement"></a>Cursor movement</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">h        <span class="comment"># move cursor left</span></span><br><span class="line">j        <span class="comment"># move cursor down</span></span><br><span class="line">k        <span class="comment"># move cursor up</span></span><br><span class="line">l        <span class="comment"># move cursor right</span></span><br><span class="line">H        <span class="comment"># move to top of screen</span></span><br><span class="line">M        <span class="comment"># move to middle of screen</span></span><br><span class="line">L        <span class="comment"># move to bottom of screen</span></span><br><span class="line">w        <span class="comment"># jump forwards to the start of a word</span></span><br><span class="line">W        <span class="comment"># jump forwards to the start of a word (words can contain punctuation)</span></span><br><span class="line">e        <span class="comment"># jump forwards to the end of a word</span></span><br><span class="line">E        <span class="comment"># jump forwards to the end of a word (words can contain punctuation)</span></span><br><span class="line">b        <span class="comment"># jump backwards to the start of a word</span></span><br><span class="line">B        <span class="comment"># jump backwards to the start of a word (words can contain punctuation)</span></span><br><span class="line">0        <span class="comment"># jump to the start of the line</span></span><br><span class="line">^        <span class="comment"># jump to the first non-blank character of the line</span></span><br><span class="line">$        <span class="comment"># jump to the end of the line</span></span><br><span class="line">g_       <span class="comment"># jump to the last non-blank character of the line</span></span><br><span class="line">gg       <span class="comment"># go to the first line of the document</span></span><br><span class="line">G        <span class="comment"># go to the last line of the document</span></span><br><span class="line">5G       <span class="comment"># go to line 5</span></span><br><span class="line">fx       <span class="comment"># jump to next occurrence of character x</span></span><br><span class="line">tx       <span class="comment"># jump to before next occurrence of character x</span></span><br><span class="line">&#125;        <span class="comment"># jump to next paragraph (or function/block, when editing code)</span></span><br><span class="line">&#123;        <span class="comment"># jump to previous paragraph (or function/block, when editing code)</span></span><br><span class="line">zz       <span class="comment"># center cursor on screen</span></span><br><span class="line">Ctrl + b <span class="comment"># move back one full screen</span></span><br><span class="line">Ctrl + f <span class="comment"># move forward one full screen</span></span><br><span class="line">Ctrl + d <span class="comment"># move forward 1/2 a screen</span></span><br><span class="line">Ctrl + u <span class="comment"># move back 1/2 a screen</span></span><br></pre></td></tr></table></figure><h2 id="Insert-mode-inserting-appending-text"><a href="#Insert-mode-inserting-appending-text" class="headerlink" title="Insert mode - inserting/appending text"></a>Insert mode - inserting/appending text</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i        <span class="comment"># insert before the cursor</span></span><br><span class="line">I        <span class="comment"># insert at the beginning of the line</span></span><br><span class="line">a        <span class="comment"># insert (append) after the cursor</span></span><br><span class="line">A        <span class="comment"># insert (append) at the end of the line</span></span><br><span class="line">o        <span class="comment"># append (open) a new line below the current line</span></span><br><span class="line">O        <span class="comment"># append (open) a new line above the current line</span></span><br><span class="line">ea       <span class="comment"># insert (append) at the end of the word</span></span><br><span class="line">Esc      <span class="comment"># exit insert mode</span></span><br></pre></td></tr></table></figure><h2 id="Editing"><a href="#Editing" class="headerlink" title="Editing"></a>Editing</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r        <span class="comment"># replace a single character</span></span><br><span class="line">J        <span class="comment"># join line below to the current one</span></span><br><span class="line">cc       <span class="comment"># change (replace) entire line</span></span><br><span class="line">cw       <span class="comment"># change (replace) to the end of the word</span></span><br><span class="line">c$       <span class="comment"># change (replace) to the end of the line</span></span><br><span class="line">s        <span class="comment"># delete character and substitute text</span></span><br><span class="line">S        <span class="comment"># delete line and substitute text (same as cc)</span></span><br><span class="line">xp       <span class="comment"># transpose two letters (delete and paste)</span></span><br><span class="line">.        <span class="comment"># repeat last command</span></span><br><span class="line">u        <span class="comment"># undo</span></span><br><span class="line">Ctrl + r <span class="comment"># redo</span></span><br></pre></td></tr></table></figure><h2 id="Marking-text-visual-mode"><a href="#Marking-text-visual-mode" class="headerlink" title="Marking text (visual mode)"></a>Marking text (visual mode)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v        <span class="comment"># start visual mode, mark lines, then do a command (like y-yank)</span></span><br><span class="line">V        <span class="comment"># start linewise visual mode</span></span><br><span class="line">o        <span class="comment"># move to other end of marked area</span></span><br><span class="line">O        <span class="comment"># move to other corner of block</span></span><br><span class="line">aw       <span class="comment"># mark a word</span></span><br><span class="line">ab       <span class="comment"># a block with ()</span></span><br><span class="line">aB       <span class="comment"># a block with &#123;&#125;</span></span><br><span class="line">ib       <span class="comment"># inner block with ()</span></span><br><span class="line">iB       <span class="comment"># inner block with &#123;&#125;</span></span><br><span class="line">Esc      <span class="comment"># exit visual mode</span></span><br><span class="line">Ctrl + v <span class="comment"># start visual block mode</span></span><br></pre></td></tr></table></figure><h2 id="Visual-commands"><a href="#Visual-commands" class="headerlink" title="Visual commands"></a>Visual commands</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;       <span class="comment"># shift text right</span></span><br><span class="line">&lt;       <span class="comment"># shift text left</span></span><br><span class="line">y       <span class="comment"># yank (copy) marked text</span></span><br><span class="line">d       <span class="comment"># delete marked text</span></span><br><span class="line">~       <span class="comment"># switch case</span></span><br></pre></td></tr></table></figure><h2 id="Cut-and-paste"><a href="#Cut-and-paste" class="headerlink" title="Cut and paste"></a>Cut and paste</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yy       <span class="comment"># yank (copy) a line</span></span><br><span class="line">2yy      <span class="comment"># yank (copy) 2 lines</span></span><br><span class="line">yw       <span class="comment"># yank (copy) the characters of the word from the cursor position to the start of the next word</span></span><br><span class="line">y$       <span class="comment"># yank (copy) to end of line</span></span><br><span class="line">p        <span class="comment"># put (paste) the clipboard after cursor</span></span><br><span class="line">P        <span class="comment"># put (paste) before cursor</span></span><br><span class="line">dd       <span class="comment"># delete (cut) a line</span></span><br><span class="line">2dd      <span class="comment"># delete (cut) 2 lines</span></span><br><span class="line">dw       <span class="comment"># delete (cut) the characters of the word from the cursor position to the start of the next word</span></span><br><span class="line">D        <span class="comment"># delete (cut) to the end of the line</span></span><br><span class="line">d$       <span class="comment"># delete (cut) to the end of the line</span></span><br><span class="line">x        <span class="comment"># delete (cut) character</span></span><br></pre></td></tr></table></figure><h2 id="Search-and-replace"><a href="#Search-and-replace" class="headerlink" title="Search and replace"></a>Search and replace</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/pattern       <span class="comment"># search for pattern</span></span><br><span class="line">?pattern       <span class="comment"># search backward for pattern</span></span><br><span class="line">\vpattern      <span class="comment"># 'very magic' pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)</span></span><br><span class="line">n              <span class="comment"># repeat search in same direction</span></span><br><span class="line">N              <span class="comment"># repeat search in opposite direction</span></span><br><span class="line">:%s/old/new/g  <span class="comment"># replace all old with new throughout file</span></span><br><span class="line">:%s/old/new/gc <span class="comment"># replace all old with new throughout file with confirmations</span></span><br><span class="line">:noh           <span class="comment"># remove highlighting of search matches</span></span><br></pre></td></tr></table></figure><h2 id="Search-in-multiple-files"><a href="#Search-in-multiple-files" class="headerlink" title="Search in multiple files"></a>Search in multiple files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:vimgrep /pattern/ &#123;file&#125; <span class="comment"># search for pattern in multiple files</span></span><br><span class="line">:cn                       <span class="comment"># jump to the next match</span></span><br><span class="line">:cp                       <span class="comment"># jump to the previous match</span></span><br><span class="line">:copen                    <span class="comment"># open a window containing the list of matches</span></span><br></pre></td></tr></table></figure><h2 id="Exiting"><a href="#Exiting" class="headerlink" title="Exiting"></a>Exiting</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">:w              <span class="comment"># write (save) the file, but don't exit</span></span><br><span class="line">:w !sudo tee %  <span class="comment"># write out the current file using sudo</span></span><br><span class="line">:wq or :x or ZZ <span class="comment"># write (save) and quit</span></span><br><span class="line">:q              <span class="comment"># quit (fails if there are unsaved changes)</span></span><br><span class="line">:q! or ZQ       <span class="comment"># quit and throw away unsaved changes</span></span><br></pre></td></tr></table></figure><h2 id="Working-with-multiple-files"><a href="#Working-with-multiple-files" class="headerlink" title="Working with multiple files"></a>Working with multiple files</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:e file       <span class="comment"># edit a file in a new buffer</span></span><br><span class="line">:bnext or :bn <span class="comment"># go to the next buffer</span></span><br><span class="line">:bprev or :bp <span class="comment"># go to the previous buffer</span></span><br><span class="line">:bd           <span class="comment"># delete a buffer (close a file)</span></span><br><span class="line">:ls           <span class="comment"># list all open buffers</span></span><br><span class="line">:sp file      <span class="comment"># open a file in a new buffer and split window</span></span><br><span class="line">:vsp file     <span class="comment"># open a file in a new buffer and vertically split window</span></span><br><span class="line">Ctrl + ws     <span class="comment"># split window</span></span><br><span class="line">Ctrl + ww     <span class="comment"># switch windows</span></span><br><span class="line">Ctrl + wq     <span class="comment"># quit a window</span></span><br><span class="line">Ctrl + wv     <span class="comment"># split window vertically</span></span><br><span class="line">Ctrl + wh     <span class="comment"># move cursor to the left window (vertical split)</span></span><br><span class="line">Ctrl + wl     <span class="comment"># move cursor to the right window (vertical split)</span></span><br><span class="line">Ctrl + wj     <span class="comment"># move cursor to the window below (horizontal split)</span></span><br><span class="line">Ctrl + wk     <span class="comment"># move cursor to the window above (horizontal split)</span></span><br></pre></td></tr></table></figure><h2 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:tabnew or :tabnew file <span class="comment"># open a file in a new tab</span></span><br><span class="line">Ctrl + wT               <span class="comment"># move the current split window into its own tab</span></span><br><span class="line">gt or :tabnext or :tabn <span class="comment"># move to the next tab</span></span><br><span class="line">gT or :tabprev or :tabp <span class="comment"># move to the previous tab</span></span><br><span class="line">&lt;number&gt;gt              <span class="comment"># move to tab &lt;number&gt;</span></span><br><span class="line">:tabmove &lt;number&gt;       <span class="comment"># move current tab to the &lt;number&gt;th position (indexed from 0)</span></span><br><span class="line">:tabclose or :tabc      <span class="comment"># close the current tab and all its windows</span></span><br><span class="line">:tabonly or :tabo       <span class="comment"># close all tabs except for the current one</span></span><br><span class="line">:tabdo <span class="built_in">command</span>          <span class="comment"># run the command on all tabs (e.g. :tabdo q - closes all opened tabs)</span></span><br></pre></td></tr></table></figure><p><img data-src="https://cdn.shopify.com/s/files/1/0165/4168/files/preview.png" alt="Vim Cheat Map" title="Vim Cheat Map"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy Hexo MD Files on GitHub</title>
      <link href="/2015/06/04/Deploy-Hexo-MD-Files-on-GitHub/"/>
      <url>/2015/06/04/Deploy-Hexo-MD-Files-on-GitHub/</url>
      
        <content type="html"><![CDATA[<h2 id="Modify-config-yml-File"><a href="#Modify-config-yml-File" class="headerlink" title="Modify _config.yml File"></a>Modify _config.yml File</h2><p>默认生成的_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: http:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">type:</span><br></pre></td></tr></table></figure><p>修改后的_config.yml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 对应仓库的SSH地址（可以在GitHub对应的仓库中复制）</span><br><span class="line">branch: 分支（User Pages为master，Project Pages为gh-pages）</span><br></pre></td></tr></table></figure><p>为了能够使Hexo部署到GitHub上，需要安装一个插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后，执行下列指令即可完成部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>之后，可以通过在浏览器键入：username.github.io进行浏览，开心吧~</p><h2 id="Deploy-MD-and-config-files-on-github"><a href="#Deploy-MD-and-config-files-on-github" class="headerlink" title="Deploy MD and config files on github"></a>Deploy MD and config files on github</h2><h1 id="Methond-one"><a href="#Methond-one" class="headerlink" title="Methond one:"></a>Methond one:</h1><p>优化部署与管理</p><ol><li>概述</li></ol><p>Hexo部署到GitHub上的文件，是.md（你的博文）转化之后的.html（静态网页）。因此，当你重装电脑或者想在不同电脑上修改博客时，就不可能了（除非你自己写html o(^▽^)o ）。</p><p>其实，Hexo生成的网站文件中有.gitignore文件，因此它的本意也是想我们将Hexo生成的网站文件存放到GitHub上进行管理的（而不是用U盘或者云备份啦(╬▔皿▔)凸）。这样，不仅解决了上述的问题，还可以通过git的版本控制追踪你的博文的修改过程，是极赞的。</p><p>但是，如果每一个GitHub Pages都需要创建一个额外的仓库来存放Hexo网站文件，我感觉很麻烦（10个项目需要20个仓库(ˉ▽ˉ；)…）。</p><p>所以，我利用了分支！！！</p><p>简单地说，每个想建立GitHub Pages的仓库，起码有两个分支，一个用来存放Hexo网站的文件，一个用来发布网站。</p><p>下面以我的博客作为例子详细地讲述。<br>2. 我的博客搭建流程</p><pre><code>创建仓库，CrazyMilk.github.io；创建两个分支：master 与 hexo；设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库；在本地CrazyMilk.github.io文件夹下通过Git bash依次执行npm install hexo、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;修改_config.yml中的deploy参数，分支应为master；依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；执行hexo generate -d生成网站并部署到GitHub上。</code></pre><p>这样一来，在GitHub上的CrazyMilk.github.io仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！<br>3. 我的博客管理流程</p><ul><li>日常修改</li></ul><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理：</p><pre><code>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub（此时当前分支应为hexo）；然后才执行hexo generate -d发布网站到master分支上。</code></pre><p>虽然两个过程顺序调转一般不会有问题，不过逻辑上这样的顺序是绝对没问题的（例如突然死机要重装了，悲催….的情况，调转顺序就有问题了）。</p><ul><li>本地资料丢失</li></ul><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><pre><code>使用git clone git@github.com:CrazyMilk/CrazyMilk.github.io.git拷贝仓库（默认分支为hexo）；在本地新拷贝的CrazyMilk.github.io文件夹下通过Git bash依次执行下列指令：npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要hexo init这条指令）。</code></pre><h1 id="Methond-two"><a href="#Methond-two" class="headerlink" title="Methond two:"></a>Methond two:</h1><p>使用 hexo，很多人的第一个困惑就是，如何保存 README.md 文件。网上的方法是，在<br>source 目录下存放 README.md 文件。但这还不够，因为在进行 hexo generate 时会把<br>README.md 渲染成 README.html。</p><p>Use <code>skip_render</code> command to omit the fils with .md and .yml. This commend by<br>default use source/ directory.</p><p><code>skip_render: README.md # 禁止进行渲染的文件</code></p><p>The file tree under <code>source/</code> folder should look like the following:</p><p>│  README.md<br>│<br>├─categories<br>│      index.md<br>│<br>├─ori_data<br>│  │  config.yml<br>│  │<br>│  ├─categories<br>│  │      index.md<br>│  │<br>│  ├─posts<br>│  │      2013-02-05-my-blog-in-github.md<br>│  │      2013-02-06-resolve-goagent-cp65001.m<br>│  │      2013-03-11-c_stack.md<br>│  │      2015-05-03-hello-hexo.md<br>│  │<br>│  ├─tags<br>│  │      index.md<br>│  │<br>│  └─themes<br>│      └─next<br>│              config.yml<br>│<br>├─tags<br>│      index.md<br>│<br>└─_posts<br>2013-02-05-my-blog-in-github.md<br>2013-02-06-resolve-goagent-cp65001.md<br>2013-03-11-c_stack.md<br>2013-03-18-understand_typdef_funp.md<br>2013-03-24-understand_container_of.md<br>2015-05-03-hello-hecommend by</p><p>The <code>_config.yml</code> file should be modified to :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads&#x2F;code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render: [README.md, ori_data&#x2F;*, ori_data&#x2F;posts&#x2F;*, ori_data&#x2F;tags&#x2F;*,</span><br><span class="line">ori_data&#x2F;categories&#x2F;*, ori_data&#x2F;themes&#x2F;next&#x2F;*] # 禁止进行渲染的文件</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>P.S.</p><ul><li>Need to change the <code>_config.yml</code> or <code>_post/</code> to <code>config.yml</code> and <code>post/</code>,<br>  because they will be omitted with <code>_</code> prefix.</li><li>After the configuration, we can run <code>hexo generate</code> and <code>hexo deploy</code>, we can<br>  cd into <code>.deploy_git/</code> directory, and take a look at the following file<br>  tree.</li><li>After this, you can simply make modification in <code>source/_posts/</code> directory<br>  and then copy the files to <code>source/ori_data/posts/</code>.</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol><li><a href="http://baurine.github.io/2015/05/10/hexo_git.html" target="_blank" rel="noopener">将原始的 .md 文件纳入 hexo<br>的版本管理</a></li><li><a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="noopener">GitHub Pages + Hexo搭建博客</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub Pages </tag>
            
            <tag> Tech </tag>
            
            <tag> Deploy </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 Vim 高效地编辑 LaTeX 文档</title>
      <link href="/2015/05/17/Vim-and-latex-tips/"/>
      <url>/2015/05/17/Vim-and-latex-tips/</url>
      
        <content type="html"><![CDATA[<p>最近 Vim 和 LaTex 用的都比较多，积累了一些经验，如果你也经常使用 Vim来编辑 LaTex 文档，不妨尝试一下我推荐的快捷键、命令以及插件。这些技巧都会提升写作效率，才能享 受写作的乐趣。</p><h1 id="一、快捷键"><a href="#一、快捷键" class="headerlink" title="一、快捷键"></a>一、快捷键</h1><ol><li><p>= 自动格式化对齐样式，对于有代码洁癖强迫症的人来说绝对是福音。</p></li><li><p>gq家族 根据 textwidth 自动换行。gqgq: 换行当前段。gqap: 格式化整个段。{Visual}gq: 格式化选定的部分。对于每行字符数量不能超过 80 的人来说，又一个福音。最后你的文章会非常整齐，就像这样：</p></li></ol><p><code>Vim (an acronym for Vi IMproved) is a text editor written by Bram Moolenaar andfirst released publicly in 1991. Based on the vi editor common to Unix-likesystems, Vim is designed for use both from a command line interface and as astandalone application in a graphical user interface. Vim is free and opensource software and is released under a license that includes some charitywareclauses, encouraging users who enjoy the software to consider donating tochildren in Uganda. The license is compatible with the GNU General PublicLicense.</code></p><h1 id="二、命令-amp-vimrc"><a href="#二、命令-amp-vimrc" class="headerlink" title="二、命令 &amp; .vimrc"></a>二、命令 &amp; .vimrc</h1><ol><li><p>:set spell 经常写英文的人会用得到的，一不小心打错单词了，Vim 会在单词上加一个下划线提示。你还可以把你认为正确的特殊单词加到字典里面。</p></li><li><p>autocmd BufNewFile,BufRead *.tex set spell 把这句话加到 .vimrc 里面可以在打开 .tex 文件的时候自动进行拼写检查。</p></li><li><p>let g:tex_indent_items=0 估计大家都打开了换行时自动对齐的功能，但是有没有发现这样一个问题，在用 itemize 的时候，每一个 item 都会自动缩进两个，非常麻烦。如果你懒得搞的话，最后就变成了这个样子：</p></li></ol><p>\begin{itemize}<br>  \item fist …<br>    \item second …<br>      \item third …<br>\end{itemize}</p><p>如果在 .vimrc 里面加入 let g:tex_indent_items=0 一句话，自动缩进终于变得正常了。</p><h1 id="三、插件"><a href="#三、插件" class="headerlink" title="三、插件"></a>三、插件</h1><ol><li>UltiSnips 无论是编辑 LaTex 文档还是写代码，UltiSnips 绝对是利器。他可以自动补全常用的代码结构。拿 Tex 举例，输入 item 就会出来：</li></ol><p>item<br>\begin{itemize}<br>  \item<br>\end{itemize}</p><p>fig<br>\begin{figure}[htpb]<br>  \centering<br>  \includegraphics[width=0.8\linewidth]{name.ext}<br>  \caption{Name}<br>  \label{fig:name}<br>\end{figure}</p><p>lp<br>\left(contents\right)</p><p>还有非常多的自动补全，\begin{}…\end{} \section{}…。当然，你还可以编写自己的 snippets。用了这个插件，写东西的时候有一种畅快淋漓的感觉，再也不用纠结乱起八糟的命令了。可以看一下作者录制的四个 screencasts，了解 UltiSpips 更强大的功能。</p><ol start="2"><li>Align 用 Align 来对齐表格，又一个强迫症的福音。</li></ol><p>\begin{tabular}{cccc}<br>  a &amp; b &amp; c &amp; d \<br>  Ef &amp; long long &amp; ss &amp; a \<br>  test &amp; n &amp; long content &amp; small \<br>\end{tabular}<br>“ 选中表格内容，按 tt，就可以对齐了，豁然开朗。<br>\begin{tabular}{cccc}<br>  a    &amp; b         &amp; c            &amp; d     \<br>  Ef   &amp; long long &amp; ss           &amp; a     \<br>  test &amp; n         &amp; long content &amp; small \<br>\end{tabular}</p><ol start="3"><li>Syntastic Syntastic 是语法检查的利器。对于 Tex<br>文档来说，你总不想到编译的时候才发现 &amp; 符号没有用转移字符 &amp; 吧。Syntastic<br>会动态的检查 Tex<br>文档的语法，除了语法错误的提示，他还会有一些语法的建议。附一张官方的图，这是多么的方便啊！ </li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>还有一些不在强烈建议的列表当中，但是也非常的有用。比如说单词补全的插件：neocompletecache。或者直接从<br>markdown 转成 tex 文档，让你完全专注于写作: pandoc。剩下的都是是看个人喜好了。</p><p>Update: 还有一个非常重要的工具，latexmk，是 LaTex 的 Makefile。好像 tex-live 的包里面直接就带了。有了他，就可以左边开一个 Vim，右边放一个 PDF。然后在 Vim 中保存修改，右面 PDF 就会自动更新。想达到这样的效果，首先要建立一个配置文件 .latexmkrc，里面写上：</p><p>$pdf_previewer = “start evince %O %S”;</p><p>这里是为了制定默认的 PDF 浏览器。设置完之后，只要运行 latexmk 命令就能自动监控 tex 文件的修改，然后重新编译。</p><p>latexmk -pdf -pvc xxx.tex      // 用 pdflatex 编译，同时打开 PDF 浏览，并监控修改<br>latexmk -xelatex -pvc xxx.tex  // 用 xelatex 编译，同时打开 PDF 浏览，并监控修改<br>latexmk -c     // 删除生成的中间文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Vim </tag>
            
            <tag> Latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>archetype plugin</title>
      <link href="/2014/08/16/archetype-plugin/"/>
      <url>/2014/08/16/archetype-plugin/</url>
      
        <content type="html"><![CDATA[<p>Create mvn project: <code>mvn archetype:generatemvn archetype:generate -DgroupId=&lt;your-groupId&gt; -DartifactId=&lt;your-artifactId&gt;-Dversion=&lt;version&gt; -Dpackage=&lt;package-name&gt;</code></p><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vim command map</title>
      <link href="/2014/07/16/Vim-command-map/"/>
      <url>/2014/07/16/Vim-command-map/</url>
      
        <content type="html"><![CDATA[<p><img data-src="https://c2.staticflickr.com/2/1524/25323931442_6bed1f3402_h.jpg" alt="Vim command map" title="vim command map"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Quick Markdown Example</title>
      <link href="/2014/06/16/Quick-Markdown-Example/"/>
      <url>/2014/06/16/Quick-Markdown-Example/</url>
      
        <content type="html"><![CDATA[<h1 id="An-h1-header"><a href="#An-h1-header" class="headerlink" title="An h1 header"></a>An h1 header</h1><p>Paragraphs are separated by a blank line.</p><p>2nd paragraph. <em>Italic</em>, <strong>bold</strong>, and <code>monospace</code>. Itemized lists<br>look like:</p><ul><li>this one</li><li>that one</li><li>the other one</li></ul><p>Note that — not considering the asterisk — the actual text<br>content starts at 4-columns in.</p><blockquote><p>Block quotes are<br>written like so.</p><p>They can span multiple paragraphs,<br>if you like.</p></blockquote><p>Use 3 dashes for an em-dash. Use 2 dashes for ranges (ex., “it’s all<br>in chapters 12–14”). Three dots … will be converted to an ellipsis.<br>Unicode is supported. ☺</p><h2 id="An-h2-header"><a href="#An-h2-header" class="headerlink" title="An h2 header"></a>An h2 header</h2><p>Here’s a numbered list:</p><ol><li>first item</li><li>second item</li><li>third item</li></ol><p>Note again how the actual text starts at 4 columns in (4 characters<br>from the left side). Here’s a code sample:</p><pre><code># Let me re-iterate ...for i in 1 .. 10 { do-something(i) }</code></pre><p>As you probably guessed, indented 4 spaces. By the way, instead of<br>indenting the block, you can use delimited blocks, if you like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define foobar() &#123;</span><br><span class="line">    print &quot;Welcome to flavor country!&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(which makes copying &amp; pasting easier). You can optionally mark the<br>delimited block for Pandoc to syntax highlight it:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># Quick, count to ten!</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="comment"># (but not *too* quick)</span></span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure><h3 id="An-h3-header"><a href="#An-h3-header" class="headerlink" title="An h3 header"></a>An h3 header</h3><p>Now a nested list:</p><ol><li><p>First, get these ingredients:</p><ul><li>carrots</li><li>celery</li><li>lentils</li></ul></li><li><p>Boil some water.</p></li><li><p>Dump everything in the pot and follow<br>this algorithm:</p><pre><code>find wooden spoonuncover potstircover potbalance wooden spoon precariously on pot handlewait 10 minutesgoto first step (or shut off burner when done)</code></pre><p>Do not bump wooden spoon or it will fall.</p></li></ol><p>Notice again how text always lines up on 4-space indents (including<br>that last line which continues item 3 above).</p><p>Here’s a link to <a href="http://foo.bar" target="_blank" rel="noopener">a website</a>, to a <a href="local-doc.html">local<br>doc</a>, and to a <a href="#an-h2-header">section heading in the current<br>doc</a>. Here’s a footnote [^1].</p><p>[^1]: Footnote text goes here.</p><p>Tables can look like this:</p><p>size  material      color</p><hr><p>9     leather       brown<br>10    hemp canvas   natural<br>11    glass         transparent</p><p>Table: Shoes, their sizes, and what they’re made of</p><p>(The above is the caption for the table.) Pandoc also supports<br>multi-line tables:</p><hr><p>keyword   text</p><hr><p>red       Sunsets, apples, and<br>          other red or reddish<br>          things.</p><p>green     Leaves, grass, frogs<br>          and other things it’s<br>          not easy being.</p><hr><p>A horizontal rule follows.</p><hr><p>Here’s a definition list:</p><p>apples<br>  : Good for making applesauce.<br>oranges<br>  : Citrus!<br>tomatoes<br>  : There’s no “e” in tomatoe.</p><p>Again, text is indented 4 spaces. (Put a blank line between each<br>term/definition pair to spread things out more.)</p><p>Here’s a “line block”:</p><p>| Line one<br>|   Line too<br>| Line tree</p><p>and images can be specified like so:</p><p><img data-src="https://github.com/scrooloose/syntastic/raw/master/_assets/screenshot_1.png" alt="example image" title="An exemplary image"></p><p>Inline math equations go in like so: $\omega = d\phi / dt$. Display<br>math should get its own line and be put in in double-dollarsigns:</p><p>$$I = \int \rho R^{2} dV$$</p><p>And note that you can backslash-escape any punctuation characters<br>which you wish to be displayed literally, ex.: `foo`, *bar*, etc.–</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub Pages </tag>
            
            <tag> Tech </tag>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux WorkShop</title>
      <link href="/2014/05/30/Linux-WorkShop/"/>
      <url>/2014/05/30/Linux-WorkShop/</url>
      
        <content type="html"><![CDATA[<p>class: center, middle</p><h1 id="Introduction-to-Linux"><a href="#Introduction-to-Linux" class="headerlink" title="Introduction to Linux"></a>Introduction to Linux</h1><p><img data-src="http://cynapse.com/wp-content/uploads/linux-powered_0.png" alt="img"></p><hr><p>class: middle</p><h1 id="What-is-Linux"><a href="#What-is-Linux" class="headerlink" title="What is Linux"></a>What is Linux</h1><ul><li>Free and Open Source computer Operating System</li><li>First released in 1991 by Linus Torvalds</li><li>Linus was 21 years old at the time</li><li>Today, Linux is found everywhere!</li></ul><hr><p>class: center</p><h1 id="Linux-on-Devices"><a href="#Linux-on-Devices" class="headerlink" title="Linux on Devices"></a>Linux on Devices</h1><p>TVs | PCs | Tablets | Phones (since 2013)</p><p><img data-src="https://assets.ubuntu.com/sites/ubuntu/latest/u/img/devices/devices-family.png" alt="img"></p><hr><p>class: inverse, center, middle</p><h2 id="Why-use-Linux"><a href="#Why-use-Linux" class="headerlink" title="Why use Linux?"></a>Why use Linux?</h2><hr><p>.left-column[</p><h2 id="Innovative"><a href="#Innovative" class="headerlink" title="Innovative"></a>Innovative</h2><p>]<br>.right-column[<br>.center[<strong>Package Managers</strong> (since 1995)]</p><p>.center[<img data-src="https://ryanlerch.fedorapeople.org/musique.png" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-1"><a href="#Innovative-1" class="headerlink" title="Innovative"></a>Innovative</h2><p>]<br>.right-column[<br>.center[<strong>Workspaces</strong> (since 1998)]</p><p>.center[<img data-src="http://core0.staticworld.net/images/article/2013/03/7-ubuntu-workspace-switcher-100028064-orig.png" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-2"><a href="#Innovative-2" class="headerlink" title="Innovative"></a>Innovative</h2><p>]<br>.right-column[<br>.center[<strong>Live CD</strong> (free shipping since 2006)]</p><p>.center[<img data-src="https://bitcoinpaperwallet.com/ubuntu-linux-live-bootable-cd/ubuntu-cd.jpg" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-3"><a href="#Innovative-3" class="headerlink" title="Innovative"></a>Innovative</h2><p>]<br>.right-column[<br>.center[<strong>Task Spread</strong> (since 2013)]</p><p>.center[<img data-src="http://itsfoss.com/wp-content/uploads/2014/10/Windows_Spread_Linux_Gnome.jpeg" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-4"><a href="#Innovative-4" class="headerlink" title="Innovative"></a>Innovative</h2><p>]<br>.right-column[<br>.center[<strong>Convergence</strong> (since 2015)]</p><p>.center[<img data-src="http://www.omgubuntu.co.uk/wp-content/uploads/2012/02/noname-11.jpg" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-5"><a href="#Innovative-5" class="headerlink" title="Innovative"></a>Innovative</h2><h2 id="Adaptable"><a href="#Adaptable" class="headerlink" title="Adaptable"></a>Adaptable</h2><p>]<br>.right-column[<br>.center[<strong>Firefox OS Phone</strong>]</p><ul><li>Sold for $35 at launch</li><li>Runs only a web renderer on the Linux kernel</li><li>Feels fast, smooth, fluid<br>.center[<img data-src="http://cdn.gsmarena.com/vv/newsimg/13/01/firefox-os-developer-phones/gsmarena_001.jpg" alt="img">]<br>]</li></ul><hr><p>.left-column[</p><h2 id="Innovative-6"><a href="#Innovative-6" class="headerlink" title="Innovative"></a>Innovative</h2><h2 id="Adaptable-1"><a href="#Adaptable-1" class="headerlink" title="Adaptable"></a>Adaptable</h2><p>]<br>.right-column[<br>.center[<strong>Chrome OS</strong>]</p><ul><li>First major OS to boot in under 2 seconds!</li><li>Runs only a web renderer on the Linux kernel</li></ul><p>.center[<img data-src="http://image.slidesharecdn.com/chromeos-140711225857-phpapp01/95/chrome-os-the-stateless-operating-system-13-638.jpg?cb=1405119621" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-7"><a href="#Innovative-7" class="headerlink" title="Innovative"></a>Innovative</h2><h2 id="Adaptable-2"><a href="#Adaptable-2" class="headerlink" title="Adaptable"></a>Adaptable</h2><h2 id="Productive"><a href="#Productive" class="headerlink" title="Productive"></a>Productive</h2><p>]<br>.right-column[<br>.center[<strong>XMonad</strong>]</p><p>.center[<img data-src="https://wiki.haskell.org/wikiupload/a/aa/Screen-triplehead-galois.jpg" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-8"><a href="#Innovative-8" class="headerlink" title="Innovative"></a>Innovative</h2><h2 id="Adaptable-3"><a href="#Adaptable-3" class="headerlink" title="Adaptable"></a>Adaptable</h2><h2 id="Productive-1"><a href="#Productive-1" class="headerlink" title="Productive"></a>Productive</h2><p>]<br>.right-column[<br>.center[<strong>Containers</strong>]</p><p>.center[<img data-src="http://blog.leaseweb.com/uploads/2014/07/containers-vs-vms.jpg" alt="img">]<br>]</p><hr><p>.left-column[</p><h2 id="Innovative-9"><a href="#Innovative-9" class="headerlink" title="Innovative"></a>Innovative</h2><h2 id="Adaptable-4"><a href="#Adaptable-4" class="headerlink" title="Adaptable"></a>Adaptable</h2><h2 id="Productive-2"><a href="#Productive-2" class="headerlink" title="Productive"></a>Productive</h2><p>]<br>.right-column[<br>.center[<strong>Terminal</strong>]</p><p>.center[<img data-src="http://dotshare.it/public/images/uploads/40.png" alt="img">]<br>]</p><hr><p>class: inverse, center, middle</p><h1 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h1><hr><p>class: center</p><h1 id="Linux-Architecture"><a href="#Linux-Architecture" class="headerlink" title="Linux Architecture"></a>Linux Architecture</h1><p>.center[<img data-src="http://www.tonypickett.com/wp-content/uploads/2013/09/arch_01.jpg" alt="img">]</p><hr><p>class: center</p><h1 id="Window-Managers"><a href="#Window-Managers" class="headerlink" title="Window Managers"></a>Window Managers</h1><p>.center[<img data-src="http://downtoearthlinux.com/wp-content/uploads/2014/03/de-vs-wm.jpg" alt="img">]</p><hr><p>class: center</p><h1 id="File-System-Hierarchy"><a href="#File-System-Hierarchy" class="headerlink" title="File System Hierarchy"></a>File System Hierarchy</h1><p>.center[<img data-src="http://media.brajeshwar.com/i/technology/linux-file-tree.jpg" alt="img">]</p><hr><p>class: inverse, center, middle</p><h1 id="Basic-Navigation"><a href="#Basic-Navigation" class="headerlink" title="Basic Navigation"></a>Basic Navigation</h1><hr><h1 id="The-Shell"><a href="#The-Shell" class="headerlink" title="The Shell"></a>The Shell</h1><p>The shell prompt will appear when the shell is ready to accept input</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[me@linuxbox /working/directory]$</span><br></pre></td></tr></table></figure><ul><li>username@hostname</li><li>followed by the current working directory</li><li>followed by a <code>$</code> sign</li></ul><p>Only the <code>$</code> sign is required for a shell.</p><p>Some shells ignore the username, hostname, and working directory.</p><hr><h1 id="Essential-commands"><a href="#Essential-commands" class="headerlink" title="Essential commands"></a>Essential commands</h1><ul><li><p><code>pwd</code> prints the current working directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/home/siddhu</span><br></pre></td></tr></table></figure></li><li><p><code>mkdir</code> makes a directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir testdir</span><br></pre></td></tr></table></figure></li><li><p><code>cd</code> changes the current working directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> testdir</span><br></pre></td></tr></table></figure></li><li><p><code>ls</code> lists the contents of a directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls /home/siddhu</span><br><span class="line">testdir</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Essential-commands-1"><a href="#Essential-commands-1" class="headerlink" title="Essential commands"></a>Essential commands</h1><ul><li><p><code>man</code> gives offline documentation for commands</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ man ls</span><br></pre></td></tr></table></figure></li><li><p><code>cp</code> copies a file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure></li><li><p><code>rm</code> removes a file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rm file</span><br></pre></td></tr></table></figure></li><li><p><code>mv</code> moves a file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv <span class="built_in">source</span> destination</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Essential-commands-2"><a href="#Essential-commands-2" class="headerlink" title="Essential commands"></a>Essential commands</h1><ul><li><p><code>less</code> views a file, one screenful at a time</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ less file</span><br></pre></td></tr></table></figure></li><li><p><code>cat</code> concatenates files</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat file1 file2 file3</span><br></pre></td></tr></table></figure></li><li><p><code>nano</code> is used to edit a file</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nano file</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Essential-commands-3"><a href="#Essential-commands-3" class="headerlink" title="Essential commands"></a>Essential commands</h1><ul><li><code>tree</code> displays the directory tree after the current directory<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── dir1</span><br><span class="line">│   ├── file2</span><br><span class="line">│   └── subdir</span><br><span class="line">│       └── anotherfile</span><br><span class="line">├── dir2</span><br><span class="line">├── dir3</span><br><span class="line">│   └── subdir</span><br><span class="line">│       └── subsubdir</span><br><span class="line">└── file</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Aliases"><a href="#Aliases" class="headerlink" title="Aliases"></a>Aliases</h1><ul><li><code>~</code> is an alias for the current users’ home directory</li><li><code>#</code> instead of <code>$</code> as a prompt indicates superuser privileges</li><li><code>~username</code> refers to the home directory of username</li><li><code>.</code> refers to the current directory</li><li><code>..</code> refers to the parent directory</li></ul><p>Path names may be absolute or relative.</p><ul><li><code>cd /home/siddhu/mydir</code> uses an absolute path name</li><li><code>cd mydir</code> uses a relative path name</li><li><code>cd ../mydir</code> also uses a relative path name</li></ul><p>When you use a relative path name without <code>.</code> or <code>..</code>, the shell replaces it<br>with an absolute path name:</p><p><code>cd mydir</code> -&gt; <code>cd $PWD/mydir</code></p><p><code>$PWD</code> is a special variable which holds the current working directory</p><hr><h1 id="Cursor-Movement"><a href="#Cursor-Movement" class="headerlink" title="Cursor Movement"></a>Cursor Movement</h1><p>Basic movement:</p><ul><li>Up arrow goes to the previous command</li><li>Down arrow goes to the next command</li><li>Left/Right are used to jump characters backwards/forwards</li><li>Ctrl+Left / Ctrl+Right are used to jump words backwards/forwards</li></ul><p>Advanced movement (Emacs bindings):</p><ul><li><code>Ctrl-p</code> goes to the previous command</li><li><code>Ctrl-n</code> goes to the next command</li><li><code>Ctrl-r</code> is used to search for a previous command</li><li><code>Ctrl-s</code> is used to search for a newer command</li><li><code>Ctrl-a</code> moves the cursor to the beginning of the line</li><li><code>Ctrl-e</code> moves the cursor to the end of the line</li><li><code>Ctrl-w</code> deletes a word backwards, while <code>Alt-w</code> deletes a line backwards</li><li><code>Ctrl-d</code> deletes a character forward, while <code>Alt-d</code> deletes a word forward</li><li><code>Ctrl-f</code> jumps a character forward, while <code>Alt-f</code> jumps a word forward</li><li><code>Ctrl-b</code> jumps a character backward, while <code>Alt-b</code> jumps a word backward</li></ul><hr><h1 id="Tab-Completion"><a href="#Tab-Completion" class="headerlink" title="Tab Completion"></a>Tab Completion</h1><p>Typing out long path names can become tedious. Tab completion makes it a lot easier.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> co&lt;Tab&gt;/l&lt;Tab&gt;/s&lt;Tab&gt;/com&lt;Tab&gt;</span><br><span class="line">$ <span class="built_in">cd</span> code/llvm/src/compiler</span><br></pre></td></tr></table></figure><p>If multiple completions exist, tab completion won’t succeed. Press tab twice in such scenarios’ to view all possible completions.</p><p>Pro tip: Use ZSH instead of Bash for insane tab completions</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> c/l/s/c&lt;Tab&gt;</span><br><span class="line">$ <span class="built_in">cd</span> code/llvm/src/compiler</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="UNIX"><a href="#UNIX" class="headerlink" title="UNIX"></a>UNIX</h1><hr><h1 id="Unix-Philosophy"><a href="#Unix-Philosophy" class="headerlink" title="Unix Philosophy"></a>Unix Philosophy</h1><ul><li>Aims for minimalist, modular software development</li><li>Write programs that do one thing and do it well</li><li>Write programs to work together</li><li>Write programs to handle text streams</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat localfile.txt | wc -l</span><br><span class="line"></span><br><span class="line">44</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ curl http://www.tldp.org/LDP/sag/sag.txt | wc -l</span><br><span class="line"></span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100 43698    0 43698    0     0   148k      0 --:--:-- --:--:-- --:--:--  217k</span><br><span class="line"></span><br><span class="line">7634</span><br></pre></td></tr></table></figure><hr><h1 id="Unix-Philosophy-1"><a href="#Unix-Philosophy-1" class="headerlink" title="Unix Philosophy"></a>Unix Philosophy</h1><ul><li>We use pipes (the <code>|</code> character) to chain the output of one program as the input of another</li></ul><p>.center[<img data-src="https://camo.githubusercontent.com/2effeef4795b95295b726690bb0984df7d812fcd/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f3161444b397a716163677572465a537a6a704c4d5653676f64306a462d4b4648576553565f53554c387668452f7075623f773d39313626616d703b683d333534" alt="img">]</p><hr><h1 id="Unix-Philosophy-2"><a href="#Unix-Philosophy-2" class="headerlink" title="Unix Philosophy"></a>Unix Philosophy</h1><p>Everything is a file.</p><ul><li>A text file is a file</li><li>A binary file is a file</li><li>A directory is a file</li><li>The keyboard is a file</li><li>The monitor is a file</li><li>All I/O devices are files</li></ul><p>Files don’t need extensions. File types are determined using MIME types. MIME types are embedded in the file header (inode to be precise).</p><p>Some common extensions and their corresponding MIME types are listed below:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.txt  – text/plain</span><br><span class="line">.html – text/html</span><br><span class="line">.mp3  – audio/mpeg3</span><br><span class="line">.png  – image/png</span><br><span class="line">.doc  – application/msword</span><br></pre></td></tr></table></figure><hr><h1 id="Unix-Philosophy-3"><a href="#Unix-Philosophy-3" class="headerlink" title="Unix Philosophy"></a>Unix Philosophy</h1><p>Understanding the Unix Philosophy is key to effectively using the terminal. Consider the two equivalent ways of viewing a file with less.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ less file</span><br><span class="line">$ cat file | less</span><br></pre></td></tr></table></figure><p>To understand the what’s going on, consider the following:</p><ul><li>I/O is a file</li><li>stdin, stdout, and stderr are files</li><li>stdout of one program can be piped to stdin of another program using <code>|</code></li></ul><hr><h1 id="Understanding-Filesystems"><a href="#Understanding-Filesystems" class="headerlink" title="Understanding Filesystems"></a>Understanding Filesystems</h1><blockquote><p><em>Have you noticed that directories take up 4096 bytes of memory?</em></p></blockquote><p>Files on a Linux system have an inode table. The inode table consists of:</p><ul><li>file size</li><li>ids</li><li>file mode</li><li>timestamps</li><li>symbolic link count</li><li>pointers to the disk</li></ul><p>A directory is just a special file containing the inode numbers of the files<br>inside it as an array. The size of this array is usually less 4096 bytes.</p><p>Filesystems in Linux are usually block aligned. 4096 bytes is a common block<br>size, and since the directory size is less than 4096 bytes, it’s aligned at<br>the 4096 byte boundary, making it’s size 4096 bytes.</p><hr><h1 id="Understanding-Filesystems-1"><a href="#Understanding-Filesystems-1" class="headerlink" title="Understanding Filesystems"></a>Understanding Filesystems</h1><p>Multiple pointers to the inode number may exist. These pointers are<br>called hard links. All hard links are equivalent.</p><p>The alternative, is to have symbolic links, which point to the original<br>file path, and not the inode number itself.</p><p>.center[<img data-src="http://deano.me/wp-content/uploads/2014/12/HardVsSymbolicLInks.png" alt="img">]</p><hr><p>class: inverse, center, middle</p><h1 id="Unix-Patterns"><a href="#Unix-Patterns" class="headerlink" title="Unix Patterns"></a>Unix Patterns</h1><hr><h1 id="Wildcards"><a href="#Wildcards" class="headerlink" title="Wildcards"></a>Wildcards</h1><p>Wildcards are patterns for searching files</p><ul><li><code>*</code> represents zero or more characters</li><li><code>?</code> represents a single character</li><li><code>[]</code> represents a range of characters</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">blue blah blarg bar baz file example new.txt old.txt foo1 foo2 foo3</span><br><span class="line"></span><br><span class="line">$ ls b*</span><br><span class="line">blue blah blarg bar baz</span><br><span class="line"></span><br><span class="line">$ ls ba?</span><br><span class="line">bar baz</span><br><span class="line"></span><br><span class="line">$ ls *.txt</span><br><span class="line">new.txt old.txt</span><br><span class="line"></span><br><span class="line">$ ls *[0-9]*</span><br><span class="line">foo1 foo2 foo3</span><br></pre></td></tr></table></figure><p>Under the hood, the shell auto completes wildcards before executing the command.</p><hr><h1 id="Permissions"><a href="#Permissions" class="headerlink" title="Permissions"></a>Permissions</h1><p>Linux has 3 permissions:</p><ul><li>r - read (view the file)</li><li>w - write (edit the file)</li><li>x - execute (run the file)</li></ul><p>The permissions are granted for 3 groups:</p><ul><li>u - owner - person who owns the file (usually the person who created it)</li><li>g - group - accessible to everyone in the group</li><li>o - others - accessible to everyone</li></ul><hr><h1 id="Permissions-1"><a href="#Permissions-1" class="headerlink" title="Permissions"></a>Permissions</h1><p>Use <code>ls -l</code> to view the permissions on a file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ touch file &amp;&amp; mkdir dir</span><br><span class="line">$ ls -l</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu    0 May 13 02:03 file</span><br><span class="line">drwxrwxr-x 2 siddhu siddhu 4096 May 13 02:04 dir</span><br></pre></td></tr></table></figure><p>The format is:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  d         r w x   r w x   r w x</span><br><span class="line"></span><br><span class="line">  ^          ^        ^       ^</span><br><span class="line">  |          |        |       |</span><br><span class="line">directory   owner    group   others</span><br></pre></td></tr></table></figure><ul><li>A dash (<code>-</code>) indicates the absense of that field</li><li><code>rwx</code> indicates read/write/execute privilege on the file</li></ul><hr><h1 id="Permissions-2"><a href="#Permissions-2" class="headerlink" title="Permissions"></a>Permissions</h1><p>Use <code>chmod</code> to alter the permissions of a file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ touch file</span><br><span class="line">$ chmod g+w file <span class="comment"># Give (+) group (g) write (w) privilege</span></span><br><span class="line">$ chmod o-r file <span class="comment"># Revoke (-) read (r) privilege from others (o)</span></span><br><span class="line">$ chmod a-x file <span class="comment"># Revoke execute (x) privilege from all groups (a)</span></span><br><span class="line">$ chmod u+r file <span class="comment"># Give read privilege to owner (u)</span></span><br></pre></td></tr></table></figure><p>To set rwx permissions of all groups simultaneously, use binary representation:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod 754 file <span class="comment"># 7 5 4 = 111 101 100 = rwx r-x r--</span></span><br></pre></td></tr></table></figure><hr><h1 id="Piping"><a href="#Piping" class="headerlink" title="Piping"></a>Piping</h1><ul><li><code>|</code> feeds the output of one command, as the input of the next</li><li><code>&gt;</code> writes the stdout of one command to a file</li><li><code>&gt;&gt;</code> appends the stdout of one command to a file</li><li><code>2&gt;</code> writes the stderr of one command to a file</li></ul><hr><h1 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h1><p>Threads:</p><ul><li>The number of threads is limited by the hardware</li><li>The kernel can use special threads called kernel threads</li><li>Kernel threads run on top of hardware threads</li><li>POSIX allows multiple p-threads to run on a single thread</li><li>pthreads run on top of kernel threads, they add an address space</li><li>Userspace threads are called green threads</li><li>Compilers may allow multiple green threads to run on a single p-thread</li></ul><p>Processes:</p><ul><li>A process is a program which may use one or more threads</li><li>Processes are expensive, and should not be spawned unnecessarily</li><li>Processes are isolated by process isolation</li><li>Processes communicate using inter-process communication</li></ul><hr><h1 id="Processes-1"><a href="#Processes-1" class="headerlink" title="Processes"></a>Processes</h1><p>Threads may run in userspace, or kernel space</p><p>.center[<img data-src="http://image.slidesharecdn.com/scheduleractivations-effectivekernelsupportfortheuser-levelmanagementofparallelism-110803044850-phpapp02/95/scheduler-activations-effective-kernel-support-for-the-userlevel-management-of-parallelism-6-728.jpg?cb=1312714637" alt="img">]</p><hr><h1 id="Processes-2"><a href="#Processes-2" class="headerlink" title="Processes"></a>Processes</h1><p>The OS manages theads, offloading to different hardware using different techniques.<br>You can help the OS by specifying your execution model as a programmer.</p><p>.center[<img data-src="https://www.pgroup.com/images/insider/v2n4a1i2.png" alt="img">]</p><hr><h1 id="Processes-3"><a href="#Processes-3" class="headerlink" title="Processes"></a>Processes</h1><p>You can view running process using <code>top</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ top</span><br><span class="line">Tasks: 174 total, 3 running, 171 sleeping, 0 stopped</span><br><span class="line">KiB Mem: 4050604 total, 3114428 used, 936176 free</span><br><span class="line">Kib Swap: 2104476 total, 18132 used, 2086344 free</span><br><span class="line"> </span><br><span class="line"> PID USER %CPU %MEM COMMAND</span><br><span class="line">6978 ryan 3.0  21.2 firefox</span><br><span class="line">  11 root 0.3   0.0 rcu_preempt</span><br><span class="line">6601 ryan 2.0   2.4 kwin</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>If you want to output process info to stdout, use <code>ps [aux]</code>.<br>It gives a lot of output, so we use grep to filter the results.</p><hr><h1 id="Processes-4"><a href="#Processes-4" class="headerlink" title="Processes"></a>Processes</h1><p>To kill an existing process, use <code>kill [signal] &lt;PID&gt;</code></p><p>If kill doesn’t destroy the process by itself, you can pass the<br>signal <code>-9</code> which destroys the process at the kernel level.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ps aux | grep <span class="string">'firefox'</span></span><br><span class="line">ryan 6978 8.8 23.5 2344096 945452 ? Sl 08:03 49:53 /usr/lib64/firefox/firefox</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">kill</span> 6978</span><br><span class="line"></span><br><span class="line">$ ps aux | grep <span class="string">'firefox'</span></span><br><span class="line">ryan 6978 8.8 23.5 2344096 945452 ? Sl 08:03 49:53 /usr/lib64/firefox/firefox</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">kill</span> -9 6978</span><br><span class="line"></span><br><span class="line">$ ps aux | grep <span class="string">'firefox'</span></span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h1 id="Processes-5"><a href="#Processes-5" class="headerlink" title="Processes"></a>Processes</h1><p>A process can run as a foreground or background job.</p><p>To list the current background jobs, use the <code>jobs</code> command. Pressing <code>Ctrl-Z</code><br>while running a program sends it to the background. To bring a job back to the<br>foreground, use <code>fg &lt;job-number&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ sleep 15 &amp;</span><br><span class="line">[1] 21637</span><br><span class="line"></span><br><span class="line">$ sleep 10</span><br><span class="line"><span class="comment"># (you press CTRL + z, notice the prompt comes back.)</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">jobs</span></span><br><span class="line">[1]- Running sleep 15 &amp;</span><br><span class="line">[2]+ Stopped sleep 10</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">fg</span> 2</span><br><span class="line">[1] Done sleep 15</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="Filters"><a href="#Filters" class="headerlink" title="Filters"></a>Filters</h1><hr><h1 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h1><p>cat is used for concatenating files, but abused for printing files to stdout.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cat sample</span><br><span class="line">Fred apples 20</span><br><span class="line">Susy oranges 5</span><br><span class="line">Mark watermellons 12</span><br><span class="line">Robert pears 4</span><br><span class="line">Terry oranges 9</span><br><span class="line">Lisa peaches 7</span><br><span class="line">Susy oranges 12</span><br><span class="line">Mark grapes 39</span><br><span class="line">Anne mangoes 7</span><br><span class="line">Greg pineapples 3</span><br><span class="line">Oliver rockmellons 2</span><br><span class="line">Betty limes 14</span><br><span class="line">Julie bananas 30</span><br></pre></td></tr></table></figure><hr><h1 id="head"><a href="#head" class="headerlink" title="head"></a>head</h1><p>head prints out the first n lines of it’s input. If no value for n is given, it<br>defaults to printing 10 lines.</p><p><code>head -n file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ head sample</span><br><span class="line">Fred apples 20</span><br><span class="line">Susy oranges 5</span><br><span class="line">Mark watermellons 12</span><br><span class="line">Robert pears 4</span><br><span class="line">Terry oranges 9</span><br><span class="line">Lisa peaches 7</span><br><span class="line">Susy oranges 12</span><br><span class="line">Mark grapes 39</span><br><span class="line">Anne mangoes 7</span><br><span class="line">Greg pineapples 3</span><br><span class="line"></span><br><span class="line">$ head -3 sample</span><br><span class="line">Fred apples 20</span><br><span class="line">Susy oranges 5</span><br><span class="line">Mark watermellons 12</span><br></pre></td></tr></table></figure><hr><h1 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h1><p>tail prints out the last n lines of it’s input. If no value for n is given, it<br>defaults to printing 10 lines.</p><p><code>tail -n file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ tail sample</span><br><span class="line">obert pears 4</span><br><span class="line">Terry oranges 9</span><br><span class="line">Lisa peaches 7</span><br><span class="line">Susy oranges 12</span><br><span class="line">Mark grapes 39</span><br><span class="line">Anne mangoes 7</span><br><span class="line">Greg pineapples 3</span><br><span class="line">Oliver rockmellons 2</span><br><span class="line">Betty limes 14</span><br><span class="line">Julie bananas 30</span><br><span class="line"></span><br><span class="line">$ tail -3 sample</span><br><span class="line">Oliver rockmellons 2</span><br><span class="line">Betty limes 14</span><br><span class="line">Julie bananas 30</span><br></pre></td></tr></table></figure><hr><h1 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h1><p>sort is a utility to sort the input alphabetically (though, other sorting<br>mechanisms are available)</p><p><code>sort -options file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sort sample</span><br><span class="line">Anne mangoes 7</span><br><span class="line">Betty limes 14</span><br><span class="line">Fred apples 20</span><br><span class="line">Greg pineapples 3</span><br><span class="line">Julie bananas 30</span><br><span class="line">Lisa peaches 7</span><br><span class="line">Mark grapes 39</span><br><span class="line">Mark watermellons 12</span><br><span class="line">Oliver rockmellons 2</span><br><span class="line">Robert pears 4</span><br><span class="line">Susy oranges 12</span><br><span class="line">Susy oranges 5</span><br><span class="line">Terry oranges 9</span><br></pre></td></tr></table></figure><hr><h1 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h1><p>nl numbers the lines in the input</p><p><code>nl -options file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ nl -w 1 -s <span class="string">'. '</span> sample</span><br><span class="line">1. Fred apples 20</span><br><span class="line">2. Susy oranges 5</span><br><span class="line">3. Mark watermellons 12</span><br><span class="line">4. Robert pears 4</span><br><span class="line">5. Terry oranges 9</span><br><span class="line">6. Lisa peaches 7</span><br><span class="line">7. Susy oranges 12</span><br><span class="line">8. Mark grapes 39</span><br><span class="line">9. Anne mangoes 7</span><br><span class="line">10. Greg pineapples 3</span><br><span class="line">11. Oliver rockmellons 2</span><br><span class="line">12. Betty limes 14</span><br><span class="line">13. Julie bananas 30</span><br></pre></td></tr></table></figure><hr><h1 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h1><p>wc counts the number of words (or lines/characters) in the input</p><p><code>wc -options file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ wc sample <span class="comment"># returns lines, words, characters, filename</span></span><br><span class="line"> 13  39 214 sample</span><br><span class="line"></span><br><span class="line">$ wc -l sample <span class="comment"># returns lines, filename</span></span><br><span class="line">  13 sample</span><br><span class="line"></span><br><span class="line">$ wc -w sample <span class="comment"># returns words, filename</span></span><br><span class="line">  39 sample</span><br><span class="line"></span><br><span class="line">$ wc -lc sample <span class="comment"># returns lines, characters, filename</span></span><br><span class="line">  13 214 sample</span><br></pre></td></tr></table></figure><hr><h1 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h1><p>cut is a neat utility for grabbing cloumns from a file</p><p><code>cut -options path</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ cut -f 1,3 -d <span class="string">' '</span> sample </span><br><span class="line">Fred 20</span><br><span class="line">Susy 5</span><br><span class="line">Mark 12</span><br><span class="line">Robert 4</span><br><span class="line">Terry 9</span><br><span class="line">Lisa 7</span><br><span class="line">Susy 12</span><br><span class="line">Mark 39</span><br><span class="line">Anne 7</span><br><span class="line">Greg 3</span><br><span class="line">Oliver 2</span><br><span class="line">Betty 14</span><br><span class="line">Julie 30</span><br></pre></td></tr></table></figure><p>Common options:</p><ul><li><code>-f</code> for fields</li><li><code>-d</code> for delimiters</li></ul><hr><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p>sed is a stream editor, which should be used to search and replace text</p><p><code>sed &lt;expression&gt; file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sed <span class="string">'s/oranges/bananas/g'</span> sample</span><br><span class="line">Fred apples 20</span><br><span class="line">Susy bananas 5</span><br><span class="line">Mark watermellons 12</span><br><span class="line">Robert pears 4</span><br><span class="line">Terry bananas 9</span><br><span class="line">Lisa peaches 7</span><br><span class="line">Susy bananas 12</span><br><span class="line">Mark grapes 39</span><br><span class="line">Anne mangoes 7</span><br><span class="line">Greg pineapples 3</span><br><span class="line">Oliver rockmellons 2</span><br><span class="line">Betty limes 14</span><br><span class="line">Julie bananas 30</span><br></pre></td></tr></table></figure><hr><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p>awk is a programming language for text manipulation</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ awk <span class="string">'&#123;print $3&#125;'</span> sample </span><br><span class="line">20</span><br><span class="line">5</span><br><span class="line">12</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">7</span><br><span class="line">12</span><br><span class="line">39</span><br><span class="line">7</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">14</span><br><span class="line">30</span><br></pre></td></tr></table></figure><p>Common options:</p><ul><li><code>$n</code> grabs the n-th column</li><li><code>-F</code> sets the field separator</li></ul><hr><h1 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h1><p>uniq removes duplicates from data</p><p><code>uniq  [options] file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat file</span><br><span class="line">Hello World</span><br><span class="line">Hello World</span><br><span class="line">Then end</span><br><span class="line"></span><br><span class="line">$ uniq file</span><br><span class="line">Hello World</span><br><span class="line">Then end</span><br></pre></td></tr></table></figure><hr><h1 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h1><p><code>tac</code> is just cat in reverse. It prints the last line first, and first line last.</p><p><code>tac file</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ tac sample</span><br><span class="line">Julie bananas 30</span><br><span class="line">Betty limes 14</span><br><span class="line">Oliver rockmellons 2</span><br><span class="line">Greg pineapples 3</span><br><span class="line">Anne mangoes 7</span><br><span class="line">Mark grapes 39</span><br><span class="line">Susy oranges 12</span><br><span class="line">Lisa peaches 7</span><br><span class="line">Terry oranges 9</span><br><span class="line">Robert pears 4</span><br><span class="line">Mark watermellons 12</span><br><span class="line">Susy oranges 5</span><br><span class="line">Fred apples 20</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="Scripting"><a href="#Scripting" class="headerlink" title="Scripting"></a>Scripting</h1><hr><h1 id="Scripting-1"><a href="#Scripting-1" class="headerlink" title="Scripting"></a>Scripting</h1><p>A script is a document containing actions the shell can perform.</p><p>Scripts are typically written using <code>sh</code>, but recently <code>python</code><br>has been replacing shell scripts.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># declare STRING variable</span></span><br><span class="line">STRING=<span class="string">"Hello World"</span></span><br><span class="line"><span class="comment"># print variable on a screen</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$STRING</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/python</span></span><br><span class="line"><span class="comment"># declare STRING variable</span></span><br><span class="line">STRING=<span class="string">"Hello World"</span></span><br><span class="line"><span class="comment"># print variable on a screen</span></span><br><span class="line"><span class="keyword">print</span> STRING</span><br></pre></td></tr></table></figure><p>Set execute privileges before running:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x hello_world</span><br><span class="line">$ ./hello_world</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="Development-Environments"><a href="#Development-Environments" class="headerlink" title="Development Environments"></a>Development Environments</h1><hr><h1 id="Isolated-Development-Environments"><a href="#Isolated-Development-Environments" class="headerlink" title="Isolated Development Environments"></a>Isolated Development Environments</h1><p>Inspired by functional programming, isolated development environments<br>prevent mutating the global system by creating isolated containers/shells.</p><p>Why?</p><ul><li>Packages are installed in multiple locations (<code>/bin</code>, <code>/sbin</code>, <code>/usr/bin</code>, etc.)</li><li>Upgrading a package is dangerous</li><li>Upgrades are not atomic</li><li>Hard to install multiple versions of packages</li><li>No rollbacks</li><li>Difficult to understand dependencies</li><li>Incomplete dependencies</li><li>Root privileges required</li></ul><hr><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker is a platform for building applications.</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">MAINTAINER</span> Siddhanathan Shanmugam</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Servo requirements</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y \</span></span><br><span class="line"><span class="bash">  curl freeglut3-dev \</span></span><br><span class="line"><span class="bash">  libfreetype6-dev libgl1-mesa-dri libglib2.0-dev xorg-dev \</span></span><br><span class="line"><span class="bash">  gperf g++ cmake python-virtualenv python-pip \</span></span><br><span class="line"><span class="bash">  libssl-dev libbz2-dev libosmesa6-dev libxmu6 libxmu-dev libglu1-mesa-dev</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Useful tools</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get install -y sudo git python-dev vim</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> useradd -m -d /home/servo -s /bin/bash servo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"servo ALL=(ALL) NOPASSWD: ALL"</span> &gt; /etc/sudoers.d/servo \</span></span><br><span class="line"><span class="bash">  &amp;&amp; chmod 0440 /etc/sudoers.d/servo</span></span><br><span class="line"><span class="keyword">ENV</span> HOME /home/servo</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /home/servo</span></span><br><span class="line"><span class="keyword">USER</span> servo</span><br></pre></td></tr></table></figure><hr><h1 id="Docker-1"><a href="#Docker-1" class="headerlink" title="Docker"></a>Docker</h1><p>You can build projects in an isolated container:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t siddhu/servo .</span><br><span class="line">$ docker run --rm -i -t siddhu/servo /bin/bash</span><br><span class="line"></span><br><span class="line">docker$ <span class="comment"># run any commands you need</span></span><br></pre></td></tr></table></figure><p>Good for software development since you know exactly what your dependencies are.<br>It doesn’t affect the global system at all.</p><p>It’s especially useful for developing Linux applications on Mac OS X, or Windows.</p><hr><h1 id="Nix"><a href="#Nix" class="headerlink" title="Nix"></a>Nix</h1><p>Nix is a purely functional package manager. Nix allows creating isolated<br>development environments almost instantaneously.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ nix-shell -p cowsay</span><br><span class="line"></span><br><span class="line">nix-shell$ cowsay hi!</span><br><span class="line"> _____ </span><br><span class="line">&lt; hi! &gt;</span><br><span class="line"> ----- </span><br><span class="line">        \   ^__^</span><br><span class="line">         \  (oo)\_______</span><br><span class="line">            (__)\       )\/\</span><br><span class="line">                ||----w |</span><br><span class="line">                ||     ||</span><br></pre></td></tr></table></figure><p>Nix shell packages are temporary, and can be deleted using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nix-collect-garbage -d</span><br></pre></td></tr></table></figure><p>This is super useful when you only temporarily want a package.</p><hr><h1 id="Nix-1"><a href="#Nix-1" class="headerlink" title="Nix"></a>Nix</h1><p>You can also write <code>shell.nix</code> files for your applications:</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">import</span> &lt;nixpkgs&gt; &#123;&#125;; &#123;</span><br><span class="line">    <span class="attr">sdlEnv</span> = stdenv.mkDerivation &#123;</span><br><span class="line">        <span class="attr">name</span> = <span class="string">"sdl"</span>;</span><br><span class="line">        <span class="attr">buildInputs</span> = [ stdenv SDL SDL_image SDL_ttf SDL_gfx cmake SDL_net ];</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simply cd into the directory containing <code>shell.nix</code> and type <code>nix-shell</code> to<br>enter the development environment.</p><p>Unlike Docker, Nix does not provide an isolated container. It only installs<br>dependencies without polluting the global system.</p><hr><h1 id="Nix-2"><a href="#Nix-2" class="headerlink" title="Nix"></a>Nix</h1><p>Installing multiple versions of packages with Nix is easy:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nix-shell -p haskell.packages.ghc784.ghc</span><br><span class="line"></span><br><span class="line">$ nix-shell -p haskell.packages.ghc7103.ghc</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="Finding"><a href="#Finding" class="headerlink" title="Finding"></a>Finding</h1><hr><h1 id="Regular-Expressions"><a href="#Regular-Expressions" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h1><p>Regular expressions (regex) allow us to specify patterns</p><ul><li><code>.</code> (dot) - a single character.</li><li><code>?</code> - the preceding character matches 0 or 1 times only.</li><li><code>*</code> - the preceding character matches 0 or more times.</li><li><code>+</code> - the preceding character matches 1 or more times.</li><li><code>{n}</code> - the preceding character matches exactly n times.</li><li><code>{n,m}</code> - the preceding character matches at least n times and not more than m times.</li><li><code>[agd]</code> - the character is one of those included within the square brackets.</li><li><code>[^agd]</code> - the character is not one of those included within the square brackets.</li><li><code>[c-f]</code> - the dash within the square brackets operates as a range. In this case it means either the letters c, d, e or f.</li><li><code>()</code> - allows us to group several characters to behave as one.</li><li><code>|</code> (pipe symbol) - the logical OR operation.</li><li><code>^</code> - matches the beginning of the line.</li><li><code>$</code> - matches the end of the line.</li></ul><hr><h1 id="Regular-Expressions-1"><a href="#Regular-Expressions-1" class="headerlink" title="Regular Expressions"></a>Regular Expressions</h1><p>eGrep finds matches based on regex’s and prints them</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ egrep <span class="string">'mellons'</span> sample <span class="comment"># find mellons</span></span><br><span class="line">Mark watermellons 12</span><br><span class="line">Oliver rockmellons 2</span><br><span class="line"></span><br><span class="line">$ egrep -n <span class="string">'mellons'</span> sample <span class="comment"># display line numbers of matches</span></span><br><span class="line">3:Mark watermellons 12</span><br><span class="line">11:Oliver rockmellons 2</span><br><span class="line"></span><br><span class="line">$ egrep -c <span class="string">'mellons'</span> sample <span class="comment"># display only number of occurances</span></span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">$ egrep <span class="string">'^[A-K]'</span> sample <span class="comment"># find any name that begins with A-K</span></span><br><span class="line">Fred apples 20</span><br><span class="line">Anne mangoes 7</span><br><span class="line">Greg pineapples 3</span><br><span class="line">Betty limes 14</span><br><span class="line">Julie bananas 30</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="Makefiles"><a href="#Makefiles" class="headerlink" title="Makefiles"></a>Makefiles</h1><hr><h1 id="Makefiles-1"><a href="#Makefiles-1" class="headerlink" title="Makefiles"></a>Makefiles</h1><ul><li>Make your life easier</li><li>Automate tasks</li><li>Use their own specification language</li><li>Flexible rules</li><li>Imperative for distribution</li></ul><hr><h1 id="Makefiles-2"><a href="#Makefiles-2" class="headerlink" title="Makefiles"></a>Makefiles</h1><p><u>Makefile</u>:</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CC           = gcc</span><br><span class="line">CFLAGS       = -std=c89 -Wpedantic -Wall</span><br><span class="line">DEBUG        = -ggdb</span><br><span class="line">GRAPHITEOPTS = -ftree-vectorize -floop-interchange</span><br><span class="line">CFLAGS       += -march=native -mtune=native -Ofast $&#123;GRAPHITEOPTS&#125;</span><br><span class="line">LDFLAGS      = -s $&#123;LIBS&#125; $&#123;CFLAGS&#125;</span><br><span class="line">SOURCES      = source.c another.c</span><br><span class="line">TARGETS      = $&#123;SOURCES:.c=&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(TARGETS)</span></span></span><br><span class="line"></span><br><span class="line"><span class="section">%.o: %.c</span></span><br><span class="line">    @<span class="variable">$(CC)</span> -c <span class="variable">$(CFLAGS)</span> <span class="variable">$(LDFLAGS)</span> <span class="variable">$&lt;</span></span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">    rm *.o <span class="variable">$(TARGETS)</span></span><br></pre></td></tr></table></figure><p><code>gcc -o outfile infile</code> ⇒ <code>make infile</code></p><hr><h1 id="Makefiles-3"><a href="#Makefiles-3" class="headerlink" title="Makefiles"></a>Makefiles</h1><h2 id="Common-targets"><a href="#Common-targets" class="headerlink" title="Common targets"></a>Common targets</h2><style></style><table cellpadding="5px">    <tr><td class="cell-target"><code>all:</code></td>        <td>            This target is mandatory. It runs by default if nothing is supplied            after <code>$ make</code> and usually compiles the main program.        </td>    </tr>    <tr>        <td class="cell-target"><code>clean:</code></td>        <td>            This target generally cleans all generated files so that the            working directory may return to its original state, barring            modified files.        </td>    </tr>    <tr>        <td class="cell-target"><code>install:</code></td>        <td>            This target moves compiled files to their respective directories            within the filesystem tree. It triggers compilation if necessary.        </td>    </tr>    <tr></table><hr><h1 id="Kernel-Drivers"><a href="#Kernel-Drivers" class="headerlink" title="Kernel Drivers"></a>Kernel Drivers</h1><ul><li>Built-in vs. modular<ul><li>File system drivers?</li><li>Webcam drivers?</li></ul></li><li>Not executable</li><li>May use kernel data structures</li><li>Parameters</li><li>Licensing</li></ul><hr><h1 id="Kernel-Drivers-1"><a href="#Kernel-Drivers-1" class="headerlink" title="Kernel Drivers"></a>Kernel Drivers</h1><h2 id="Commands-to-interact-with-modules"><a href="#Commands-to-interact-with-modules" class="headerlink" title="Commands to interact with modules"></a>Commands to interact with modules</h2><table cellpadding="5px">    <tr><td class="cell-target"><code>modprobe <modulename></code></td>        <td>            Loads a kernel module.        </td>    </tr>    <tr>        <td class="cell-target"><code>rmmod <modulename></code></td>        <td>            Removes a module from the kernel.        </td>    </tr>    <tr>        <td class="cell-target"><code>lsmod</code></td>        <td>            Displays a listing of kernel modules.        </td>    </tr>    <tr>        <td class="cell-target"><code>modinfo <modname></code></td>        <td>            Displays information about a kernel module.<br/>        </td>    </tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> modinfo iwlwifi | grep -E <span class="string">"filename|author|description|license"</span></span></span><br><span class="line">filename:       /lib/modules/4.4.1gentoosamus/kernel/drivers/net/</span><br><span class="line">                wireless/iwlwifi/iwlwifi.ko</span><br><span class="line">license:        GPL</span><br><span class="line">author:         Copyright(c) 2003- 2015 Intel Corporation</span><br><span class="line">                &lt;ilw@linux.intel.com&gt;</span><br><span class="line">description:    Intel(R) Wireless WiFi driver for Linux</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="Version-Control"><a href="#Version-Control" class="headerlink" title="Version Control"></a>Version Control</h1><hr><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>A version control system maintains a database containing different<br>versions of the file. Useful for seeing what changed, and rolling<br>back to older revisions.</p><p>.right-column[<img data-src="https://git-scm.com/book/en/v2/book/01-introduction/images/local.png" alt="img">]</p><hr><p>class: inverse, center, middle</p><h1 id="Advanced-Navigation"><a href="#Advanced-Navigation" class="headerlink" title="Advanced Navigation"></a>Advanced Navigation</h1><hr><h1 id="Being-more-productive"><a href="#Being-more-productive" class="headerlink" title="Being more productive"></a>Being more productive</h1><p>.center[<img data-src="http://i.kinja-img.com/gawker-media/image/upload/vkadegotlwqvivpppfb5.png" alt="img">]</p><hr><h1 id="Special-Variables"><a href="#Special-Variables" class="headerlink" title="Special Variables"></a>Special Variables</h1><ul><li><code>$1, $2, $3, ...</code> are the positional parameters.</li><li><code>&quot;$@&quot;</code> is an array-like construct of all positional parameters, {$1, $2, $3 …}.</li><li><code>&quot;$*&quot;</code> is the IFS expansion of all positional parameters, $1 $2 $3 ….</li><li><code>$#</code> is the number of positional parameters.</li><li><code>$-</code> current options set for the shell.</li><li><code>$$</code> pid of the current shell (not subshell).</li><li><code>$_</code> most recent parameter (or the abs path of the command to start the current shell immediately after startup).</li><li><code>$IFS</code> is the (input) field separator.</li><li><code>$?</code> is the most recent foreground pipeline exit status.</li><li><code>$!</code> is the PID of the most recent background command.</li><li><code>$0</code> is the name of the shell or shell script.</li></ul><hr><h1 id="History-Completion"><a href="#History-Completion" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>!!</code> executes the previous command</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello, World"</span></span><br><span class="line">Hello, World</span><br><span class="line"></span><br><span class="line">$ !!</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello, World"</span></span><br><span class="line">Hello, World</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h1 id="History-Completion-1"><a href="#History-Completion-1" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>!-n</code> executes the n-th previous command</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"World 1"</span></span><br><span class="line">World 1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"World 2"</span></span><br><span class="line">World 2</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"World 3"</span></span><br><span class="line">World 3</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"World 4"</span></span><br><span class="line">World 4</span><br><span class="line"></span><br><span class="line">$ !-3</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"World 2"</span></span><br><span class="line">World 2</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h1 id="History-Completion-2"><a href="#History-Completion-2" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>!programName</code> executes the previous command that starts with programName</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ps | grep zsh</span><br><span class="line">28618 pts/1    00:00:00 zsh</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello, World"</span></span><br><span class="line"></span><br><span class="line">$ !ps</span><br><span class="line">ps | grep zsh</span><br><span class="line">28618 pts/1    00:00:00 zsh</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h1 id="History-Completion-3"><a href="#History-Completion-3" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>!?text</code> executes the previous command that contains the string text</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ls /etc/cron.daily/passwd </span><br><span class="line">/etc/cron.daily/passwd</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello, World"</span></span><br><span class="line">Hello, World</span><br><span class="line"></span><br><span class="line">$ !?cron</span><br><span class="line">ls /etc/cron.daily/passwd </span><br><span class="line">/etc/cron.daily/passwd</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h1 id="History-Completion-4"><a href="#History-Completion-4" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>^str1^str2^</code> replaces the string str1 in the previous command with str2</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l /etc/cron.daily/passwd </span><br><span class="line">-rwxr-xr-x 1 root root 249 Feb 16  2014 /etc/cron.daily/passwd</span><br><span class="line"></span><br><span class="line">$ !!:s/ls -l/cat/</span><br><span class="line">cat /etc/cron.daily/passwd </span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /var/backups || <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello, World"</span></span><br><span class="line">Hello, World</span><br><span class="line"></span><br><span class="line">$ ^ls -l^cat^</span><br><span class="line">cat /etc/cron.daily/passwd </span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> /var/backups || <span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h1 id="History-Completion-5"><a href="#History-Completion-5" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>:^</code> gets the first argument of a command</li><li><code>:$</code> gets the last argument of a command</li><li><code>:n</code> gets the n-th argument of a command</li><li><code>:*</code> gets all arguments of a command</li><li><code>:x-y</code> gets a range of arguments</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir ~/backup</span><br><span class="line"></span><br><span class="line">$ cp /etc/passwd ~/backup/</span><br><span class="line"></span><br><span class="line">$ ls -l !cp:^</span><br><span class="line">ls -l /etc/passwd</span><br><span class="line">-rw-r--r-- 1 root root 2001 Mar  1 13:38 /etc/passwd</span><br><span class="line"></span><br><span class="line">$ ls -l !cp:$</span><br><span class="line">ls -l ~/backup/</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 siddhu siddhu 2001 May 12 23:00 passwd</span><br><span class="line"></span><br><span class="line">$ ls -l !cp:2</span><br><span class="line">ls -l ~/backup/</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r-- 1 siddhu siddhu 2001 May 12 23:00 passwd</span><br><span class="line"></span><br><span class="line">$</span><br></pre></td></tr></table></figure><hr><h1 id="History-Completion-6"><a href="#History-Completion-6" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>!%</code> gets the last searched command</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/<span class="built_in">local</span>/apache2/bin/apachectl restart</span><br><span class="line"></span><br><span class="line">$ !?apache</span><br><span class="line">/usr/<span class="built_in">local</span>/apache2/bin/apachectl restart</span><br><span class="line"></span><br><span class="line">$ !% stop</span><br><span class="line">/usr/<span class="built_in">local</span>/apache2/bin/apachectl stop</span><br></pre></td></tr></table></figure><hr><h1 id="History-Completion-7"><a href="#History-Completion-7" class="headerlink" title="History Completion"></a>History Completion</h1><ul><li><code>:p</code> completes the command without executing it</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ tar cvf old.tar a b c d</span><br><span class="line"></span><br><span class="line">$ tar cvfz new.tar !tar:3-:p</span><br><span class="line">tar cvfz new.tar a b c</span><br></pre></td></tr></table></figure><hr><h1 id="Removing-Path-Names"><a href="#Removing-Path-Names" class="headerlink" title="Removing Path Names"></a>Removing Path Names</h1><ul><li><code>:h</code> removes trailing path names</li><li><code>:t</code> removes leading path names</li><li><code>:r</code> removes the file extension</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ ls -l code/<span class="built_in">test</span>/llvm/Main.hs</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu 463 Feb 24 22:33 code/<span class="built_in">test</span>/llvm/Main.hs</span><br><span class="line"></span><br><span class="line">$ ls -l !!:$:h</span><br><span class="line">ls -l code/<span class="built_in">test</span>/llvm</span><br><span class="line">total 20</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu  908 Feb 24 22:28 Lexer.hs</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu  463 Feb 24 22:33 Main.hs</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu 1763 Feb 24 22:30 Parser.hs</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu  348 Feb 24 22:33 shell.nix</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu  284 Feb 24 22:30 Syntax.hs</span><br><span class="line"></span><br><span class="line">$ ls -l !-2:$:t</span><br><span class="line">ls -l Main.hs</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu 463 Feb 24 22:40 Main.hs</span><br><span class="line"></span><br><span class="line">$ ls -l !-3:$:r</span><br><span class="line">ls -l code/<span class="built_in">test</span>/llvm/Main</span><br><span class="line">-rw-rw-r-- 1 siddhu siddhu 463 Feb 24 22:55 Main</span><br></pre></td></tr></table></figure><hr><p>class: inverse, center, middle</p><h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><h2 id="interactive-tutorials"><a href="#interactive-tutorials" class="headerlink" title="(interactive tutorials?)"></a>(interactive tutorials?)</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Linux </tag>
            
            <tag> WorkShop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo command memo</title>
      <link href="/2014/05/16/Hexo-command-memo/"/>
      <url>/2014/05/16/Hexo-command-memo/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a>–</p>]]></content>
      
      
      
        <tags>
            
            <tag> Tech </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
